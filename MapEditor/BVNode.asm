; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_R4?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::`RTTI Complete Object Locator'
PUBLIC	??_R4hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ ; PhiveNavMesh::hkUint8::`RTTI Complete Object Locator'
PUBLIC	??_R3hkWriteable@PhiveBinaryVectorWriter@@8	; PhiveBinaryVectorWriter::hkWriteable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AUhkWriteable@PhiveBinaryVectorWriter@@@8	; PhiveBinaryVectorWriter::hkWriteable `RTTI Type Descriptor'
PUBLIC	??_R4hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::`RTTI Complete Object Locator'
PUBLIC	??_R3hkUint8@PhiveNavMesh@@8			; PhiveNavMesh::hkUint8::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::`vftable'
PUBLIC	??_R0?AUhkReadable@PhiveBinaryVectorReader@@@8	; PhiveBinaryVectorReader::hkReadable `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@hkUint16@PhiveNavMesh@@8		; PhiveNavMesh::hkUint16::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2hkUint16@PhiveNavMesh@@8			; PhiveNavMesh::hkUint16::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@hkWriteable@PhiveBinaryVectorWriter@@8 ; PhiveBinaryVectorWriter::hkWriteable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3hkReadable@PhiveBinaryVectorReader@@8	; PhiveBinaryVectorReader::hkReadable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4hkReadable@PhiveBinaryVectorReader@@6B@	; PhiveBinaryVectorReader::hkReadable::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@@8 ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3> `RTTI Type Descriptor'
PUBLIC	??_7hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ ; PhiveNavMesh::hkUint8::`vftable'
PUBLIC	??_R4hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@8 ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUhkUint8@PhiveNavMesh@@@8		; PhiveNavMesh::hkUint8 `RTTI Type Descriptor'
PUBLIC	??_R3hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@8 ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@8 ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::`vftable'
PUBLIC	??_R4hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ ; PhiveNavMesh::hkUint16::`RTTI Complete Object Locator'
PUBLIC	??_R4?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::`RTTI Complete Object Locator'
PUBLIC	??_R17?0A@EA@hkWriteable@PhiveBinaryVectorWriter@@8 ; PhiveBinaryVectorWriter::hkWriteable::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R3hkUint16@PhiveNavMesh@@8			; PhiveNavMesh::hkUint16::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::`RTTI Complete Object Locator'
PUBLIC	??_R4hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ ; PhiveNavMesh::hkUint8::`RTTI Complete Object Locator'
PUBLIC	??_7hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ ; PhiveNavMesh::hkUint8::`vftable'
PUBLIC	??_R2hkWriteable@PhiveBinaryVectorWriter@@8	; PhiveBinaryVectorWriter::hkWriteable::`RTTI Base Class Array'
PUBLIC	??_7hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ ; PhiveNavMesh::hkUint16::`vftable'
PUBLIC	??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::`vftable'
PUBLIC	??_R1A@?0A@EA@hkReadable@PhiveBinaryVectorReader@@8 ; PhiveBinaryVectorReader::hkReadable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@8 ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@hkUint8@PhiveNavMesh@@8		; PhiveNavMesh::hkUint8::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7hkWriteable@PhiveBinaryVectorWriter@@6B@	; PhiveBinaryVectorWriter::hkWriteable::`vftable'
PUBLIC	??_R2hkReadable@PhiveBinaryVectorReader@@8	; PhiveBinaryVectorReader::hkReadable::`RTTI Base Class Array'
PUBLIC	??_7hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ ; PhiveNavMesh::hkUint16::`vftable'
PUBLIC	??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::`vftable'
PUBLIC	??_R2hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@8 ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::`RTTI Base Class Array'
PUBLIC	??_R3hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@8 ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::`vftable'
PUBLIC	??_R0?AUhkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@@8 ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase `RTTI Type Descriptor'
PUBLIC	??_R0?AUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@8 ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec `RTTI Type Descriptor'
PUBLIC	??_R0?AUhkUint16@PhiveNavMesh@@@8		; PhiveNavMesh::hkUint16 `RTTI Type Descriptor'
PUBLIC	??_R4hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ ; PhiveNavMesh::hkUint16::`RTTI Complete Object Locator'
PUBLIC	??_R4hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::`RTTI Complete Object Locator'
PUBLIC	??_R2hkUint8@PhiveNavMesh@@8			; PhiveNavMesh::hkUint8::`RTTI Base Class Array'
PUBLIC	??_7hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::`vftable'
PUBLIC	??_R2hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@8 ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@8 ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7hkReadable@PhiveBinaryVectorReader@@6B@	; PhiveBinaryVectorReader::hkReadable::`vftable'
PUBLIC	??_R3?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@8 ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4hkWriteable@PhiveBinaryVectorWriter@@6B@	; PhiveBinaryVectorWriter::hkWriteable::`RTTI Complete Object Locator'
PUBLIC	??_C@_0BO@GJMNMPPO@Could?5not?5build?5BVH?5from?5mesh@ ; `string'
PUBLIC	??_C@_06LIACFCFI@BVNode@			; `string'
PUBLIC	??_C@_0CB@JJGLBKFG@Could?5not?5build?5BVH?5from?5domain@ ; `string'
EXTRN	__imp__purecall:PROC
EXTRN	_purecall:PROC
;	COMDAT ??_C@_0CB@JJGLBKFG@Could?5not?5build?5BVH?5from?5domain@
CONST	SEGMENT
??_C@_0CB@JJGLBKFG@Could?5not?5build?5BVH?5from?5domain@ DB 'Could not bu'
	DB	'ild BVH from domains', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LIACFCFI@BVNode@
CONST	SEGMENT
??_C@_06LIACFCFI@BVNode@ DB 'BVNode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GJMNMPPO@Could?5not?5build?5BVH?5from?5mesh@
CONST	SEGMENT
??_C@_0BO@GJMNMPPO@Could?5not?5build?5BVH?5from?5mesh@ DB 'Could not buil'
	DB	'd BVH from mesh', 00H			; `string'
CONST	ENDS
;	COMDAT ??_R4hkWriteable@PhiveBinaryVectorWriter@@6B@
rdata$r	SEGMENT
??_R4hkWriteable@PhiveBinaryVectorWriter@@6B@ DD 01H	; PhiveBinaryVectorWriter::hkWriteable::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AUhkWriteable@PhiveBinaryVectorWriter@@@8
	DD	imagerel ??_R3hkWriteable@PhiveBinaryVectorWriter@@8
	DD	imagerel ??_R4hkWriteable@PhiveBinaryVectorWriter@@6B@
rdata$r	ENDS
;	COMDAT ??_R3?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@8
rdata$r	SEGMENT
??_R3?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@8 DD 00H ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	imagerel ??_R2?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@8
rdata$r	ENDS
;	COMDAT ??_7hkReadable@PhiveBinaryVectorReader@@6B@
CONST	SEGMENT
??_7hkReadable@PhiveBinaryVectorReader@@6B@ DQ FLAT:??_R4hkReadable@PhiveBinaryVectorReader@@6B@ ; PhiveBinaryVectorReader::hkReadable::`vftable'
	DQ	FLAT:_purecall
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@8 DD imagerel ??_R0?AUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@8 ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@8
rdata$r	ENDS
;	COMDAT ??_R2hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@8
rdata$r	SEGMENT
??_R2hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@8 DD imagerel ??_R1A@?0A@EA@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@8 ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@8
	DD	imagerel ??_R1A@?0A@EA@hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@8
	DD	imagerel ??_R1A@?0A@EA@hkReadable@PhiveBinaryVectorReader@@8
	DD	imagerel ??_R17?0A@EA@hkWriteable@PhiveBinaryVectorWriter@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_7hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
CONST	SEGMENT
??_7hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ DQ FLAT:??_R4hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::`vftable'
	DQ	FLAT:?Read@hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z
CONST	ENDS
;	COMDAT ??_R2hkUint8@PhiveNavMesh@@8
rdata$r	SEGMENT
??_R2hkUint8@PhiveNavMesh@@8 DD imagerel ??_R1A@?0A@EA@hkUint8@PhiveNavMesh@@8 ; PhiveNavMesh::hkUint8::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@hkReadable@PhiveBinaryVectorReader@@8
	DD	imagerel ??_R17?0A@EA@hkWriteable@PhiveBinaryVectorWriter@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R4hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
rdata$r	SEGMENT
??_R4hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ DD 01H ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AUhkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@@8
	DD	imagerel ??_R3hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@8
	DD	imagerel ??_R4hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
rdata$r	ENDS
;	COMDAT ??_R4hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
rdata$r	SEGMENT
??_R4hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ DD 01H ; PhiveNavMesh::hkUint16::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AUhkUint16@PhiveNavMesh@@@8
	DD	imagerel ??_R3hkUint16@PhiveNavMesh@@8
	DD	imagerel ??_R4hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
rdata$r	ENDS
;	COMDAT ??_R0?AUhkUint16@PhiveNavMesh@@@8
data$rs	SEGMENT
??_R0?AUhkUint16@PhiveNavMesh@@@8 DQ FLAT:??_7type_info@@6B@ ; PhiveNavMesh::hkUint16 `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AUhkUint16@PhiveNavMesh@@', 00H
data$rs	ENDS
;	COMDAT ??_R0?AUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@8
data$rs	SEGMENT
??_R0?AUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@8 DQ FLAT:??_7type_info@@6B@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMe'
	DB	'sh@@', 00H
data$rs	ENDS
;	COMDAT ??_R0?AUhkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@@8
data$rs	SEGMENT
??_R0?AUhkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@@8 DQ FLAT:??_7type_info@@6B@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AUhkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh'
	DB	'@@', 00H
data$rs	ENDS
;	COMDAT ??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
CONST	SEGMENT
??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ DQ FLAT:??_R4hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::`vftable'
	DQ	FLAT:?Write@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z
CONST	ENDS
;	COMDAT ??_R3hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@8
rdata$r	SEGMENT
??_R3hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@8 DD 00H ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	imagerel ??_R2hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@8
rdata$r	ENDS
;	COMDAT ??_R2hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@8
rdata$r	SEGMENT
??_R2hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@8 DD imagerel ??_R1A@?0A@EA@hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@8 ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@hkReadable@PhiveBinaryVectorReader@@8
	DD	imagerel ??_R17?0A@EA@hkWriteable@PhiveBinaryVectorWriter@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
CONST	SEGMENT
??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ DQ FLAT:??_R4hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::`vftable'
	DQ	FLAT:?Read@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z
CONST	ENDS
;	COMDAT ??_7hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
CONST	SEGMENT
??_7hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ DQ FLAT:??_R4hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ ; PhiveNavMesh::hkUint16::`vftable'
	DQ	FLAT:?Read@hkUint16@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z
CONST	ENDS
;	COMDAT ??_R2hkReadable@PhiveBinaryVectorReader@@8
rdata$r	SEGMENT
??_R2hkReadable@PhiveBinaryVectorReader@@8 DD imagerel ??_R1A@?0A@EA@hkReadable@PhiveBinaryVectorReader@@8 ; PhiveBinaryVectorReader::hkReadable::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_7hkWriteable@PhiveBinaryVectorWriter@@6B@
CONST	SEGMENT
??_7hkWriteable@PhiveBinaryVectorWriter@@6B@ DQ FLAT:??_R4hkWriteable@PhiveBinaryVectorWriter@@6B@ ; PhiveBinaryVectorWriter::hkWriteable::`vftable'
	DQ	FLAT:_purecall
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@hkUint8@PhiveNavMesh@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@hkUint8@PhiveNavMesh@@8 DD imagerel ??_R0?AUhkUint8@PhiveNavMesh@@@8 ; PhiveNavMesh::hkUint8::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3hkUint8@PhiveNavMesh@@8
rdata$r	ENDS
;	COMDAT ??_R2?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@8
rdata$r	SEGMENT
??_R2?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@8 DD imagerel ??_R1A@?0A@EA@?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@8 ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@8
	DD	imagerel ??_R1A@?0A@EA@hkReadable@PhiveBinaryVectorReader@@8
	DD	imagerel ??_R17?0A@EA@hkWriteable@PhiveBinaryVectorWriter@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@hkReadable@PhiveBinaryVectorReader@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@hkReadable@PhiveBinaryVectorReader@@8 DD imagerel ??_R0?AUhkReadable@PhiveBinaryVectorReader@@@8 ; PhiveBinaryVectorReader::hkReadable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3hkReadable@PhiveBinaryVectorReader@@8
rdata$r	ENDS
;	COMDAT ??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
CONST	SEGMENT
??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ DQ FLAT:??_R4?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::`vftable'
	DQ	FLAT:?Write@?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z
CONST	ENDS
;	COMDAT ??_7hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
CONST	SEGMENT
??_7hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ DQ FLAT:??_R4hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ ; PhiveNavMesh::hkUint16::`vftable'
	DQ	FLAT:?Write@hkUint16@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z
CONST	ENDS
;	COMDAT ??_R2hkWriteable@PhiveBinaryVectorWriter@@8
rdata$r	SEGMENT
??_R2hkWriteable@PhiveBinaryVectorWriter@@8 DD imagerel ??_R1A@?0A@EA@hkWriteable@PhiveBinaryVectorWriter@@8 ; PhiveBinaryVectorWriter::hkWriteable::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_7hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
CONST	SEGMENT
??_7hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ DQ FLAT:??_R4hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ ; PhiveNavMesh::hkUint8::`vftable'
	DQ	FLAT:?Write@hkUint8@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z
CONST	ENDS
;	COMDAT ??_R4hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
rdata$r	SEGMENT
??_R4hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ DD 01H ; PhiveNavMesh::hkUint8::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	imagerel ??_R0?AUhkUint8@PhiveNavMesh@@@8
	DD	imagerel ??_R3hkUint8@PhiveNavMesh@@8
	DD	imagerel ??_R4hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
rdata$r	ENDS
;	COMDAT ??_R4hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
rdata$r	SEGMENT
??_R4hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ DD 01H ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@8
	DD	imagerel ??_R3hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@8
	DD	imagerel ??_R4hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
rdata$r	ENDS
;	COMDAT ??_R3hkUint16@PhiveNavMesh@@8
rdata$r	SEGMENT
??_R3hkUint16@PhiveNavMesh@@8 DD 00H			; PhiveNavMesh::hkUint16::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	imagerel ??_R2hkUint16@PhiveNavMesh@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EA@hkWriteable@PhiveBinaryVectorWriter@@8
rdata$r	SEGMENT
??_R17?0A@EA@hkWriteable@PhiveBinaryVectorWriter@@8 DD imagerel ??_R0?AUhkWriteable@PhiveBinaryVectorWriter@@@8 ; PhiveBinaryVectorWriter::hkWriteable::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3hkWriteable@PhiveBinaryVectorWriter@@8
rdata$r	ENDS
;	COMDAT ??_R4?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
rdata$r	SEGMENT
??_R4?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ DD 01H ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	imagerel ??_R0?AU?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@@8
	DD	imagerel ??_R3?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@8
	DD	imagerel ??_R4?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
rdata$r	ENDS
;	COMDAT ??_R4hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
rdata$r	SEGMENT
??_R4hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ DD 01H ; PhiveNavMesh::hkUint16::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	imagerel ??_R0?AUhkUint16@PhiveNavMesh@@@8
	DD	imagerel ??_R3hkUint16@PhiveNavMesh@@8
	DD	imagerel ??_R4hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
rdata$r	ENDS
;	COMDAT ??_7hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
CONST	SEGMENT
??_7hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ DQ FLAT:??_R4hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::`vftable'
	DQ	FLAT:?Write@hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@8 DD imagerel ??_R0?AU?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@@8 ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@8
rdata$r	ENDS
;	COMDAT ??_R3hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@8
rdata$r	SEGMENT
??_R3hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@8 DD 00H ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	imagerel ??_R2hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUhkUint8@PhiveNavMesh@@@8
data$rs	SEGMENT
??_R0?AUhkUint8@PhiveNavMesh@@@8 DQ FLAT:??_7type_info@@6B@ ; PhiveNavMesh::hkUint8 `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AUhkUint8@PhiveNavMesh@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@8 DD imagerel ??_R0?AUhkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@@8 ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@8
rdata$r	ENDS
;	COMDAT ??_R4hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
rdata$r	SEGMENT
??_R4hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ DD 01H ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	imagerel ??_R0?AUhkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@@8
	DD	imagerel ??_R3hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@8
	DD	imagerel ??_R4hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
rdata$r	ENDS
;	COMDAT ??_7hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
CONST	SEGMENT
??_7hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ DQ FLAT:??_R4hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ ; PhiveNavMesh::hkUint8::`vftable'
	DQ	FLAT:?Read@hkUint8@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z
CONST	ENDS
;	COMDAT ??_R0?AU?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@@8
data$rs	SEGMENT
??_R0?AU?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@@8 DQ FLAT:??_7type_info@@6B@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3> `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AU?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02'
	DB	'@PhiveNavMesh@@', 00H
data$rs	ENDS
;	COMDAT ??_R4hkReadable@PhiveBinaryVectorReader@@6B@
rdata$r	SEGMENT
??_R4hkReadable@PhiveBinaryVectorReader@@6B@ DD 01H	; PhiveBinaryVectorReader::hkReadable::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AUhkReadable@PhiveBinaryVectorReader@@@8
	DD	imagerel ??_R3hkReadable@PhiveBinaryVectorReader@@8
	DD	imagerel ??_R4hkReadable@PhiveBinaryVectorReader@@6B@
rdata$r	ENDS
;	COMDAT ??_R3hkReadable@PhiveBinaryVectorReader@@8
rdata$r	SEGMENT
??_R3hkReadable@PhiveBinaryVectorReader@@8 DD 00H	; PhiveBinaryVectorReader::hkReadable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2hkReadable@PhiveBinaryVectorReader@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@hkWriteable@PhiveBinaryVectorWriter@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@hkWriteable@PhiveBinaryVectorWriter@@8 DD imagerel ??_R0?AUhkWriteable@PhiveBinaryVectorWriter@@@8 ; PhiveBinaryVectorWriter::hkWriteable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3hkWriteable@PhiveBinaryVectorWriter@@8
rdata$r	ENDS
;	COMDAT ??_R2hkUint16@PhiveNavMesh@@8
rdata$r	SEGMENT
??_R2hkUint16@PhiveNavMesh@@8 DD imagerel ??_R1A@?0A@EA@hkUint16@PhiveNavMesh@@8 ; PhiveNavMesh::hkUint16::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@hkReadable@PhiveBinaryVectorReader@@8
	DD	imagerel ??_R17?0A@EA@hkWriteable@PhiveBinaryVectorWriter@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@hkUint16@PhiveNavMesh@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@hkUint16@PhiveNavMesh@@8 DD imagerel ??_R0?AUhkUint16@PhiveNavMesh@@@8 ; PhiveNavMesh::hkUint16::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3hkUint16@PhiveNavMesh@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUhkReadable@PhiveBinaryVectorReader@@@8
data$rs	SEGMENT
??_R0?AUhkReadable@PhiveBinaryVectorReader@@@8 DQ FLAT:??_7type_info@@6B@ ; PhiveBinaryVectorReader::hkReadable `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AUhkReadable@PhiveBinaryVectorReader@@', 00H
data$rs	ENDS
;	COMDAT ??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
CONST	SEGMENT
??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ DQ FLAT:??_R4?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::`vftable'
	DQ	FLAT:?Read@?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z
CONST	ENDS
;	COMDAT ??_R3hkUint8@PhiveNavMesh@@8
rdata$r	SEGMENT
??_R3hkUint8@PhiveNavMesh@@8 DD 00H			; PhiveNavMesh::hkUint8::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	imagerel ??_R2hkUint8@PhiveNavMesh@@8
rdata$r	ENDS
;	COMDAT ??_R4hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
rdata$r	SEGMENT
??_R4hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@ DD 01H ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	imagerel ??_R0?AUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@8
	DD	imagerel ??_R3hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@8
	DD	imagerel ??_R4hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
rdata$r	ENDS
;	COMDAT ??_R0?AUhkWriteable@PhiveBinaryVectorWriter@@@8
data$rs	SEGMENT
??_R0?AUhkWriteable@PhiveBinaryVectorWriter@@@8 DQ FLAT:??_7type_info@@6B@ ; PhiveBinaryVectorWriter::hkWriteable `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AUhkWriteable@PhiveBinaryVectorWriter@@', 00H
data$rs	ENDS
;	COMDAT ??_R3hkWriteable@PhiveBinaryVectorWriter@@8
rdata$r	SEGMENT
??_R3hkWriteable@PhiveBinaryVectorWriter@@8 DD 00H	; PhiveBinaryVectorWriter::hkWriteable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2hkWriteable@PhiveBinaryVectorWriter@@8
rdata$r	ENDS
;	COMDAT ??_R4hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
rdata$r	SEGMENT
??_R4hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ DD 01H ; PhiveNavMesh::hkUint8::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AUhkUint8@PhiveNavMesh@@@8
	DD	imagerel ??_R3hkUint8@PhiveNavMesh@@8
	DD	imagerel ??_R4hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
rdata$r	ENDS
;	COMDAT ??_R4?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
rdata$r	SEGMENT
??_R4?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@ DD 01H ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AU?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@@8
	DD	imagerel ??_R3?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@8
	DD	imagerel ??_R4?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
PUBLIC	??0hkUint16@PhiveNavMesh@@QEAA@$$QEAU01@@Z	; PhiveNavMesh::hkUint16::hkUint16
PUBLIC	??0hkUint8@PhiveNavMesh@@QEAA@$$QEAU01@@Z	; PhiveNavMesh::hkUint8::hkUint8
PUBLIC	??0hkWriteable@PhiveBinaryVectorWriter@@QEAA@$$QEAU01@@Z ; PhiveBinaryVectorWriter::hkWriteable::hkWriteable
PUBLIC	??0hkReadable@PhiveBinaryVectorReader@@QEAA@$$QEAU01@@Z ; PhiveBinaryVectorReader::hkReadable::hkReadable
PUBLIC	??0hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@QEAA@$$QEAU01@@Z ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::hkcdCompressedAabbCodecs__AabbCodecBase
PUBLIC	??0?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@QEAA@$$QEAU01@@Z ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>
PUBLIC	??0hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAA@$$QEAU01@@Z ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::hkcdCompressedAabbCodecs__Aabb6BytesCodec
PUBLIC	??$construct_at@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@U12@$0A@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@$$QEAU12@@Z ; std::construct_at<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,0>
PUBLIC	??$construct_at@VBVNode@@V1@$0A@@std@@YAPEAVBVNode@@QEAV1@$$QEAV1@@Z ; std::construct_at<BVNode,BVNode,0>
PUBLIC	??$construct_at@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@$$V$0A@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@@Z ; std::construct_at<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,0>
PUBLIC	??$construct@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@U12@@?$_Default_allocator_traits@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@SAXAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@1@QEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::construct<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>
PUBLIC	??$forward@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@YA$$QEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@AEAU12@@Z ; std::forward<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>
PUBLIC	??$construct@VBVNode@@V1@@?$_Default_allocator_traits@V?$allocator@VBVNode@@@std@@@std@@SAXAEAV?$allocator@VBVNode@@@1@QEAVBVNode@@$$QEAV3@@Z ; std::_Default_allocator_traits<std::allocator<BVNode> >::construct<BVNode,BVNode>
PUBLIC	??$forward@VBVNode@@@std@@YA$$QEAVBVNode@@AEAV1@@Z ; std::forward<BVNode>
PUBLIC	??$to_address@VBVNode@@@std@@YAPEAVBVNode@@QEAV1@@Z ; std::to_address<BVNode>
PUBLIC	??$construct@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@$$V@?$_Default_allocator_traits@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@SAXAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@1@QEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@Z ; std::_Default_allocator_traits<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::construct<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>
PUBLIC	??$_Unfancy@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@@Z ; std::_Unfancy<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>
PUBLIC	??$_Emplace_back@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAX$$QEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@Z ; std::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Emplace_back<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>
PUBLIC	??$move@AEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@YA$$QEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@AEAU12@@Z ; std::move<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec &>
PUBLIC	??$_Emplace_back@VBVNode@@@?$_Uninitialized_backout_al@V?$allocator@VBVNode@@@std@@@std@@QEAAX$$QEAVBVNode@@@Z ; std::_Uninitialized_backout_al<std::allocator<BVNode> >::_Emplace_back<BVNode>
PUBLIC	??$_To_address@PEAVBVNode@@@std@@YA?A_PAEBQEAVBVNode@@@Z ; std::_To_address<BVNode *>
PUBLIC	??$_Copy_memmove@PEAVBVNode@@PEAV1@@std@@YAPEAVBVNode@@PEAV1@00@Z ; std::_Copy_memmove<BVNode *,BVNode *>
PUBLIC	??$move@AEAVBVNode@@@std@@YA$$QEAVBVNode@@AEAV1@@Z ; std::move<BVNode &>
PUBLIC	??$construct_at@VBVNode@@AEBV1@$0A@@std@@YAPEAVBVNode@@QEAV1@AEBV1@@Z ; std::construct_at<BVNode,BVNode const &,0>
PUBLIC	??$addressof@VBVNode@@@std@@YAPEAVBVNode@@AEAV1@@Z ; std::addressof<BVNode>
PUBLIC	??$construct_at@MAEBM$0A@@std@@YAPEAMQEAMAEBM@Z	; std::construct_at<float,float const &,0>
PUBLIC	??$addressof@M@std@@YAPEAMAEAM@Z		; std::addressof<float>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@VBVNode@@@std@@@std@@QEAA@PEAVBVNode@@AEAV?$allocator@VBVNode@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<BVNode> >::_Uninitialized_backout_al<std::allocator<BVNode> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@VBVNode@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<BVNode> >::~_Uninitialized_backout_al<std::allocator<BVNode> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@VBVNode@@@std@@@std@@QEAAPEAVBVNode@@XZ ; std::_Uninitialized_backout_al<std::allocator<BVNode> >::_Release
PUBLIC	?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@VBVNode@@@std@@@std@@QEAAX_K@Z ; std::_Uninitialized_backout_al<std::allocator<BVNode> >::__autoclassinit2
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Emplace_back<>
PUBLIC	??$_Uninitialized_move@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@0PEAU12@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z ; std::_Uninitialized_move<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec *,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
PUBLIC	??$_Get_unwrapped@AEBQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@YA?A_TAEBQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@Z ; std::_Get_unwrapped<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec * const &>
PUBLIC	??$_Uninitialized_move@PEAVBVNode@@V?$allocator@VBVNode@@@std@@@std@@YAPEAVBVNode@@QEAV1@0PEAV1@AEAV?$allocator@VBVNode@@@0@@Z ; std::_Uninitialized_move<BVNode *,std::allocator<BVNode> >
PUBLIC	??$_Get_unwrapped@AEBQEAVBVNode@@@std@@YA?A_TAEBQEAVBVNode@@@Z ; std::_Get_unwrapped<BVNode * const &>
PUBLIC	??$construct@VBVNode@@AEBV1@@?$_Default_allocator_traits@V?$allocator@VBVNode@@@std@@@std@@SAXAEAV?$allocator@VBVNode@@@1@QEAVBVNode@@AEBV3@@Z ; std::_Default_allocator_traits<std::allocator<BVNode> >::construct<BVNode,BVNode const &>
PUBLIC	??$_Unfancy@VBVNode@@@std@@YAPEAVBVNode@@PEAV1@@Z ; std::_Unfancy<BVNode>
PUBLIC	??$_Construct_in_place@VBVNode@@AEBV1@@std@@YAXAEAVBVNode@@AEBV1@@Z ; std::_Construct_in_place<BVNode,BVNode const &>
PUBLIC	??$construct@MAEBM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAEAV?$allocator@M@1@QEAMAEBM@Z ; std::_Default_allocator_traits<std::allocator<float> >::construct<float,float const &>
PUBLIC	??$_Construct_in_place@MAEBM@std@@YAXAEAMAEBM@Z	; std::_Construct_in_place<float,float const &>
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@V?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@2@$00@std@@QEBAAEBV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@2@XZ ; std::_Compressed_pair<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@VBVNode@@@std@@V?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@2@$00@std@@QEBAAEBV?$allocator@VBVNode@@@2@XZ ; std::_Compressed_pair<std::allocator<BVNode>,std::_Vector_val<std::_Simple_types<BVNode> >,1>::_Get_first
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@SA_KAEBV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@2@@Z ; std::_Default_allocator_traits<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::max_size
PUBLIC	?capacity@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEBA_KXZ ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::capacity
PUBLIC	?_Getal@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEBAAEBV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@2@XZ ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Getal
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@VBVNode@@@std@@@std@@SA_KAEBV?$allocator@VBVNode@@@2@@Z ; std::_Default_allocator_traits<std::allocator<BVNode> >::max_size
PUBLIC	?capacity@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEBA_KXZ ; std::vector<BVNode,std::allocator<BVNode> >::capacity
PUBLIC	?_Getal@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEBAAEBV?$allocator@VBVNode@@@2@XZ ; std::vector<BVNode,std::allocator<BVNode> >::_Getal
PUBLIC	?allocate@?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@QEAAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K@Z ; std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>::allocate
PUBLIC	?max_size@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEBA_KXZ ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::max_size
PUBLIC	?_Calculate_growth@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEBA_K_K@Z ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAXQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K1@Z ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Change_array
PUBLIC	?_Xlength@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@CAXXZ ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Xlength
PUBLIC	?allocate@?$allocator@VBVNode@@@std@@QEAAPEAVBVNode@@_K@Z ; std::allocator<BVNode>::allocate
PUBLIC	?max_size@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEBA_KXZ ; std::vector<BVNode,std::allocator<BVNode> >::max_size
PUBLIC	?_Calculate_growth@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEBA_K_K@Z ; std::vector<BVNode,std::allocator<BVNode> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAXQEAVBVNode@@_K1@Z ; std::vector<BVNode,std::allocator<BVNode> >::_Change_array
PUBLIC	?_Xlength@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@CAXXZ ; std::vector<BVNode,std::allocator<BVNode> >::_Xlength
PUBLIC	?_Orphan_range@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEBAXPEAVBVNode@@0@Z ; std::vector<BVNode,std::allocator<BVNode> >::_Orphan_range
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::~_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@XZ ; std::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Release
PUBLIC	?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAX_K@Z ; std::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::__autoclassinit2
PUBLIC	??$forward@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@YA$$QEAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@AEAPEAU12@@Z ; std::forward<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec *>
PUBLIC	??$forward@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YA$$QEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@AEAV10@@Z ; std::forward<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@_KAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$forward@PEAVBVNode@@@std@@YA$$QEAPEAVBVNode@@AEAPEAV1@@Z ; std::forward<BVNode *>
PUBLIC	??$forward@V?$allocator@VBVNode@@@std@@@std@@YA$$QEAV?$allocator@VBVNode@@@0@AEAV10@@Z ; std::forward<std::allocator<BVNode> >
PUBLIC	??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z ; std::vector<BVNode,std::allocator<BVNode> >::_Emplace_reallocate<BVNode const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAAEAVBVNode@@AEBV2@@Z ; std::vector<BVNode,std::allocator<BVNode> >::_Emplace_back_with_unused_capacity<BVNode const &>
PUBLIC	??$forward@AEBVBVNode@@@std@@YAAEBVBVNode@@AEBV1@@Z ; std::forward<BVNode const &>
PUBLIC	??$_Emplace_reallocate@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAMAEBM@Z ; std::vector<float,std::allocator<float> >::_Emplace_reallocate<float const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAMAEBM@Z ; std::vector<float,std::allocator<float> >::_Emplace_back_with_unused_capacity<float const &>
PUBLIC	??0?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@QEAA@XZ ; std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>
PUBLIC	?_Orphan_range@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEBAXPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@0@Z ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Orphan_range
PUBLIC	??0?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
PUBLIC	??0?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@00@Z ; std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
PUBLIC	??0?$allocator@VBVNode@@@std@@QEAA@XZ		; std::allocator<BVNode>::allocator<BVNode>
PUBLIC	??0?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<BVNode> >::_Vector_val<std::_Simple_types<BVNode> >
PUBLIC	??0?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@std@@QEAA@PEAVBVNode@@00@Z ; std::_Vector_val<std::_Simple_types<BVNode> >::_Vector_val<std::_Simple_types<BVNode> >
PUBLIC	??$_Destroy_range@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAXPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z ; std::_Destroy_range<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
PUBLIC	??$_Destroy_range@V?$allocator@VBVNode@@@std@@@std@@YAXPEAVBVNode@@QEAV1@AEAV?$allocator@VBVNode@@@0@@Z ; std::_Destroy_range<std::allocator<BVNode> >
PUBLIC	??$_Destroy_range@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@YAXPEAU?$vec@$02M$0A@@glm@@QEAU12@AEAV?$allocator@U?$vec@$02M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::vec<3,float,0> > >
PUBLIC	??$_Unfancy_maybe_null@I@std@@YAPEAIPEAI@Z	; std::_Unfancy_maybe_null<unsigned int>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@V?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >,1>::_Compressed_pair<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >,1><>
PUBLIC	??$?0V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU23@PEAU23@@?$_Compressed_pair@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@V?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@1@$$QEAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@22@Z ; std::_Compressed_pair<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >,1>::_Compressed_pair<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >,1><std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec *,PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec *,PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec *>
PUBLIC	??$exchange@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@$$T@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@AEAPEAU12@$$QEA$$T@Z ; std::exchange<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec *,std::nullptr_t>
PUBLIC	??$move@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YA$$QEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@AEAV10@@Z ; std::move<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> &>
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Resize<std::_Value_init_tag>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@VBVNode@@@std@@V?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<BVNode>,std::_Vector_val<std::_Simple_types<BVNode> >,1>::_Compressed_pair<std::allocator<BVNode>,std::_Vector_val<std::_Simple_types<BVNode> >,1><>
PUBLIC	??$?0V?$allocator@VBVNode@@@std@@PEAVBVNode@@PEAV2@PEAV2@@?$_Compressed_pair@V?$allocator@VBVNode@@@std@@V?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@VBVNode@@@1@$$QEAPEAVBVNode@@22@Z ; std::_Compressed_pair<std::allocator<BVNode>,std::_Vector_val<std::_Simple_types<BVNode> >,1>::_Compressed_pair<std::allocator<BVNode>,std::_Vector_val<std::_Simple_types<BVNode> >,1><std::allocator<BVNode>,BVNode *,BVNode *,BVNode *>
PUBLIC	??$exchange@PEAVBVNode@@$$T@std@@YAPEAVBVNode@@AEAPEAV1@$$QEA$$T@Z ; std::exchange<BVNode *,std::nullptr_t>
PUBLIC	??$move@AEAV?$allocator@VBVNode@@@std@@@std@@YA$$QEAV?$allocator@VBVNode@@@0@AEAV10@@Z ; std::move<std::allocator<BVNode> &>
PUBLIC	??$_Emplace_one_at_back@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAAEAVBVNode@@AEBV2@@Z ; std::vector<BVNode,std::allocator<BVNode> >::_Emplace_one_at_back<BVNode const &>
PUBLIC	??$_Emplace_one_at_back@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAMAEBM@Z ; std::vector<float,std::allocator<float> >::_Emplace_one_at_back<float const &>
PUBLIC	??$_Unfancy_maybe_null@M@std@@YAPEAMPEAM@Z	; std::_Unfancy_maybe_null<float>
PUBLIC	??$min@H@std@@YAAEBHAEBH0@Z			; std::min<int>
PUBLIC	??$fmax@MH$0A@@@YANMH@Z				; fmax<float,int,0>
PUBLIC	??0?$vec@$02M$0A@@glm@@QEAA@MMM@Z		; glm::vec<3,float,0>::vec<3,float,0>
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$vec@$02M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$vec@$02M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::vec<3,float,0> >,std::_Vector_val<std::_Simple_types<glm::vec<3,float,0> > >,1>::_Get_first
PUBLIC	?deallocate@?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@QEAAXQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K@Z ; std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>::deallocate
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@V?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@2@$00@std@@QEAAAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@2@XZ ; std::_Compressed_pair<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >,1>::_Get_first
PUBLIC	?deallocate@?$allocator@VBVNode@@@std@@QEAAXQEAVBVNode@@_K@Z ; std::allocator<BVNode>::deallocate
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@VBVNode@@@std@@V?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@2@$00@std@@QEAAAEAV?$allocator@VBVNode@@@2@XZ ; std::_Compressed_pair<std::allocator<BVNode>,std::_Vector_val<std::_Simple_types<BVNode> >,1>::_Get_first
PUBLIC	?deallocate@?$allocator@U?$vec@$02M$0A@@glm@@@std@@QEAAXQEAU?$vec@$02M$0A@@glm@@_K@Z ; std::allocator<glm::vec<3,float,0> >::deallocate
PUBLIC	?_Getal@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$vec@$02M$0A@@glm@@@2@XZ ; std::vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >::_Getal
PUBLIC	?_Tidy@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAXXZ ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Tidy
PUBLIC	?_Getal@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@2@XZ ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Getal
PUBLIC	?_Tidy@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAXXZ ; std::vector<BVNode,std::allocator<BVNode> >::_Tidy
PUBLIC	?_Getal@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAAEAV?$allocator@VBVNode@@@2@XZ ; std::vector<BVNode,std::allocator<BVNode> >::_Getal
PUBLIC	?_Tidy@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >::_Tidy
PUBLIC	?data@?$vector@IV?$allocator@I@std@@@std@@QEAAPEAIXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::data
PUBLIC	?Read@?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::Read
PUBLIC	?Write@?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::Write
PUBLIC	??0?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@XZ ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
PUBLIC	??0?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@$$QEAV01@@Z ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
PUBLIC	??1?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@XZ ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::~vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
PUBLIC	?resize@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAX_K@Z ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::resize
PUBLIC	?size@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEBA_KXZ ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::size
PUBLIC	??A?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAAEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K@Z ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::operator[]
PUBLIC	??0?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAA@XZ ; std::vector<BVNode,std::allocator<BVNode> >::vector<BVNode,std::allocator<BVNode> >
PUBLIC	??0?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAA@$$QEAV01@@Z ; std::vector<BVNode,std::allocator<BVNode> >::vector<BVNode,std::allocator<BVNode> >
PUBLIC	??1?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAA@XZ ; std::vector<BVNode,std::allocator<BVNode> >::~vector<BVNode,std::allocator<BVNode> >
PUBLIC	?push_back@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAAXAEBVBVNode@@@Z ; std::vector<BVNode,std::allocator<BVNode> >::push_back
PUBLIC	??A?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAAAEAVBVNode@@_K@Z ; std::vector<BVNode,std::allocator<BVNode> >::operator[]
PUBLIC	??1?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >::~vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >
PUBLIC	?_Unchecked_begin@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@QEAAPEAU?$vec@$02M$0A@@glm@@XZ ; std::vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@QEAAPEAU?$vec@$02M$0A@@glm@@XZ ; std::vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >::_Unchecked_end
PUBLIC	?push_back@?$vector@MV?$allocator@M@std@@@std@@QEAAXAEBM@Z ; std::vector<float,std::allocator<float> >::push_back
PUBLIC	?data@?$vector@MV?$allocator@M@std@@@std@@QEAAPEAMXZ ; std::vector<float,std::allocator<float> >::data
PUBLIC	?_Unchecked_begin@?$vector@UNode@?$Bvh@M@bvh@@V?$allocator@UNode@?$Bvh@M@bvh@@@std@@@std@@QEAAPEAUNode@?$Bvh@M@bvh@@XZ ; std::vector<bvh::Bvh<float>::Node,std::allocator<bvh::Bvh<float>::Node> >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$vector@UNode@?$Bvh@M@bvh@@V?$allocator@UNode@?$Bvh@M@bvh@@@std@@@std@@QEAAPEAUNode@?$Bvh@M@bvh@@XZ ; std::vector<bvh::Bvh<float>::Node,std::allocator<bvh::Bvh<float>::Node> >::_Unchecked_end
PUBLIC	?size@?$vector@UNode@?$Bvh@M@bvh@@V?$allocator@UNode@?$Bvh@M@bvh@@@std@@@std@@QEBA_KXZ ; std::vector<bvh::Bvh<float>::Node,std::allocator<bvh::Bvh<float>::Node> >::size
PUBLIC	?__autoclassinit2@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAX_K@Z ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::__autoclassinit2
PUBLIC	?BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ ; BVNode::BuildAxis6ByteTree
PUBLIC	??4hkUint16@PhiveNavMesh@@QEAAAEAU01@AEBU01@@Z	; PhiveNavMesh::hkUint16::operator=
PUBLIC	??4hkUint8@PhiveNavMesh@@QEAAAEAU01@AEBU01@@Z	; PhiveNavMesh::hkUint8::operator=
PUBLIC	??4hkWriteable@PhiveBinaryVectorWriter@@QEAAAEAU01@AEBU01@@Z ; PhiveBinaryVectorWriter::hkWriteable::operator=
PUBLIC	??4hkReadable@PhiveBinaryVectorReader@@QEAAAEAU01@AEBU01@@Z ; PhiveBinaryVectorReader::hkReadable::operator=
PUBLIC	??4hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@QEAAAEAU01@AEBU01@@Z ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::operator=
PUBLIC	??4?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@QEAAAEAU01@AEBU01@@Z ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::operator=
PUBLIC	??4hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAAAEAU01@AEBU01@@Z ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::operator=
PUBLIC	??0hkUint16@PhiveNavMesh@@QEAA@XZ		; PhiveNavMesh::hkUint16::hkUint16
PUBLIC	??0hkUint8@PhiveNavMesh@@QEAA@XZ		; PhiveNavMesh::hkUint8::hkUint8
PUBLIC	??0hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@QEAA@XZ ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::hkcdCompressedAabbCodecs__AabbCodecBase
PUBLIC	??0?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@QEAA@XZ ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>
PUBLIC	??0hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAA@XZ ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::hkcdCompressedAabbCodecs__Aabb6BytesCodec
PUBLIC	?CompressNode@@YAXAEAV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@PEAVBVNode@@U?$vec@$02M$0A@@glm@@2_N@Z ; CompressNode
PUBLIC	?CompressDim@@YAEMMMM@Z				; CompressDim
PUBLIC	?__autoclassinit2@BVNode@@QEAAX_K@Z		; BVNode::__autoclassinit2
PUBLIC	?__autoclassinit2@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAAX_K@Z ; std::vector<BVNode,std::allocator<BVNode> >::__autoclassinit2
PUBLIC	??0BVNode@@QEAA@XZ				; BVNode::BVNode
PUBLIC	?BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ ; BVNode::BuildFriendlyBVH
PUBLIC	?BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z ; BVNode::BuildBVHForMesh
PUBLIC	??0hkWriteable@PhiveBinaryVectorWriter@@QEAA@XZ	; PhiveBinaryVectorWriter::hkWriteable::hkWriteable
PUBLIC	??0hkReadable@PhiveBinaryVectorReader@@QEAA@XZ	; PhiveBinaryVectorReader::hkReadable::hkReadable
PUBLIC	?DecompressMax@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAA?AU?$vec@$02M$0A@@glm@@U34@0@Z ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::DecompressMax
PUBLIC	?DecompressMin@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAA?AU?$vec@$02M$0A@@glm@@U34@0@Z ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::DecompressMin
PUBLIC	?Write@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::Write
PUBLIC	?Read@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::Read
PUBLIC	?Write@hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::Write
PUBLIC	?Read@hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::Read
PUBLIC	?Write@hkUint16@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z ; PhiveNavMesh::hkUint16::Write
PUBLIC	?Read@hkUint16@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z ; PhiveNavMesh::hkUint16::Read
PUBLIC	?Write@hkUint8@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z ; PhiveNavMesh::hkUint8::Write
PUBLIC	?Read@hkUint8@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z ; PhiveNavMesh::hkUint8::Read
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAVBVNode@@PEAV1@@std@@YAPEAVBVNode@@PEAV1@00@Z DD imagerel $LN4
	DD	imagerel $LN4+48
	DD	imagerel $unwind$??$_Copy_memmove@PEAVBVNode@@PEAV1@@std@@YAPEAVBVNode@@PEAV1@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@0PEAU12@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z DD imagerel $LN49
	DD	imagerel $LN49+19
	DD	imagerel $unwind$??$_Uninitialized_move@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@0PEAU12@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$??$_Uninitialized_move@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@0PEAU12@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z DD imagerel $LN49+19
	DD	imagerel $LN49+254
	DD	imagerel $chain$7$??$_Uninitialized_move@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@0PEAU12@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$??$_Uninitialized_move@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@0PEAU12@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z DD imagerel $LN49+254
	DD	imagerel $LN49+262
	DD	imagerel $chain$8$??$_Uninitialized_move@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@0PEAU12@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAVBVNode@@V?$allocator@VBVNode@@@std@@@std@@YAPEAVBVNode@@QEAV1@0PEAV1@AEAV?$allocator@VBVNode@@@0@@Z DD imagerel $LN27
	DD	imagerel $LN27+52
	DD	imagerel $unwind$??$_Uninitialized_move@PEAVBVNode@@V?$allocator@VBVNode@@@std@@@std@@YAPEAVBVNode@@QEAV1@0PEAV1@AEAV?$allocator@VBVNode@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@QEAAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K@Z DD imagerel $LN32
	DD	imagerel $LN32+116
	DD	imagerel $unwind$?allocate@?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@QEAAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAXQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K1@Z DD imagerel $LN30
	DD	imagerel $LN30+168
	DD	imagerel $unwind$?_Change_array@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAXQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@CAXXZ DD imagerel $LN4
	DD	imagerel $LN4+18
	DD	imagerel $unwind$?_Xlength@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@VBVNode@@@std@@QEAAPEAVBVNode@@_K@Z DD imagerel $LN32
	DD	imagerel $LN32+108
	DD	imagerel $unwind$?allocate@?$allocator@VBVNode@@@std@@QEAAPEAVBVNode@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAXQEAVBVNode@@_K1@Z DD imagerel $LN30
	DD	imagerel $LN30+142
	DD	imagerel $unwind$?_Change_array@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAXQEAVBVNode@@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@CAXXZ DD imagerel $LN4
	DD	imagerel $LN4+18
	DD	imagerel $unwind$?_Xlength@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_value_construct_n@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@_KAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z DD imagerel $LN49
	DD	imagerel $LN49+13
	DD	imagerel $unwind$??$_Uninitialized_value_construct_n@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@_KAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$??$_Uninitialized_value_construct_n@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@_KAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z DD imagerel $LN49+13
	DD	imagerel $LN49+163
	DD	imagerel $chain$2$??$_Uninitialized_value_construct_n@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@_KAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$??$_Uninitialized_value_construct_n@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@_KAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z DD imagerel $LN49+163
	DD	imagerel $LN49+171
	DD	imagerel $chain$3$??$_Uninitialized_value_construct_n@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@_KAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN95
	DD	imagerel $LN95+39
	DD	imagerel $unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN95+39
	DD	imagerel $LN95+50
	DD	imagerel $chain$0$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN95+50
	DD	imagerel $LN95+171
	DD	imagerel $chain$2$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN95+171
	DD	imagerel $LN95+359
	DD	imagerel $chain$4$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN95+359
	DD	imagerel $LN95+369
	DD	imagerel $chain$5$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN95+369
	DD	imagerel $LN95+479
	DD	imagerel $chain$6$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN95+479
	DD	imagerel $LN95+486
	DD	imagerel $chain$8$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN95+486
	DD	imagerel $LN95+492
	DD	imagerel $chain$9$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z DD imagerel $LN165
	DD	imagerel $LN165+71
	DD	imagerel $unwind$??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z DD imagerel $LN165+71
	DD	imagerel $LN165+416
	DD	imagerel $chain$1$??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z DD imagerel $LN165+416
	DD	imagerel $LN165+423
	DD	imagerel $chain$3$??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z DD imagerel $LN165+423
	DD	imagerel $LN165+429
	DD	imagerel $chain$4$??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z DD imagerel $LN165+429
	DD	imagerel $LN165+435
	DD	imagerel $chain$5$??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_reallocate@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAMAEBM@Z DD imagerel $LN101
	DD	imagerel $LN101+72
	DD	imagerel $unwind$??$_Emplace_reallocate@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAMAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$??$_Emplace_reallocate@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAMAEBM@Z DD imagerel $LN101+72
	DD	imagerel $LN101+234
	DD	imagerel $chain$1$??$_Emplace_reallocate@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAMAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$??$_Emplace_reallocate@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAMAEBM@Z DD imagerel $LN101+234
	DD	imagerel $LN101+240
	DD	imagerel $chain$2$??$_Emplace_reallocate@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAMAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN10
	DD	imagerel $LN10+119
	DD	imagerel $unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@QEAAXQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K@Z DD imagerel $LN23
	DD	imagerel $LN23+67
	DD	imagerel $unwind$?deallocate@?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@QEAAXQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@VBVNode@@@std@@QEAAXQEAVBVNode@@_K@Z DD imagerel $LN23
	DD	imagerel $LN23+66
	DD	imagerel $unwind$?deallocate@?$allocator@VBVNode@@@std@@QEAAXQEAVBVNode@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@U?$vec@$02M$0A@@glm@@@std@@QEAAXQEAU?$vec@$02M$0A@@glm@@_K@Z DD imagerel $LN23
	DD	imagerel $LN23+67
	DD	imagerel $unwind$?deallocate@?$allocator@U?$vec@$02M$0A@@glm@@@std@@QEAAXQEAU?$vec@$02M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAXXZ DD imagerel $LN30
	DD	imagerel $LN30+114
	DD	imagerel $unwind$?_Tidy@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAXXZ DD imagerel $LN30
	DD	imagerel $LN30+92
	DD	imagerel $unwind$?_Tidy@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@AEAAXXZ DD imagerel $LN30
	DD	imagerel $LN30+114
	DD	imagerel $unwind$?_Tidy@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Write@?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z DD imagerel $LN39
	DD	imagerel $LN39+107
	DD	imagerel $unwind$?Write@?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@XZ DD imagerel $LN33
	DD	imagerel $LN33+114
	DD	imagerel $unwind$??1?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAX_K@Z DD imagerel $LN12
	DD	imagerel $LN12+119
	DD	imagerel $unwind$?resize@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAA@XZ DD imagerel $LN33
	DD	imagerel $LN33+92
	DD	imagerel $unwind$??1?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ DD imagerel $LN15
	DD	imagerel $LN15+116
	DD	imagerel $unwind$?BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ@4HA DD imagerel ?dtor$0@?0??BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ@4HA
	DD	imagerel ?dtor$0@?0??BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ@4HA+38
	DD	imagerel $unwind$?dtor$0@?0??BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CompressNode@@YAXAEAV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@PEAVBVNode@@U?$vec@$02M$0A@@glm@@2_N@Z DD imagerel $LN64
	DD	imagerel $LN64+815
	DD	imagerel $unwind$?CompressNode@@YAXAEAV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@PEAVBVNode@@U?$vec@$02M$0A@@glm@@2_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CompressDim@@YAEMMMM@Z DD imagerel $LN19
	DD	imagerel $LN19+220
	DD	imagerel $unwind$?CompressDim@@YAEMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ DD imagerel $LN145
	DD	imagerel $LN145+531
	DD	imagerel $unwind$?BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ@4HA DD imagerel ?dtor$1@?0??BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ@4HA
	DD	imagerel ?dtor$1@?0??BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ@4HA+38
	DD	imagerel $unwind$?dtor$1@?0??BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z DD imagerel $LN211
	DD	imagerel $LN211+670
	DD	imagerel $unwind$?BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Write@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z DD imagerel $LN55
	DD	imagerel $LN55+133
	DD	imagerel $unwind$?Write@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Read@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z DD imagerel $LN53
	DD	imagerel $LN53+82
	DD	imagerel $unwind$?Read@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Read@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Write@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z DB 0cH
	DB	019H, 02H
	DB	06H
	DB	0d1H, 02H
	DB	08H
	DB	'L'
	DB	06H
	DB	'0'
	DB	04H
	DB	0b5H, 02H
	DB	00H
	DB	'8'
	DB	06H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z DB 08H
	DB	0cH
	DD	imagerel ??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
	DB	01H
	DB	02H
	DB	03cH
	DD	imagerel ??1?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@QEAA@XZ
	DB	0f0H
	DB	032H
	DD	imagerel ??1?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ
	DB	021H
	DB	02H
	DB	03cH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	0d0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z DB 028H
	DD	imagerel $stateUnwindMap$?BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z
	DD	imagerel $ip2state$?BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z DD 0a2719H
	DD	0170119H
	DD	0e00bf00dH
	DD	0c007d009H
	DD	060047005H
	DD	050023003H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z
	DD	0a2H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ DB 06H
	DB	08aH
	DB	02H
	DB	'm', 03H
	DB	04H
	DB	'U', 03H
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ DB 04H
	DB	0eH
	DD	imagerel ?dtor$1@?0??BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ@4HA
	DB	02aH
	DD	imagerel ??1?$vector@UNode@?$Bvh@M@bvh@@V?$allocator@UNode@?$Bvh@M@bvh@@@std@@@std@@QEAA@XZ
	DB	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ DB 028H
	DD	imagerel $stateUnwindMap$?BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ
	DD	imagerel $ip2state$?BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ DD 092819H
	DD	01a641aH
	DD	019341aH
	DD	014011aH
	DD	0700ce00eH
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ
	DD	092H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CompressDim@@YAEMMMM@Z DD 082c01H
	DD	02882cH
	DD	037823H
	DD	04680bH
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CompressNode@@YAXAEAV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@PEAVBVNode@@U?$vec@$02M$0A@@glm@@2_N@Z DD 0155701H
	DD	06b857H
	DD	07a849H
	DD	089839H
	DD	098834H
	DD	0a782cH
	DD	0b6825H
	DD	0180114H
	DD	0d00be00dH
	DD	07007c009H
	DD	050056006H
	DD	03004H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ DB 02H
	DB	0caH
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ DB 028H
	DD	imagerel $stateUnwindMap$?BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ
	DD	imagerel $ip2state$?BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ DD 020a11H
	DD	03006b20aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAX_K@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Write@?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@AEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@U?$vec@$02M$0A@@glm@@@std@@QEAAXQEAU?$vec@$02M$0A@@glm@@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@VBVNode@@@std@@QEAAXQEAVBVNode@@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@QEAAXQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$??$_Emplace_reallocate@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAMAEBM@Z DD 021H
	DD	imagerel $LN101
	DD	imagerel $LN101+72
	DD	imagerel $unwind$??$_Emplace_reallocate@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAMAEBM@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$??$_Emplace_reallocate@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAMAEBM@Z DD 041521H
	DD	0d6415H
	DD	0c5405H
	DD	imagerel $LN101
	DD	imagerel $LN101+72
	DD	imagerel $unwind$??$_Emplace_reallocate@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAMAEBM@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_reallocate@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAMAEBM@Z DD 060d01H
	DD	0f009320dH
	DD	0c005e007H
	DD	030027003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z DD 040021H
	DD	0d7400H
	DD	0c3400H
	DD	imagerel $LN165
	DD	imagerel $LN165+71
	DD	imagerel $unwind$??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z DD 021H
	DD	imagerel $LN165
	DD	imagerel $LN165+71
	DD	imagerel $unwind$??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z DD 040021H
	DD	0d7400H
	DD	0c3400H
	DD	imagerel $LN165
	DD	imagerel $LN165+71
	DD	imagerel $unwind$??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z DD 041421H
	DD	0d7414H
	DD	0c3405H
	DD	imagerel $LN165
	DD	imagerel $LN165+71
	DD	imagerel $unwind$??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z DD 060d01H
	DD	0f009320dH
	DD	0c005e007H
	DD	050026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021H
	DD	imagerel $LN95
	DD	imagerel $LN95+39
	DD	imagerel $unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 040021H
	DD	06f400H
	DD	0105400H
	DD	imagerel $LN95
	DD	imagerel $LN95+39
	DD	imagerel $unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 020021H
	DD	06f400H
	DD	imagerel $LN95+39
	DD	imagerel $LN95+50
	DD	imagerel $chain$0$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021H
	DD	imagerel $LN95+50
	DD	imagerel $LN95+171
	DD	imagerel $chain$2$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 040e21H
	DD	07d40eH
	DD	08c405H
	DD	imagerel $LN95+50
	DD	imagerel $LN95+171
	DD	imagerel $chain$2$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 043121H
	DD	06f431H
	DD	096405H
	DD	imagerel $LN95+39
	DD	imagerel $LN95+50
	DD	imagerel $chain$0$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 020821H
	DD	0105408H
	DD	imagerel $LN95
	DD	imagerel $LN95+39
	DD	imagerel $unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 040901H
	DD	0e0059209H
	DD	030027003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$??$_Uninitialized_value_construct_n@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@_KAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z DD 021H
	DD	imagerel $LN49
	DD	imagerel $LN49+13
	DD	imagerel $unwind$??$_Uninitialized_value_construct_n@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@_KAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$??$_Uninitialized_value_construct_n@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@_KAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z DD 061921H
	DD	07419H
	DD	03640eH
	DD	023405H
	DD	imagerel $LN49
	DD	imagerel $LN49+13
	DD	imagerel $unwind$??$_Uninitialized_value_construct_n@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@_KAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_value_construct_n@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@_KAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z DD 010401H
	DD	0204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@CAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAXQEAVBVNode@@_K1@Z DD 081401H
	DD	096414H
	DD	085414H
	DD	073414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@VBVNode@@@std@@QEAAPEAVBVNode@@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@CAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAXQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K1@Z DD 081501H
	DD	097415H
	DD	086415H
	DD	073415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@QEAAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAVBVNode@@V?$allocator@VBVNode@@@std@@@std@@YAPEAVBVNode@@QEAV1@0PEAV1@AEAV?$allocator@VBVNode@@@0@@Z DD 040a01H
	DD	09340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$??$_Uninitialized_move@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@0PEAU12@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z DD 021H
	DD	imagerel $LN49
	DD	imagerel $LN49+19
	DD	imagerel $unwind$??$_Uninitialized_move@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@0PEAU12@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$??$_Uninitialized_move@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@0PEAU12@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z DD 0104421H
	DD	0f444H
	DD	01e43cH
	DD	02d434H
	DD	03c429H
	DD	04741eH
	DD	086413H
	DD	07540cH
	DD	063404H
	DD	imagerel $LN49
	DD	imagerel $LN49+19
	DD	imagerel $unwind$??$_Uninitialized_move@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@0PEAU12@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@0PEAU12@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z DD 010701H
	DD	04207H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAVBVNode@@PEAV1@@std@@YAPEAVBVNode@@PEAV1@00@Z DD 040a01H
	DD	09340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
;	COMDAT ?Read@hkUint8@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z
_TEXT	SEGMENT
this$ = 8
Reader$ = 16
?Read@hkUint8@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z PROC ; PhiveNavMesh::hkUint8::Read, COMDAT
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp

; 146  : 	std::memcpy(Dest, this->m_Bytes.data() + this->m_Offset + 1, Size);

	movsxd	r8, DWORD PTR [rdx+8]
	mov	rax, QWORD PTR [rdx]
	mov	rax, QWORD PTR [rax]
	movzx	r8d, BYTE PTR [rax+r8+1]
	mov	BYTE PTR [rcx+16], r8b

; 147  : 
; 148  : 	//std::memcopy(this->m_Bytes.begin() + this->m_Offset + 1, this->m_Bytes.begin() + this->m_Offset + 1 + Size, static_cast<char*>(Dest));
; 149  : 
; 150  : 	this->m_Offset += Size;

	inc	DWORD PTR [rdx+8]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 162  :         }

	ret	0
?Read@hkUint8@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z ENDP ; PhiveNavMesh::hkUint8::Read
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
;	COMDAT ?Write@hkUint8@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z
_TEXT	SEGMENT
this$ = 8
Writer$ = 16
?Write@hkUint8@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z PROC ; PhiveNavMesh::hkUint8::Write, COMDAT

; 164  :         virtual void Write(PhiveBinaryVectorWriter& Writer) override {

	mov	rax, rdx

; 165  :             Writer.WriteRawUnsafeFixed(reinterpret_cast<const char*>(&m_primitiveBase), sizeof(m_primitiveBase));

	mov	r8d, 1
	lea	rdx, QWORD PTR [rcx+8]
	mov	rcx, rax
	jmp	?WriteRawUnsafeFixed@BinaryVectorWriter@@QEAAXPEBDH@Z ; BinaryVectorWriter::WriteRawUnsafeFixed
?Write@hkUint8@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z ENDP ; PhiveNavMesh::hkUint8::Write
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
;	COMDAT ?Read@hkUint16@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z
_TEXT	SEGMENT
this$ = 8
Reader$ = 16
?Read@hkUint16@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z PROC ; PhiveNavMesh::hkUint16::Read, COMDAT
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp

; 146  : 	std::memcpy(Dest, this->m_Bytes.data() + this->m_Offset + 1, Size);

	movsxd	r8, DWORD PTR [rdx+8]
	mov	rax, QWORD PTR [rdx]
	mov	rax, QWORD PTR [rax]
	movzx	r8d, WORD PTR [rax+r8+1]
	mov	WORD PTR [rcx+16], r8w

; 147  : 
; 148  : 	//std::memcopy(this->m_Bytes.begin() + this->m_Offset + 1, this->m_Bytes.begin() + this->m_Offset + 1 + Size, static_cast<char*>(Dest));
; 149  : 
; 150  : 	this->m_Offset += Size;

	add	DWORD PTR [rdx+8], 2
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 271  :         }

	ret	0
?Read@hkUint16@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z ENDP ; PhiveNavMesh::hkUint16::Read
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
;	COMDAT ?Write@hkUint16@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z
_TEXT	SEGMENT
this$ = 8
Writer$ = 16
?Write@hkUint16@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z PROC ; PhiveNavMesh::hkUint16::Write, COMDAT

; 273  :         virtual void Write(PhiveBinaryVectorWriter& Writer) override {

	mov	rax, rdx

; 274  :             Writer.WriteRawUnsafeFixed(reinterpret_cast<const char*>(&m_primitiveBase), sizeof(m_primitiveBase));

	mov	r8d, 2
	lea	rdx, QWORD PTR [rcx+8]
	mov	rcx, rax
	jmp	?WriteRawUnsafeFixed@BinaryVectorWriter@@QEAAXPEBDH@Z ; BinaryVectorWriter::WriteRawUnsafeFixed
?Write@hkUint16@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z ENDP ; PhiveNavMesh::hkUint16::Write
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
;	COMDAT ?Read@hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z
_TEXT	SEGMENT
this$ = 8
Reader$ = 16
?Read@hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z PROC ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::Read, COMDAT

; 917  :             Reader.Align(1);
; 918  :         }

	ret	0
?Read@hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z ENDP ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::Read
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
;	COMDAT ?Write@hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z
_TEXT	SEGMENT
this$ = 8
Writer$ = 16
?Write@hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z PROC ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::Write, COMDAT

; 921  :             Writer.Align(1);
; 922  : 
; 923  :         }

	ret	0
?Write@hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z ENDP ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::Write
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
;	COMDAT ?Read@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z
_TEXT	SEGMENT
this$ = 48
Reader$ = 56
?Read@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z PROC ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::Read, COMDAT

; 967  :         virtual void Read(PhiveBinaryVectorReader& Reader) override {

$LN53:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp

; 146  : 	std::memcpy(Dest, this->m_Bytes.data() + this->m_Offset + 1, Size);

	mov	rax, QWORD PTR [rdx]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 967  :         virtual void Read(PhiveBinaryVectorReader& Reader) override {

	mov	rbx, rcx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp

; 146  : 	std::memcpy(Dest, this->m_Bytes.data() + this->m_Offset + 1, Size);

	movsxd	r9, DWORD PTR [rdx+8]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 967  :         virtual void Read(PhiveBinaryVectorReader& Reader) override {

	mov	rdi, rdx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp

; 146  : 	std::memcpy(Dest, this->m_Bytes.data() + this->m_Offset + 1, Size);

	mov	r8, QWORD PTR [rax]
	movzx	eax, WORD PTR [r8+r9+1]
	mov	WORD PTR [rcx+16], ax
	movzx	eax, BYTE PTR [r8+r9+3]
	mov	BYTE PTR [rcx+18], al
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 970  :             m_hiData.Read(Reader);

	add	rcx, 24
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp

; 150  : 	this->m_Offset += Size;

	add	DWORD PTR [rdx+8], 3
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 970  :             m_hiData.Read(Reader);

	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax]

; 971  :             m_loData.Read(Reader);

	mov	rax, QWORD PTR [rbx+48]
	lea	rcx, QWORD PTR [rbx+48]
	mov	rdx, rdi

; 972  :         }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi

; 971  :             m_loData.Read(Reader);

	rex_jmp	QWORD PTR [rax]
?Read@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z ENDP ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::Read
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
;	COMDAT ?Write@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z
_TEXT	SEGMENT
this$ = 48
Writer$ = 56
?Write@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z PROC ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::Write, COMDAT

; 974  :         virtual void Write(PhiveBinaryVectorWriter& Writer) override {

$LN55:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	eax, DWORD PTR [rdx+24]
	mov	rbx, rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rdx, QWORD PTR [rdx+8]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp

; 70   : 	if (this->m_Offset + Size > this->m_Data.size())

	add	eax, 3
	movsxd	r8, eax
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 974  :         virtual void Write(PhiveBinaryVectorWriter& Writer) override {

	mov	rdi, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	rdx, QWORD PTR [rbx]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp

; 70   : 	if (this->m_Offset + Size > this->m_Data.size())

	cmp	r8, rdx
	jbe	SHORT $LL29@Write

; 71   : 	{
; 72   : 		this->m_Data.resize(this->m_Data.size() + Size);

	add	rdx, 3
	mov	rcx, rbx
	call	?resize@?$vector@EV?$allocator@E@std@@@std@@QEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize
$LL29@Write:

; 73   : 	}
; 74   : 	for (int i = 0; i < Size; i++)
; 75   : 	{
; 76   : 		this->m_Data[this->m_Offset + i] = Bytes[i];

	movzx	eax, BYTE PTR [rdi+8]
	movsxd	rdx, DWORD PTR [rbx+24]
	mov	rcx, QWORD PTR [rbx]
	mov	BYTE PTR [rdx+rcx], al
	movzx	eax, BYTE PTR [rdi+9]
	movsxd	rdx, DWORD PTR [rbx+24]
	mov	rcx, QWORD PTR [rbx]
	mov	BYTE PTR [rdx+rcx+1], al
	movsxd	rdx, DWORD PTR [rbx+24]
	mov	rcx, QWORD PTR [rbx]
	movzx	eax, BYTE PTR [rdi+10]
	mov	BYTE PTR [rdx+rcx+2], al
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 977  :             m_hiData.Write(Writer);

	lea	rcx, QWORD PTR [rdi+24]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp

; 78   : 	this->m_Offset += Size;

	add	DWORD PTR [rbx+24], 3
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 977  :             m_hiData.Write(Writer);

	mov	rdx, rbx
	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax]

; 978  :             m_loData.Write(Writer);

	mov	rax, QWORD PTR [rdi+48]
	lea	rcx, QWORD PTR [rdi+48]
	mov	rdx, rbx

; 979  : 
; 980  :         }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi

; 978  :             m_loData.Write(Writer);

	rex_jmp	QWORD PTR [rax]
?Write@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z ENDP ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::Write
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Libraries\include\glm\detail\type_vec3.inl
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Libraries\include\glm\detail\type_vec3.inl
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Libraries\include\glm\detail\type_vec3.inl
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
;	COMDAT ?DecompressMin@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAA?AU?$vec@$02M$0A@@glm@@U34@0@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
ParentMin$ = 24
ParentMax$ = 32
?DecompressMin@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAA?AU?$vec@$02M$0A@@glm@@U34@0@Z PROC ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::DecompressMin, COMDAT

; 984  :             float x =

	movzx	eax, BYTE PTR [rcx+16]
	movss	xmm3, DWORD PTR __real@3b90fdbc
	movss	xmm0, DWORD PTR [r9]
	subss	xmm0, DWORD PTR [r8]
	shr	al, 4
	movzx	eax, al
	movd	xmm2, eax

; 985  :                 (m_xyz[0] >> 4) * (float)(m_xyz[0] >> 4) * (1.0f / 226.0f) * (ParentMax.x - ParentMin.x) +
; 986  :                 ParentMin.x;
; 987  :             float y =

	movzx	eax, BYTE PTR [rcx+17]
	cvtdq2ps xmm2, xmm2
	shr	al, 4
	movzx	eax, al
	mulss	xmm2, xmm2
	mulss	xmm2, xmm3
	mulss	xmm2, xmm0
	movss	xmm0, DWORD PTR [r9+4]
	subss	xmm0, DWORD PTR [r8+4]
	addss	xmm2, DWORD PTR [r8]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Libraries\include\glm\detail\type_vec3.inl

; 38   : 		: x(_x), y(_y), z(_z)

	movss	DWORD PTR [rdx], xmm2
	movd	xmm2, eax
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 990  :             float z =

	movzx	eax, BYTE PTR [rcx+18]
	cvtdq2ps xmm2, xmm2
	shr	al, 4
	movzx	eax, al
	mulss	xmm2, xmm2
	mulss	xmm2, xmm3
	mulss	xmm2, xmm0
	movss	xmm0, DWORD PTR [r9+8]
	subss	xmm0, DWORD PTR [r8+8]
	addss	xmm2, DWORD PTR [r8+4]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Libraries\include\glm\detail\type_vec3.inl

; 38   : 		: x(_x), y(_y), z(_z)

	movss	DWORD PTR [rdx+4], xmm2
	movd	xmm2, eax
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 993  :             return glm::vec3(x, y, z);

	mov	rax, rdx
	cvtdq2ps xmm2, xmm2
	mulss	xmm2, xmm2
	mulss	xmm2, xmm3
	mulss	xmm2, xmm0
	addss	xmm2, DWORD PTR [r8+8]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Libraries\include\glm\detail\type_vec3.inl

; 38   : 		: x(_x), y(_y), z(_z)

	movss	DWORD PTR [rdx+8], xmm2
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 994  :         }

	ret	0
?DecompressMin@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAA?AU?$vec@$02M$0A@@glm@@U34@0@Z ENDP ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::DecompressMin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Libraries\include\glm\detail\type_vec3.inl
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Libraries\include\glm\detail\type_vec3.inl
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Libraries\include\glm\detail\type_vec3.inl
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
;	COMDAT ?DecompressMax@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAA?AU?$vec@$02M$0A@@glm@@U34@0@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
parentMin$ = 24
parentMax$ = 32
?DecompressMax@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAA?AU?$vec@$02M$0A@@glm@@U34@0@Z PROC ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::DecompressMax, COMDAT

; 998  :             float x = -((m_xyz[0] & 0x0F) * (float)(m_xyz[0] & 0x0F)) * (1.0f / 226.0f) *

	movzx	eax, BYTE PTR [rcx+16]
	movss	xmm2, DWORD PTR [r9]
	and	al, 15
	movss	xmm3, DWORD PTR __real@3b90fdbc
	movaps	xmm0, xmm2
	subss	xmm0, DWORD PTR [r8]
	movzx	eax, al
	movd	xmm1, eax

; 1000 :             float y = -((m_xyz[1] & 0x0F) * (float)(m_xyz[1] & 0x0F)) * (1.0f / 226.0f) *

	movzx	eax, BYTE PTR [rcx+17]
	cvtdq2ps xmm1, xmm1
	and	al, 15
	movzx	eax, al
	mulss	xmm1, xmm1
	mulss	xmm1, xmm3
	mulss	xmm1, xmm0
	movd	xmm0, eax

; 1002 :             float z = -((m_xyz[2] & 0x0F) * (float)(m_xyz[2] & 0x0F)) * (1.0f / 226.0f) *

	movzx	eax, BYTE PTR [rcx+18]
	subss	xmm2, xmm1
	and	al, 15
	cvtdq2ps xmm0, xmm0
	movzx	eax, al
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Libraries\include\glm\detail\type_vec3.inl

; 38   : 		: x(_x), y(_y), z(_z)

	movss	DWORD PTR [rdx], xmm2
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 1000 :             float y = -((m_xyz[1] & 0x0F) * (float)(m_xyz[1] & 0x0F)) * (1.0f / 226.0f) *

	movss	xmm2, DWORD PTR [r9+4]
	mulss	xmm0, xmm0
	movaps	xmm1, xmm2
	subss	xmm1, DWORD PTR [r8+4]
	mulss	xmm0, xmm3
	mulss	xmm1, xmm0
	movd	xmm0, eax

; 1003 :                 (parentMax.z - parentMin.z) + parentMax.z;
; 1004 :             return glm::vec3(x, y, z);

	mov	rax, rdx
	cvtdq2ps xmm0, xmm0
	subss	xmm2, xmm1
	mulss	xmm0, xmm0
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Libraries\include\glm\detail\type_vec3.inl

; 38   : 		: x(_x), y(_y), z(_z)

	movss	DWORD PTR [rdx+4], xmm2
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 1002 :             float z = -((m_xyz[2] & 0x0F) * (float)(m_xyz[2] & 0x0F)) * (1.0f / 226.0f) *

	movss	xmm2, DWORD PTR [r9+8]
	movaps	xmm1, xmm2
	mulss	xmm0, xmm3
	subss	xmm1, DWORD PTR [r8+8]
	mulss	xmm1, xmm0
	subss	xmm2, xmm1
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Libraries\include\glm\detail\type_vec3.inl

; 38   : 		: x(_x), y(_y), z(_z)

	movss	DWORD PTR [rdx+8], xmm2
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 1005 :         }

	ret	0
?DecompressMax@hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAA?AU?$vec@$02M$0A@@glm@@U34@0@Z ENDP ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::DecompressMax
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0hkReadable@PhiveBinaryVectorReader@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0hkReadable@PhiveBinaryVectorReader@@QEAA@XZ PROC	; PhiveBinaryVectorReader::hkReadable::hkReadable, COMDAT
	lea	rax, OFFSET FLAT:??_7hkReadable@PhiveBinaryVectorReader@@6B@
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	ret	0
??0hkReadable@PhiveBinaryVectorReader@@QEAA@XZ ENDP	; PhiveBinaryVectorReader::hkReadable::hkReadable
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0hkWriteable@PhiveBinaryVectorWriter@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0hkWriteable@PhiveBinaryVectorWriter@@QEAA@XZ PROC	; PhiveBinaryVectorWriter::hkWriteable::hkWriteable, COMDAT
	lea	rax, OFFSET FLAT:??_7hkWriteable@PhiveBinaryVectorWriter@@6B@
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	ret	0
??0hkWriteable@PhiveBinaryVectorWriter@@QEAA@XZ ENDP	; PhiveBinaryVectorWriter::hkWriteable::hkWriteable
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
;	COMDAT ?BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z
_TEXT	SEGMENT
$T1 = 40
$T2 = 72
$T3 = 104
Vertices$GSCopy$ = 120
__$ReturnUdt$GSCopy$ = 120
Indices$GSCopy$ = 128
ConvertedVertices$ = 136
__$ArrayPad$ = 160
__$ReturnUdt$ = 256
Vertices$ = 264
Indices$ = 272
IndicesCount$ = 280
?BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z PROC ; BVNode::BuildBVHForMesh, COMDAT

; 23   : {

$LN211:
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-31]
	sub	rsp, 184				; 000000b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-153], rax
	mov	r12d, r9d
	mov	rdi, r8
	mov	r15, rdx
	mov	r14, rcx
	mov	QWORD PTR __$ReturnUdt$GSCopy$[rbp-153], rcx
	mov	QWORD PTR Vertices$GSCopy$[rbp-153], rdx
	mov	QWORD PTR Indices$GSCopy$[rbp-153], r8
	xor	r13d, r13d
	xorps	xmm1, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	movdqu	XMMWORD PTR ConvertedVertices$[rbp-153], xmm1
	mov	eax, r13d
	mov	QWORD PTR ConvertedVertices$[rbp-137], rax
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 25   : 	for (glm::vec3& Vec : Vertices)

	mov	rsi, QWORD PTR [rdx+8]

; 23   : {

	mov	rbx, QWORD PTR [rdx]

; 25   : 	for (glm::vec3& Vec : Vertices)

	cmp	rbx, rsi
	je	$LN206@BuildBVHFo
	mov	rcx, QWORD PTR ConvertedVertices$[rbp-145]
$LL4@BuildBVHFo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

	cmp	rcx, rax
	je	SHORT $LN17@BuildBVHFo

; 806  :         ++_Mylast;

	mov	eax, DWORD PTR [rbx]
	mov	DWORD PTR [rcx], eax
	mov	rdx, QWORD PTR ConvertedVertices$[rbp-145]
	add	rdx, 4
	mov	QWORD PTR ConvertedVertices$[rbp-145], rdx

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	jmp	SHORT $LN16@BuildBVHFo
$LN17@BuildBVHFo:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	mov	r8, rbx
	mov	rdx, rcx
	lea	rcx, QWORD PTR ConvertedVertices$[rbp-153]
	call	??$_Emplace_reallocate@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAMAEBM@Z ; std::vector<float,std::allocator<float> >::_Emplace_reallocate<float const &>
	mov	rdx, QWORD PTR ConvertedVertices$[rbp-145]
$LN16@BuildBVHFo:

; 781  :         if (_Mylast != _My_data._Myend) {

	lea	r8, QWORD PTR [rbx+4]
	cmp	rdx, QWORD PTR ConvertedVertices$[rbp-137]
	je	SHORT $LN30@BuildBVHFo

; 806  :         ++_Mylast;

	mov	eax, DWORD PTR [r8]
	mov	DWORD PTR [rdx], eax
	mov	rdx, QWORD PTR ConvertedVertices$[rbp-145]
	add	rdx, 4
	mov	QWORD PTR ConvertedVertices$[rbp-145], rdx

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	jmp	SHORT $LN29@BuildBVHFo
$LN30@BuildBVHFo:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	lea	rcx, QWORD PTR ConvertedVertices$[rbp-153]
	call	??$_Emplace_reallocate@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAMAEBM@Z ; std::vector<float,std::allocator<float> >::_Emplace_reallocate<float const &>
	mov	rdx, QWORD PTR ConvertedVertices$[rbp-145]
$LN29@BuildBVHFo:

; 781  :         if (_Mylast != _My_data._Myend) {

	lea	r8, QWORD PTR [rbx+8]
	cmp	rdx, QWORD PTR ConvertedVertices$[rbp-137]
	je	SHORT $LN43@BuildBVHFo

; 806  :         ++_Mylast;

	mov	eax, DWORD PTR [r8]
	mov	DWORD PTR [rdx], eax
	mov	rcx, QWORD PTR ConvertedVertices$[rbp-145]
	add	rcx, 4
	mov	QWORD PTR ConvertedVertices$[rbp-145], rcx

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	jmp	SHORT $LN2@BuildBVHFo
$LN43@BuildBVHFo:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	lea	rcx, QWORD PTR ConvertedVertices$[rbp-153]
	call	??$_Emplace_reallocate@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAMAEBM@Z ; std::vector<float,std::allocator<float> >::_Emplace_reallocate<float const &>
	mov	rcx, QWORD PTR ConvertedVertices$[rbp-145]
$LN2@BuildBVHFo:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 25   : 	for (glm::vec3& Vec : Vertices)

	add	rbx, 12
	cmp	rbx, rsi
	je	SHORT $LN206@BuildBVHFo
	mov	rax, QWORD PTR ConvertedVertices$[rbp-137]
	jmp	$LL4@BuildBVHFo
$LN206@BuildBVHFo:

; 26   : 	{
; 27   : 		ConvertedVertices.push_back(Vec.x);
; 28   : 		ConvertedVertices.push_back(Vec.y);
; 29   : 		ConvertedVertices.push_back(Vec.z);
; 30   : 	}
; 31   : 	if (!BVHBuilder::BuildBVHForMesh(ConvertedVertices.data(), Indices.data(), IndicesCount))

	mov	r8d, r12d
	mov	rdx, QWORD PTR [rdi]
	mov	rcx, QWORD PTR ConvertedVertices$[rbp-153]
	call	?BuildBVHForMesh@BVHBuilder@@YA_NPEBMPEBIH@Z ; BVHBuilder::BuildBVHForMesh
	test	al, al
	jne	$LN5@BuildBVHFo

; 33   : 		Logger::Error("BVNode", "Could not build BVH from mesh");

	lea	rax, QWORD PTR $T1[rbp-153]
	mov	QWORD PTR $T3[rbp-153], rax
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T1[rbp-153], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T1[rbp-137], r13

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T1[rbp-129], r13

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	r8d, 29
	lea	rdx, OFFSET FLAT:??_C@_0BO@GJMNMPPO@Could?5not?5build?5BVH?5from?5mesh@
	lea	rcx, QWORD PTR $T1[rbp-153]
	call	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	npad	1
	xorps	xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T2[rbp-153], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T2[rbp-137], r13

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T2[rbp-129], r13

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	r8d, 6
	lea	rdx, OFFSET FLAT:??_C@_06LIACFCFI@BVNode@
	lea	rcx, QWORD PTR $T2[rbp-153]
	call	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	npad	1
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 33   : 		Logger::Error("BVNode", "Could not build BVH from mesh");

	lea	rdx, QWORD PTR $T1[rbp-153]
	lea	rcx, QWORD PTR $T2[rbp-153]
	call	?Error@Logger@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; Logger::Error
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	QWORD PTR [r14], r13
	mov	QWORD PTR [r14+8], r13
	mov	QWORD PTR [r14+16], r13

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR ConvertedVertices$[rbp-153]
	test	rcx, rcx
	je	SHORT $LN86@BuildBVHFo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR ConvertedVertices$[rbp-137]
	sub	rax, rcx
	sar	rax, 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	lea	rdx, QWORD PTR [rax*4]
	mov	rax, rcx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN104@BuildBVHFo

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rcx-8]
	sub	rax, rcx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	ja	$LN156@BuildBVHFo
$LN104@BuildBVHFo:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 37   : 	return BuildFriendlyBVH();

	call	??3@YAXPEAX_K@Z				; operator delete
	xorps	xmm0, xmm0
	movdqu	XMMWORD PTR ConvertedVertices$[rbp-153], xmm0
	mov	QWORD PTR ConvertedVertices$[rbp-137], r13
$LN86@BuildBVHFo:
	mov	rcx, r15
	call	?_Tidy@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >::_Tidy
	npad	1
	mov	rcx, QWORD PTR [rdi]
	test	rcx, rcx
	je	SHORT $LN169@BuildBVHFo
	mov	rdx, QWORD PTR [rdi+16]
	sub	rdx, rcx
	and	rdx, -4
	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN187@BuildBVHFo
	add	rdx, 39					; 00000027H
	mov	r8, QWORD PTR [rcx-8]
	sub	rcx, r8
	lea	rax, QWORD PTR [rcx-8]
	cmp	rax, 31
	ja	$LN184@BuildBVHFo
	mov	rcx, r8
$LN187@BuildBVHFo:
	call	??3@YAXPEAX_K@Z				; operator delete
	mov	QWORD PTR [rdi], r13
	mov	QWORD PTR [rdi+8], r13
	mov	QWORD PTR [rdi+16], r13
$LN169@BuildBVHFo:
	mov	rax, r14

; 38   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-153]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
$LN5@BuildBVHFo:

; 37   : 	return BuildFriendlyBVH();

	mov	rcx, r14
	call	?BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ ; BVNode::BuildFriendlyBVH
	npad	1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR ConvertedVertices$[rbp-153]
	test	rcx, rcx
	je	$LN86@BuildBVHFo

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR ConvertedVertices$[rbp-137]
	sub	rax, rcx
	sar	rax, 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	lea	rdx, QWORD PTR [rax*4]
	mov	rax, rcx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	$LN104@BuildBVHFo

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rcx-8]
	sub	rax, rcx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	jbe	$LN104@BuildBVHFo
$LN156@BuildBVHFo:
	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	npad	1
$LN184@BuildBVHFo:
	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN208@BuildBVHFo:
?BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z ENDP ; BVNode::BuildBVHForMesh
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 40
$T2 = 72
$T3 = 104
Vertices$GSCopy$ = 120
__$ReturnUdt$GSCopy$ = 120
Indices$GSCopy$ = 128
ConvertedVertices$ = 136
__$ArrayPad$ = 160
__$ReturnUdt$ = 256
Vertices$ = 264
Indices$ = 272
IndicesCount$ = 280
?dtor$0@?0??BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z@4HA PROC ; `BVNode::BuildBVHForMesh'::`1'::dtor$0
	mov	rcx, QWORD PTR Indices$GSCopy$[rdx]
	jmp	??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
?dtor$0@?0??BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z@4HA ENDP ; `BVNode::BuildBVHForMesh'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 40
$T2 = 72
$T3 = 104
Vertices$GSCopy$ = 120
__$ReturnUdt$GSCopy$ = 120
Indices$GSCopy$ = 128
ConvertedVertices$ = 136
__$ArrayPad$ = 160
__$ReturnUdt$ = 256
Vertices$ = 264
Indices$ = 272
IndicesCount$ = 280
?dtor$1@?0??BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z@4HA PROC ; `BVNode::BuildBVHForMesh'::`1'::dtor$1
	mov	rcx, QWORD PTR Vertices$GSCopy$[rdx]
	jmp	??1?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >::~vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >
?dtor$1@?0??BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z@4HA ENDP ; `BVNode::BuildBVHForMesh'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 40
$T2 = 72
$T3 = 104
Vertices$GSCopy$ = 120
__$ReturnUdt$GSCopy$ = 120
Indices$GSCopy$ = 128
ConvertedVertices$ = 136
__$ArrayPad$ = 160
__$ReturnUdt$ = 256
Vertices$ = 264
Indices$ = 272
IndicesCount$ = 280
?dtor$2@?0??BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z@4HA PROC ; `BVNode::BuildBVHForMesh'::`1'::dtor$2
	lea	rcx, QWORD PTR ConvertedVertices$[rdx]
	jmp	??1?$vector@MV?$allocator@M@std@@@std@@QEAA@XZ ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
?dtor$2@?0??BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z@4HA ENDP ; `BVNode::BuildBVHForMesh'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 40
$T2 = 72
$T3 = 104
Vertices$GSCopy$ = 120
__$ReturnUdt$GSCopy$ = 120
Indices$GSCopy$ = 128
ConvertedVertices$ = 136
__$ArrayPad$ = 160
__$ReturnUdt$ = 256
Vertices$ = 264
Indices$ = 272
IndicesCount$ = 280
?dtor$3@?0??BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z@4HA PROC ; `BVNode::BuildBVHForMesh'::`1'::dtor$3
	mov	rcx, QWORD PTR $T3[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$3@?0??BuildBVHForMesh@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@V?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@3@V?$vector@IV?$allocator@I@std@@@3@H@Z@4HA ENDP ; `BVNode::BuildBVHForMesh'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\bvh\bvh.hpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\bvh\bvh.hpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
;	COMDAT ?BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$GSCopy$ = 40
Nodes$ = 48
NewNode$2 = 80
__$ArrayPad$ = 144
__$ReturnUdt$ = 192
?BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ PROC ; BVNode::BuildFriendlyBVH, COMDAT

; 60   : {

$LN145:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rbp
	push	rdi
	push	r14
	lea	rbp, QWORD PTR [rsp-71]
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-89], rax
	mov	rdi, rcx
	mov	QWORD PTR __$ReturnUdt$GSCopy$[rbp-89], rcx
	xor	esi, esi
	mov	DWORD PTR $T1[rbp-89], esi
	xorps	xmm0, xmm0
	xor	eax, eax
	movups	XMMWORD PTR Nodes$[rbp-89], xmm0
	mov	QWORD PTR Nodes$[rbp-73], rax

; 61   : 	std::vector<Bvh::Node> Nodes = BVHBuilder::GetBVHNodes();

	lea	rcx, QWORD PTR Nodes$[rbp-89]
	call	?GetBVHNodes@BVHBuilder@@YA?AV?$vector@UNode@?$Bvh@M@bvh@@V?$allocator@UNode@?$Bvh@M@bvh@@@std@@@std@@XZ ; BVHBuilder::GetBVHNodes
	npad	1
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [rdi], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	QWORD PTR [rdi], rsi
	mov	QWORD PTR [rdi+8], rsi
	mov	QWORD PTR [rdi+16], rsi
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 83   : 	return BNodes;

	mov	DWORD PTR $T1[rbp-89], 1

; 64   : 	for (Bvh::Node Node : Nodes)

	mov	r14, QWORD PTR Nodes$[rbp-81]

; 60   : {

	mov	rbx, QWORD PTR Nodes$[rbp-89]
	cmp	rbx, r14

; 64   : 	for (Bvh::Node Node : Nodes)

	je	$LN3@BuildFrien
	npad	12
$LL4@BuildFrien:
	movups	xmm1, XMMWORD PTR [rbx]
	movups	xmm2, XMMWORD PTR [rbx+16]

; 65   : 	{

	mov	DWORD PTR NewNode$2[rbp-87], esi
	mov	WORD PTR NewNode$2[rbp-83], si
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.h

; 19   : 	uint32_t mUniqueIndicesCount = 0;

	mov	QWORD PTR NewNode$2[rbp-33], rsi

; 12   : 	bool mIsSectionHead = false;

	mov	BYTE PTR NewNode$2[rbp-88], 0

; 13   : 	BVNode* mLeft = nullptr;

	mov	QWORD PTR NewNode$2[rbp-81], rsi

; 14   : 	glm::vec3 mMax;
; 15   : 	glm::vec3 mMin;
; 16   : 	uint32_t mPrimitive = 0;
; 17   : 	uint32_t mPrimitiveCount = 0;
; 18   : 	BVNode* mRight = nullptr;

	mov	QWORD PTR NewNode$2[rbp-41], rsi
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 67   : 		NewNode.mMin = glm::vec3(Node.bounds[0], Node.bounds[2], Node.bounds[4]);

	movss	DWORD PTR NewNode$2[rbp-61], xmm1
	movaps	xmm0, xmm1
	shufps	xmm0, xmm1, 170				; 000000aaH
	movss	DWORD PTR NewNode$2[rbp-57], xmm0
	movss	DWORD PTR NewNode$2[rbp-53], xmm2

; 68   : 		NewNode.mMax = glm::vec3(Node.bounds[1], Node.bounds[3], Node.bounds[5]);

	movaps	xmm0, xmm1
	shufps	xmm0, xmm1, 85				; 00000055H
	movss	DWORD PTR NewNode$2[rbp-73], xmm0
	shufps	xmm1, xmm1, 255				; 000000ffH
	movss	DWORD PTR NewNode$2[rbp-69], xmm1
	movaps	xmm0, xmm2
	shufps	xmm0, xmm2, 85				; 00000055H
	movss	DWORD PTR NewNode$2[rbp-65], xmm0
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\bvh\bvh.hpp

; 30   :         bool is_leaf() const { return primitive_count != 0; }

	mov	rax, QWORD PTR [rbx+24]
	test	eax, eax
	setne	BYTE PTR NewNode$2[rbp-89]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 70   : 		NewNode.mPrimitiveCount = Node.primitive_count;

	mov	DWORD PTR NewNode$2[rbp-45], eax

; 71   : 		NewNode.mPrimitive = Node.first_child_or_primitive;

	shr	rax, 32					; 00000020H
	mov	DWORD PTR NewNode$2[rbp-49], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

	mov	rdx, QWORD PTR [rdi+8]
	cmp	rdx, QWORD PTR [rdi+16]
	je	SHORT $LN71@BuildFrien
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 254  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	movaps	xmm0, XMMWORD PTR NewNode$2[rbp-89]
	movups	XMMWORD PTR [rdx], xmm0
	movaps	xmm1, XMMWORD PTR NewNode$2[rbp-73]
	movups	XMMWORD PTR [rdx+16], xmm1
	movaps	xmm0, XMMWORD PTR NewNode$2[rbp-57]
	movups	XMMWORD PTR [rdx+32], xmm0
	movaps	xmm1, XMMWORD PTR NewNode$2[rbp-41]
	movups	XMMWORD PTR [rdx+48], xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

	add	QWORD PTR [rdi+8], 64			; 00000040H

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	jmp	SHORT $LN2@BuildFrien
$LN71@BuildFrien:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	lea	r8, QWORD PTR NewNode$2[rbp-89]
	mov	rcx, rdi
	call	??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z ; std::vector<BVNode,std::allocator<BVNode> >::_Emplace_reallocate<BVNode const &>
$LN2@BuildFrien:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 64   : 	for (Bvh::Node Node : Nodes)

	add	rbx, 32					; 00000020H
	cmp	rbx, r14
	jne	$LL4@BuildFrien
	mov	r14, QWORD PTR Nodes$[rbp-81]
	mov	rbx, QWORD PTR Nodes$[rbp-89]
$LN3@BuildFrien:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, r14
	sub	rax, rbx
	sar	rax, 5
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 76   : 	for (size_t i = 0; i < Nodes.size(); i++)

	test	rax, rax
	je	SHORT $LN6@BuildFrien
	mov	r9, rsi
	mov	r8, rsi
	npad	1
$LL7@BuildFrien:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\bvh\bvh.hpp

; 30   :         bool is_leaf() const { return primitive_count != 0; }

	cmp	DWORD PTR [r8+rbx+24], 0
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 78   : 		if (Nodes[i].is_leaf()) continue;

	jne	SHORT $LN5@BuildFrien
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

	mov	rcx, QWORD PTR [rdi]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 79   : 		BNodes[i].mLeft = &BNodes[(int)Nodes[i].first_child_or_primitive];

	movsxd	rax, DWORD PTR [r8+rbx+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

	shl	rax, 6
	add	rax, rcx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 79   : 		BNodes[i].mLeft = &BNodes[(int)Nodes[i].first_child_or_primitive];

	mov	QWORD PTR [r9+rcx+8], rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

	mov	rax, QWORD PTR Nodes$[rbp-89]
	mov	rdx, QWORD PTR [rdi]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 80   : 		BNodes[i].mRight = &BNodes[(int)Nodes[i].first_child_or_primitive + 1];

	mov	eax, DWORD PTR [r8+rax+28]
	inc	eax
	movsxd	rcx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

	shl	rcx, 6
	add	rcx, rdx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 80   : 		BNodes[i].mRight = &BNodes[(int)Nodes[i].first_child_or_primitive + 1];

	mov	QWORD PTR [r9+rdx+48], rcx
	mov	r14, QWORD PTR Nodes$[rbp-81]
	mov	rbx, QWORD PTR Nodes$[rbp-89]
$LN5@BuildFrien:

; 76   : 	for (size_t i = 0; i < Nodes.size(); i++)

	inc	rsi
	add	r8, 32					; 00000020H
	add	r9, 64					; 00000040H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, r14
	sub	rax, rbx
	sar	rax, 5
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 76   : 	for (size_t i = 0; i < Nodes.size(); i++)

	cmp	rsi, rax
	jb	SHORT $LL7@BuildFrien
$LN6@BuildFrien:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

	test	rbx, rbx
	je	SHORT $LN28@BuildFrien

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rdx, QWORD PTR Nodes$[rbp-73]
	sub	rdx, rbx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	and	rdx, -32				; ffffffffffffffe0H
	mov	rax, rbx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN40@BuildFrien

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rbx, QWORD PTR [rbx-8]
	sub	rax, rbx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	jbe	SHORT $LN40@BuildFrien
	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN40@BuildFrien:

; 265  :         ::operator delete(_Ptr, _Bytes);

	mov	rcx, rbx
	call	??3@YAXPEAX_K@Z				; operator delete
$LN28@BuildFrien:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 83   : 	return BNodes;

	mov	rax, rdi

; 84   : 
; 85   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-89]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+160]
	mov	rbx, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	mov	rsp, r11
	pop	r14
	pop	rdi
	pop	rbp
	ret	0
	int	3
$LN142@BuildFrien:
?BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ ENDP ; BVNode::BuildFriendlyBVH
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
__$ReturnUdt$GSCopy$ = 40
Nodes$ = 48
NewNode$2 = 80
__$ArrayPad$ = 144
__$ReturnUdt$ = 192
?dtor$0@?0??BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ@4HA PROC ; `BVNode::BuildFriendlyBVH'::`1'::dtor$0
	lea	rcx, QWORD PTR Nodes$[rdx]
	jmp	??1?$vector@UNode@?$Bvh@M@bvh@@V?$allocator@UNode@?$Bvh@M@bvh@@@std@@@std@@QEAA@XZ ; std::vector<bvh::Bvh<float>::Node,std::allocator<bvh::Bvh<float>::Node> >::~vector<bvh::Bvh<float>::Node,std::allocator<bvh::Bvh<float>::Node> >
?dtor$0@?0??BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ@4HA ENDP ; `BVNode::BuildFriendlyBVH'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
__$ReturnUdt$GSCopy$ = 40
Nodes$ = 48
NewNode$2 = 80
__$ArrayPad$ = 144
__$ReturnUdt$ = 192
?dtor$1@?0??BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ@4HA PROC ; `BVNode::BuildFriendlyBVH'::`1'::dtor$1
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	eax, DWORD PTR $T1[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN12@dtor$1
	and	DWORD PTR $T1[rbp], -2
	mov	rcx, QWORD PTR __$ReturnUdt$GSCopy$[rbp]
	call	??1?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAA@XZ ; std::vector<BVNode,std::allocator<BVNode> >::~vector<BVNode,std::allocator<BVNode> >
$LN12@dtor$1:
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$1@?0??BuildFriendlyBVH@BVNode@@SA?AV?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@XZ@4HA ENDP ; `BVNode::BuildFriendlyBVH'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.h
;	COMDAT ??0BVNode@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0BVNode@@QEAA@XZ PROC					; BVNode::BVNode, COMDAT

; 13   : 	BVNode* mLeft = nullptr;

	xor	eax, eax
	mov	WORD PTR [rcx], 0
	mov	QWORD PTR [rcx+8], rax

; 14   : 	glm::vec3 mMax;
; 15   : 	glm::vec3 mMin;
; 16   : 	uint32_t mPrimitive = 0;

	mov	QWORD PTR [rcx+40], rax

; 17   : 	uint32_t mPrimitiveCount = 0;
; 18   : 	BVNode* mRight = nullptr;

	mov	QWORD PTR [rcx+48], rax

; 19   : 	uint32_t mUniqueIndicesCount = 0;

	mov	DWORD PTR [rcx+56], eax

; 30   : 	BVNode() = default;

	mov	rax, rcx
	ret	0
??0BVNode@@QEAA@XZ ENDP					; BVNode::BVNode
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?__autoclassinit2@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 8
classSize$dead$ = 16
?__autoclassinit2@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAAX_K@Z PROC ; std::vector<BVNode,std::allocator<BVNode> >::__autoclassinit2, COMDAT
	xorps	xmm0, xmm0
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	mov	QWORD PTR [rcx+16], rax
	ret	0
?__autoclassinit2@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAAX_K@Z ENDP ; std::vector<BVNode,std::allocator<BVNode> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?__autoclassinit2@BVNode@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 8
classSize$dead$ = 16
?__autoclassinit2@BVNode@@QEAAX_K@Z PROC		; BVNode::__autoclassinit2, COMDAT
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	ret	0
?__autoclassinit2@BVNode@@QEAAX_K@Z ENDP		; BVNode::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
;	COMDAT ?CompressDim@@YAEMMMM@Z
_TEXT	SEGMENT
Min$ = 96
Max$ = 104
PMin$ = 112
PMax$ = 120
?CompressDim@@YAEMMMM@Z PROC				; CompressDim, COMDAT

; 97   : {

$LN19:
	push	rbx
	sub	rsp, 80					; 00000050H
	movaps	XMMWORD PTR [rsp+64], xmm6

; 99   : 	float rmin = std::sqrtf(std::fmax((Min - PMin) * snorm, 0));

	subss	xmm0, xmm2
	movss	xmm6, DWORD PTR __real@43620000
	movaps	xmm4, xmm3
	subss	xmm4, xmm2
	movaps	XMMWORD PTR [rsp+48], xmm7
	movaps	xmm7, xmm1
	movaps	XMMWORD PTR [rsp+32], xmm8
	xorps	xmm1, xmm1
	movaps	xmm8, xmm3
	divss	xmm6, xmm4
	mulss	xmm0, xmm6
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath

; 698  : _GENERIC_MATH2(fmax)

	cvtss2sd xmm0, xmm0
	call	QWORD PTR __imp_fmax
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 99   : 	float rmin = std::sqrtf(std::fmax((Min - PMin) * snorm, 0));

	cvtsd2ss xmm0, xmm0
	xorps	xmm1, xmm1
	ucomiss	xmm1, xmm0
	ja	SHORT $LN13@CompressDi
	sqrtss	xmm0, xmm0
	jmp	SHORT $LN14@CompressDi
$LN13@CompressDi:
	call	sqrtf
$LN14@CompressDi:

; 101  : 	uint8_t a = (uint8_t)std::min(0xF, (int)std::floorf(rmin));

	call	floorf
	xorps	xmm6, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm7, xmm8
	cvttss2si ebx, xmm0
	mulss	xmm7, xmm6
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath

; 698  : _GENERIC_MATH2(fmax)

	xorps	xmm0, xmm0
	xorps	xmm1, xmm1
	cvtss2sd xmm0, xmm7
	call	QWORD PTR __imp_fmax
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 100  : 	float rmax = std::sqrtf(std::fmax((Max - PMax) * -snorm, 0));

	cvtsd2ss xmm0, xmm0
	xorps	xmm1, xmm1
	ucomiss	xmm1, xmm0
	ja	SHORT $LN11@CompressDi
	sqrtss	xmm0, xmm0
	jmp	SHORT $LN12@CompressDi
$LN11@CompressDi:
	call	sqrtf
$LN12@CompressDi:

; 102  : 	uint8_t b = (uint8_t)std::min(0xF, (int)std::floorf(rmax));

	call	floorf

; 104  : }

	movaps	xmm6, XMMWORD PTR [rsp+64]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 70   :     return _Right < _Left ? _Right : _Left;

	mov	r8d, 15
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 104  : }

	movaps	xmm7, XMMWORD PTR [rsp+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 70   :     return _Right < _Left ? _Right : _Left;

	mov	eax, r8d
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 104  : }

	movaps	xmm8, XMMWORD PTR [rsp+32]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 70   :     return _Right < _Left ? _Right : _Left;

	cmp	ebx, eax
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 102  : 	uint8_t b = (uint8_t)std::min(0xF, (int)std::floorf(rmax));

	cvttss2si edx, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 70   :     return _Right < _Left ? _Right : _Left;

	movzx	ecx, bl
	cmovl	eax, ecx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 103  : 	return (uint8_t)((a << 4) | b);

	shl	al, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 70   :     return _Right < _Left ? _Right : _Left;

	cmp	edx, r8d
	movzx	ecx, dl
	cmovl	r8d, ecx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 103  : 	return (uint8_t)((a << 4) | b);

	or	al, r8b

; 104  : }

	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
?CompressDim@@YAEMMMM@Z ENDP				; CompressDim
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
;	COMDAT ?CompressNode@@YAXAEAV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@PEAVBVNode@@U?$vec@$02M$0A@@glm@@2_N@Z
_TEXT	SEGMENT
tv1156 = 48
$T1 = 64
$T2 = 64
$T3 = 64
$T4 = 64
$T5 = 64
$T6 = 80
$T7 = 80
$T8 = 80
Ret$ = 256
Node$ = 264
ParentMin$ = 272
ParentMax$ = 280
Root$ = 288
?CompressNode@@YAXAEAV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@PEAVBVNode@@U?$vec@$02M$0A@@glm@@2_N@Z PROC ; CompressNode, COMDAT

; 107  : {

$LN64:
	mov	rax, rsp
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	sub	rsp, 192				; 000000c0H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	r14, QWORD PTR [rcx+8]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 107  : {

	mov	rbp, rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	r14, QWORD PTR [rcx]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 107  : {

	mov	rbx, r9
	movaps	XMMWORD PTR [rax-72], xmm6
	mov	rdi, r8
	movaps	XMMWORD PTR [rax-88], xmm7
	mov	rsi, rcx
	movaps	XMMWORD PTR [rax-104], xmm8
	movaps	XMMWORD PTR [rax-120], xmm9
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, -8198552921648689607		; 8e38e38e38e38e39H
	movaps	XMMWORD PTR [rsp+112], xmm10
	sar	r14, 3
	imul	r14, rax
	movaps	XMMWORD PTR [rsp+96], xmm11
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 109  : 	Ret.resize(Ret.size() + 1);

	lea	rdx, QWORD PTR [r14+1]
	call	?resize@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAX_K@Z ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::resize

; 110  : 	PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec Compressed;
; 111  : 
; 112  : 	Compressed.m_xyz[0] = CompressDim(Node->mMin.x, Node->mMax.x, ParentMin.x, ParentMax.x);

	movss	xmm3, DWORD PTR [rbx]
	movss	xmm2, DWORD PTR [rdi]
	movss	xmm1, DWORD PTR [rbp+16]
	movss	xmm0, DWORD PTR [rbp+28]
	call	?CompressDim@@YAEMMMM@Z			; CompressDim

; 113  : 	Compressed.m_xyz[1] = CompressDim(Node->mMin.y, Node->mMax.y, ParentMin.y, ParentMax.y);

	movss	xmm3, DWORD PTR [rbx+4]
	movss	xmm2, DWORD PTR [rdi+4]
	movss	xmm1, DWORD PTR [rbp+20]
	movss	xmm0, DWORD PTR [rbp+32]
	movzx	r12d, al
	call	?CompressDim@@YAEMMMM@Z			; CompressDim

; 114  : 	Compressed.m_xyz[2] = CompressDim(Node->mMin.z, Node->mMax.z, ParentMin.z, ParentMax.z);

	movss	xmm3, DWORD PTR [rbx+8]
	movss	xmm2, DWORD PTR [rdi+8]
	movss	xmm1, DWORD PTR [rbp+24]
	movss	xmm0, DWORD PTR [rbp+36]
	movzx	r13d, al
	call	?CompressDim@@YAEMMMM@Z			; CompressDim

; 116  : 	glm::vec3 Min = Compressed.DecompressMin(ParentMin, ParentMax);

	movsd	xmm1, QWORD PTR [rdi]
	movzx	edx, al
	movsd	xmm2, QWORD PTR [rbx]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 984  :             float x =

	movzx	ecx, r12b
	movss	xmm4, DWORD PTR __real@3b90fdbc
	movaps	xmm0, xmm2
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 117  : 	glm::vec3 Max = Compressed.DecompressMax(ParentMin, ParentMax);

	movsd	xmm3, QWORD PTR [rdi]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 984  :             float x =

	subss	xmm0, xmm1
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 114  : 	Compressed.m_xyz[2] = CompressDim(Node->mMin.z, Node->mMax.z, ParentMin.z, ParentMax.z);

	mov	BYTE PTR tv1156[rsp], al

; 117  : 	glm::vec3 Max = Compressed.DecompressMax(ParentMin, ParentMax);

	movaps	xmm9, xmm2
	movsd	QWORD PTR $T5[rsp], xmm1
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 987  :             float y =

	movzx	eax, r13b
	shr	al, 4
	movzx	eax, al
	shr	cl, 4
	movzx	ecx, cl
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 116  : 	glm::vec3 Min = Compressed.DecompressMin(ParentMin, ParentMax);

	movsd	QWORD PTR $T8[rsp], xmm2
	movd	xmm7, eax
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 990  :             float z =

	movzx	eax, dl
	shr	al, 4
	movzx	eax, al
	cvtdq2ps xmm7, xmm7
	movd	xmm8, eax

; 998  :             float x = -((m_xyz[0] & 0x0F) * (float)(m_xyz[0] & 0x0F)) * (1.0f / 226.0f) *

	movzx	eax, r12b

; 990  :             float z =

	cvtdq2ps xmm8, xmm8

; 998  :             float x = -((m_xyz[0] & 0x0F) * (float)(m_xyz[0] & 0x0F)) * (1.0f / 226.0f) *

	and	al, 15
	movzx	eax, al

; 987  :             float y =

	mulss	xmm7, xmm7

; 990  :             float z =

	mulss	xmm8, xmm8
	mulss	xmm7, xmm4
	mulss	xmm8, xmm4
	movd	xmm6, ecx

; 984  :             float x =

	cvtdq2ps xmm6, xmm6
	mulss	xmm6, xmm6
	mulss	xmm6, xmm4
	mulss	xmm6, xmm0

; 990  :             float z =

	movss	xmm0, DWORD PTR [rbx+8]
	subss	xmm0, DWORD PTR [rdi+8]
	addss	xmm6, xmm1
	movaps	xmm1, xmm2
	shufps	xmm1, xmm1, 85				; 00000055H
	subss	xmm1, DWORD PTR $T5[rsp+4]
	mulss	xmm8, xmm0
	mulss	xmm7, xmm1
	addss	xmm8, DWORD PTR [rdi+8]
	movd	xmm1, eax

; 987  :             float y =

	addss	xmm7, DWORD PTR $T5[rsp+4]

; 1002 :             float z = -((m_xyz[2] & 0x0F) * (float)(m_xyz[2] & 0x0F)) * (1.0f / 226.0f) *

	movss	xmm11, DWORD PTR [rbx+8]
	movaps	xmm0, xmm2
	cvtdq2ps xmm1, xmm1
	movzx	eax, r13b
	and	al, 15
	movzx	eax, al
	subss	xmm0, xmm3
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 117  : 	glm::vec3 Max = Compressed.DecompressMax(ParentMin, ParentMax);

	movsd	QWORD PTR $T3[rsp], xmm9
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 1000 :             float y = -((m_xyz[1] & 0x0F) * (float)(m_xyz[1] & 0x0F)) * (1.0f / 226.0f) *

	movss	xmm10, DWORD PTR $T3[rsp+4]
	mulss	xmm1, xmm1
	movd	xmm2, eax

; 1002 :             float z = -((m_xyz[2] & 0x0F) * (float)(m_xyz[2] & 0x0F)) * (1.0f / 226.0f) *

	movzx	eax, dl
	cvtdq2ps xmm2, xmm2
	and	al, 15
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 119  : 	if (Node->mIsLeaf)

	cmp	BYTE PTR [rbp], 0
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 1002 :             float z = -((m_xyz[2] & 0x0F) * (float)(m_xyz[2] & 0x0F)) * (1.0f / 226.0f) *

	movzx	eax, al
	mulss	xmm1, xmm4
	mulss	xmm2, xmm2
	mulss	xmm1, xmm0
	movaps	xmm0, xmm3
	mulss	xmm2, xmm4
	subss	xmm9, xmm1
	shufps	xmm0, xmm0, 85				; 00000055H
	movaps	xmm1, xmm10
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 117  : 	glm::vec3 Max = Compressed.DecompressMax(ParentMin, ParentMax);

	movsd	QWORD PTR $T4[rsp], xmm3
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 1000 :             float y = -((m_xyz[1] & 0x0F) * (float)(m_xyz[1] & 0x0F)) * (1.0f / 226.0f) *

	subss	xmm1, xmm0
	mulss	xmm2, xmm1

; 1002 :             float z = -((m_xyz[2] & 0x0F) * (float)(m_xyz[2] & 0x0F)) * (1.0f / 226.0f) *

	movaps	xmm1, xmm11
	subss	xmm1, DWORD PTR [rdi+8]
	subss	xmm10, xmm2
	movd	xmm2, eax
	cvtdq2ps xmm2, xmm2
	mulss	xmm2, xmm2
	mulss	xmm2, xmm4
	mulss	xmm2, xmm1
	subss	xmm11, xmm2
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 119  : 	if (Node->mIsLeaf)

	je	SHORT $LN2@CompressNo

; 120  : 	{
; 121  : 		uint32_t Data = Node->mPrimitive;

	mov	edi, DWORD PTR [rbp+40]

; 122  : 		Compressed.m_loData.m_primitiveBase = (uint16_t)(Data & 0xFFFF);
; 123  : 		Compressed.m_hiData.m_primitiveBase = (uint8_t)((Data >> 16) & 0x7F);

	mov	ebx, edi
	shr	ebx, 16
	and	bl, 127					; 0000007fH

; 124  : 	}

	jmp	$LN3@CompressNo
$LN2@CompressNo:

; 125  : 	else
; 126  : 	{
; 127  : 		CompressNode(Ret, Node->mLeft, Min, Max, false);

	mov	rdx, QWORD PTR [rbp+8]
	lea	r9, QWORD PTR $T7[rsp]
	lea	r8, QWORD PTR $T2[rsp]
	movss	DWORD PTR $T7[rsp], xmm9
	mov	rcx, rsi
	movss	DWORD PTR $T7[rsp+4], xmm10
	movss	DWORD PTR $T7[rsp+8], xmm11
	movss	DWORD PTR $T2[rsp], xmm6
	movss	DWORD PTR $T2[rsp+4], xmm7
	movss	DWORD PTR $T2[rsp+8], xmm8
	mov	BYTE PTR [rsp+32], 0
	call	?CompressNode@@YAXAEAV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@PEAVBVNode@@U?$vec@$02M$0A@@glm@@2_N@Z ; CompressNode
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rdi, QWORD PTR [rsi+8]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 133  : 		CompressNode(Ret, Node->mRight, Min, Max, false);

	lea	r9, QWORD PTR $T1[rsp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	rdi, QWORD PTR [rsi]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 133  : 		CompressNode(Ret, Node->mRight, Min, Max, false);

	lea	r8, QWORD PTR $T6[rsp]
	mov	rdx, QWORD PTR [rbp+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rcx, -8198552921648689607		; 8e38e38e38e38e39H
	sar	rdi, 3
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 131  : 		Compressed.m_hiData.m_primitiveBase = (uint8_t)(((Data >> 16) & 0x7F) | 0x80);

	mov	bl, 128					; 00000080H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	imul	rdi, rcx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 133  : 		CompressNode(Ret, Node->mRight, Min, Max, false);

	movss	DWORD PTR $T1[rsp], xmm9
	movss	DWORD PTR $T1[rsp+4], xmm10
	movss	DWORD PTR $T1[rsp+8], xmm11
	movss	DWORD PTR $T6[rsp], xmm6
	mov	rcx, rsi
	movss	DWORD PTR $T6[rsp+4], xmm7
	sub	rdi, r14
	movss	DWORD PTR $T6[rsp+8], xmm8
	shr	rdi, 1
	mov	BYTE PTR [rsp+32], 0
	call	?CompressNode@@YAXAEAV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@PEAVBVNode@@U?$vec@$02M$0A@@glm@@2_N@Z ; CompressNode
$LN3@CompressNo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

	mov	r8, QWORD PTR [rsi]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 144  : }

	lea	r11, QWORD PTR [rsp+192]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

	movzx	eax, BYTE PTR tv1156[rsp]
	lea	r9, QWORD PTR [r14+r14*8]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 144  : }

	movaps	xmm6, XMMWORD PTR [r11-16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

	xor	edx, edx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 144  : }

	movaps	xmm7, XMMWORD PTR [r11-32]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

	mov	ecx, edx
	cmp	BYTE PTR Root$[rsp], cl
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 144  : }

	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

	cmove	ecx, r12d
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 144  : }

	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	mov	BYTE PTR [r8+r9*8+16], cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

	mov	ecx, edx
	cmove	ecx, r13d
	cmove	edx, eax
	mov	BYTE PTR [r8+r9*8+17], cl
	mov	BYTE PTR [r8+r9*8+18], dl
	mov	BYTE PTR [r8+r9*8+40], bl
	mov	WORD PTR [r8+r9*8+64], di
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 144  : }

	mov	rsp, r11
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
?CompressNode@@YAXAEAV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@PEAVBVNode@@U?$vec@$02M$0A@@glm@@2_N@Z ENDP ; CompressNode
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAA@XZ PROC ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::hkcdCompressedAabbCodecs__Aabb6BytesCodec, COMDAT
	lea	rax, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx], rax
	lea	rax, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+8], rax
	lea	rax, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx+24], rax
	lea	rax, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+32], rax
	lea	rax, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx+48], rax
	lea	rax, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+56], rax
	mov	rax, rcx
	ret	0
??0hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAA@XZ ENDP ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::hkcdCompressedAabbCodecs__Aabb6BytesCodec
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@QEAA@XZ PROC ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>, COMDAT
	lea	rax, OFFSET FLAT:??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx], rax
	lea	rax, OFFSET FLAT:??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+8], rax
	mov	rax, rcx
	ret	0
??0?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@QEAA@XZ ENDP ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@QEAA@XZ PROC ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::hkcdCompressedAabbCodecs__AabbCodecBase, COMDAT
	lea	rax, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx], rax
	lea	rax, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+8], rax
	mov	rax, rcx
	ret	0
??0hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@QEAA@XZ ENDP ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::hkcdCompressedAabbCodecs__AabbCodecBase
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0hkUint8@PhiveNavMesh@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0hkUint8@PhiveNavMesh@@QEAA@XZ PROC			; PhiveNavMesh::hkUint8::hkUint8, COMDAT
	lea	rax, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx], rax
	lea	rax, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+8], rax
	mov	rax, rcx
	ret	0
??0hkUint8@PhiveNavMesh@@QEAA@XZ ENDP			; PhiveNavMesh::hkUint8::hkUint8
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0hkUint16@PhiveNavMesh@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0hkUint16@PhiveNavMesh@@QEAA@XZ PROC			; PhiveNavMesh::hkUint16::hkUint16, COMDAT
	lea	rax, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx], rax
	lea	rax, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+8], rax
	mov	rax, rcx
	ret	0
??0hkUint16@PhiveNavMesh@@QEAA@XZ ENDP			; PhiveNavMesh::hkUint16::hkUint16
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??4hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
this$ = 8
__that$ = 16
??4hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAAAEAU01@AEBU01@@Z PROC ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::operator=, COMDAT
	movzx	eax, BYTE PTR [rdx+16]
	mov	BYTE PTR [rcx+16], al
	movzx	eax, BYTE PTR [rdx+17]
	mov	BYTE PTR [rcx+17], al
	movzx	eax, BYTE PTR [rdx+18]
	mov	BYTE PTR [rcx+18], al
	movzx	eax, BYTE PTR [rdx+40]
	mov	BYTE PTR [rcx+40], al
	movzx	eax, WORD PTR [rdx+64]
	mov	WORD PTR [rcx+64], ax
	mov	rax, rcx
	ret	0
??4hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAAAEAU01@AEBU01@@Z ENDP ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::operator=
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??4?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
this$ = 8
__that$ = 16
??4?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@QEAAAEAU01@AEBU01@@Z PROC ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::operator=, COMDAT
	movzx	eax, BYTE PTR [rdx+16]
	mov	BYTE PTR [rcx+16], al
	movzx	eax, BYTE PTR [rdx+17]
	mov	BYTE PTR [rcx+17], al
	movzx	eax, BYTE PTR [rdx+18]
	mov	BYTE PTR [rcx+18], al
	mov	rax, rcx
	ret	0
??4?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@QEAAAEAU01@AEBU01@@Z ENDP ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::operator=
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??4hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
this$ = 8
__that$dead$ = 16
??4hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@QEAAAEAU01@AEBU01@@Z PROC ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::operator=, COMDAT
	mov	rax, rcx
	ret	0
??4hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@QEAAAEAU01@AEBU01@@Z ENDP ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::operator=
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??4hkReadable@PhiveBinaryVectorReader@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
this$ = 8
__that$dead$ = 16
??4hkReadable@PhiveBinaryVectorReader@@QEAAAEAU01@AEBU01@@Z PROC ; PhiveBinaryVectorReader::hkReadable::operator=, COMDAT
	mov	rax, rcx
	ret	0
??4hkReadable@PhiveBinaryVectorReader@@QEAAAEAU01@AEBU01@@Z ENDP ; PhiveBinaryVectorReader::hkReadable::operator=
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??4hkWriteable@PhiveBinaryVectorWriter@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
this$ = 8
__that$dead$ = 16
??4hkWriteable@PhiveBinaryVectorWriter@@QEAAAEAU01@AEBU01@@Z PROC ; PhiveBinaryVectorWriter::hkWriteable::operator=, COMDAT
	mov	rax, rcx
	ret	0
??4hkWriteable@PhiveBinaryVectorWriter@@QEAAAEAU01@AEBU01@@Z ENDP ; PhiveBinaryVectorWriter::hkWriteable::operator=
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??4hkUint8@PhiveNavMesh@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
this$ = 8
__that$ = 16
??4hkUint8@PhiveNavMesh@@QEAAAEAU01@AEBU01@@Z PROC	; PhiveNavMesh::hkUint8::operator=, COMDAT
	movzx	eax, BYTE PTR [rdx+16]
	mov	BYTE PTR [rcx+16], al
	mov	rax, rcx
	ret	0
??4hkUint8@PhiveNavMesh@@QEAAAEAU01@AEBU01@@Z ENDP	; PhiveNavMesh::hkUint8::operator=
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??4hkUint16@PhiveNavMesh@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
this$ = 8
__that$ = 16
??4hkUint16@PhiveNavMesh@@QEAAAEAU01@AEBU01@@Z PROC	; PhiveNavMesh::hkUint16::operator=, COMDAT
	movzx	eax, WORD PTR [rdx+16]
	mov	WORD PTR [rcx+16], ax
	mov	rax, rcx
	ret	0
??4hkUint16@PhiveNavMesh@@QEAAAEAU01@AEBU01@@Z ENDP	; PhiveNavMesh::hkUint16::operator=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp
;	COMDAT ?BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
this$ = 112
__$ReturnUdt$ = 120
?BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ PROC ; BVNode::BuildAxis6ByteTree, COMDAT

; 147  : {

$LN15:
	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	sub	rsp, 96					; 00000060H
	mov	rbx, rdx
	xor	edx, edx
	mov	DWORD PTR $T1[rsp], edx
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [rbx], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	QWORD PTR [rbx], rdx
	mov	QWORD PTR [rbx+8], rdx
	mov	QWORD PTR [rbx+16], rdx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BVNode.cpp

; 150  : 	return Ret;

	mov	DWORD PTR $T1[rsp], 1

; 148  : 	std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> Ret;
; 149  : 	CompressNode(Ret, this, mMin, mMax, true);

	movsd	xmm0, QWORD PTR [rcx+16]
	movsd	QWORD PTR $T2[rsp], xmm0
	mov	eax, DWORD PTR [rcx+24]
	mov	DWORD PTR $T2[rsp+8], eax
	movsd	xmm0, QWORD PTR [rcx+28]
	movsd	QWORD PTR $T3[rsp], xmm0
	mov	eax, DWORD PTR [rcx+36]
	mov	DWORD PTR $T3[rsp+8], eax
	mov	BYTE PTR [rsp+32], 1
	lea	r9, QWORD PTR $T2[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	mov	rdx, rcx
	mov	rcx, rbx
	call	?CompressNode@@YAXAEAV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@PEAVBVNode@@U?$vec@$02M$0A@@glm@@2_N@Z ; CompressNode

; 150  : 	return Ret;

	mov	rax, rbx

; 151  : }

	add	rsp, 96					; 00000060H
	pop	rbx
	ret	0
	int	3
?BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ ENDP ; BVNode::BuildAxis6ByteTree
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
this$ = 112
__$ReturnUdt$ = 120
?dtor$0@?0??BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ@4HA PROC ; `BVNode::BuildAxis6ByteTree'::`1'::dtor$0
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	eax, DWORD PTR $T1[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN4@dtor$0
	and	DWORD PTR $T1[rbp], -2
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??1?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@XZ ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::~vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
$LN4@dtor$0:
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$0@?0??BuildAxis6ByteTree@BVNode@@QEAA?AV?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@XZ@4HA ENDP ; `BVNode::BuildAxis6ByteTree'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?__autoclassinit2@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 8
classSize$dead$ = 16
?__autoclassinit2@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAX_K@Z PROC ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::__autoclassinit2, COMDAT
	xorps	xmm0, xmm0
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	mov	QWORD PTR [rcx+16], rax
	ret	0
?__autoclassinit2@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAX_K@Z ENDP ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?size@?$vector@UNode@?$Bvh@M@bvh@@V?$allocator@UNode@?$Bvh@M@bvh@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?size@?$vector@UNode@?$Bvh@M@bvh@@V?$allocator@UNode@?$Bvh@M@bvh@@@std@@@std@@QEBA_KXZ PROC ; std::vector<bvh::Bvh<float>::Node,std::allocator<bvh::Bvh<float>::Node> >::size, COMDAT

; 1868 :         auto& _My_data = _Mypair._Myval2;
; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, QWORD PTR [rcx+8]
	sub	rax, QWORD PTR [rcx]
	sar	rax, 5

; 1870 :     }

	ret	0
?size@?$vector@UNode@?$Bvh@M@bvh@@V?$allocator@UNode@?$Bvh@M@bvh@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<bvh::Bvh<float>::Node,std::allocator<bvh::Bvh<float>::Node> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Unchecked_end@?$vector@UNode@?$Bvh@M@bvh@@V?$allocator@UNode@?$Bvh@M@bvh@@@std@@@std@@QEAAPEAUNode@?$Bvh@M@bvh@@XZ
_TEXT	SEGMENT
this$ = 8
?_Unchecked_end@?$vector@UNode@?$Bvh@M@bvh@@V?$allocator@UNode@?$Bvh@M@bvh@@@std@@@std@@QEAAPEAUNode@?$Bvh@M@bvh@@XZ PROC ; std::vector<bvh::Bvh<float>::Node,std::allocator<bvh::Bvh<float>::Node> >::_Unchecked_end, COMDAT

; 1855 :         return _Mypair._Myval2._Mylast;

	mov	rax, QWORD PTR [rcx+8]

; 1856 :     }

	ret	0
?_Unchecked_end@?$vector@UNode@?$Bvh@M@bvh@@V?$allocator@UNode@?$Bvh@M@bvh@@@std@@@std@@QEAAPEAUNode@?$Bvh@M@bvh@@XZ ENDP ; std::vector<bvh::Bvh<float>::Node,std::allocator<bvh::Bvh<float>::Node> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Unchecked_begin@?$vector@UNode@?$Bvh@M@bvh@@V?$allocator@UNode@?$Bvh@M@bvh@@@std@@@std@@QEAAPEAUNode@?$Bvh@M@bvh@@XZ
_TEXT	SEGMENT
this$ = 8
?_Unchecked_begin@?$vector@UNode@?$Bvh@M@bvh@@V?$allocator@UNode@?$Bvh@M@bvh@@@std@@@std@@QEAAPEAUNode@?$Bvh@M@bvh@@XZ PROC ; std::vector<bvh::Bvh<float>::Node,std::allocator<bvh::Bvh<float>::Node> >::_Unchecked_begin, COMDAT

; 1847 :         return _Mypair._Myval2._Myfirst;

	mov	rax, QWORD PTR [rcx]

; 1848 :     }

	ret	0
?_Unchecked_begin@?$vector@UNode@?$Bvh@M@bvh@@V?$allocator@UNode@?$Bvh@M@bvh@@@std@@@std@@QEAAPEAUNode@?$Bvh@M@bvh@@XZ ENDP ; std::vector<bvh::Bvh<float>::Node,std::allocator<bvh::Bvh<float>::Node> >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?data@?$vector@MV?$allocator@M@std@@@std@@QEAAPEAMXZ
_TEXT	SEGMENT
this$ = 8
?data@?$vector@MV?$allocator@M@std@@@std@@QEAAPEAMXZ PROC ; std::vector<float,std::allocator<float> >::data, COMDAT

; 1787 :         return _Unfancy_maybe_null(_Mypair._Myval2._Myfirst);

	mov	rax, QWORD PTR [rcx]

; 1788 :     }

	ret	0
?data@?$vector@MV?$allocator@M@std@@@std@@QEAAPEAMXZ ENDP ; std::vector<float,std::allocator<float> >::data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?push_back@?$vector@MV?$allocator@M@std@@@std@@QEAAXAEBM@Z
_TEXT	SEGMENT
this$ = 8
_Val$ = 16
?push_back@?$vector@MV?$allocator@M@std@@@std@@QEAAXAEBM@Z PROC ; std::vector<float,std::allocator<float> >::push_back, COMDAT

; 872  :     _CONSTEXPR20 void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee

	mov	r8, rdx

; 781  :         if (_Mylast != _My_data._Myend) {

	mov	rdx, QWORD PTR [rcx+8]
	cmp	rdx, QWORD PTR [rcx+16]
	je	SHORT $LN4@push_back

; 806  :         ++_Mylast;

	mov	eax, DWORD PTR [r8]
	mov	DWORD PTR [rdx], eax
	add	QWORD PTR [rcx+8], 4

; 873  :         _Emplace_one_at_back(_Val);
; 874  :     }

	ret	0
$LN4@push_back:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	jmp	??$_Emplace_reallocate@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAMAEBM@Z ; std::vector<float,std::allocator<float> >::_Emplace_reallocate<float const &>
?push_back@?$vector@MV?$allocator@M@std@@@std@@QEAAXAEBM@Z ENDP ; std::vector<float,std::allocator<float> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Unchecked_end@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@QEAAPEAU?$vec@$02M$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 8
?_Unchecked_end@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@QEAAPEAU?$vec@$02M$0A@@glm@@XZ PROC ; std::vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >::_Unchecked_end, COMDAT

; 1855 :         return _Mypair._Myval2._Mylast;

	mov	rax, QWORD PTR [rcx+8]

; 1856 :     }

	ret	0
?_Unchecked_end@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@QEAAPEAU?$vec@$02M$0A@@glm@@XZ ENDP ; std::vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Unchecked_begin@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@QEAAPEAU?$vec@$02M$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 8
?_Unchecked_begin@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@QEAAPEAU?$vec@$02M$0A@@glm@@XZ PROC ; std::vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >::_Unchecked_begin, COMDAT

; 1847 :         return _Mypair._Myval2._Myfirst;

	mov	rax, QWORD PTR [rcx]

; 1848 :     }

	ret	0
?_Unchecked_begin@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@QEAAPEAU?$vec@$02M$0A@@glm@@XZ ENDP ; std::vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??1?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >::~vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >, COMDAT

; 767  :         _Tidy();

	jmp	?_Tidy@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >::_Tidy
??1?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >::~vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??A?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAAAEAVBVNode@@_K@Z
_TEXT	SEGMENT
this$ = 8
_Pos$ = 16
??A?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAAAEAVBVNode@@_K@Z PROC ; std::vector<BVNode,std::allocator<BVNode> >::operator[], COMDAT

; 1883 :         auto& _My_data = _Mypair._Myval2;
; 1884 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1885 :         _STL_VERIFY(
; 1886 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1887 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1888 : 
; 1889 :         return _My_data._Myfirst[_Pos];

	shl	rdx, 6
	add	rdx, QWORD PTR [rcx]
	mov	rax, rdx

; 1890 :     }

	ret	0
??A?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAAAEAVBVNode@@_K@Z ENDP ; std::vector<BVNode,std::allocator<BVNode> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?push_back@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAAXAEBVBVNode@@@Z
_TEXT	SEGMENT
this$ = 8
_Val$ = 16
?push_back@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAAXAEBVBVNode@@@Z PROC ; std::vector<BVNode,std::allocator<BVNode> >::push_back, COMDAT

; 872  :     _CONSTEXPR20 void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee

	mov	r8, rdx

; 781  :         if (_Mylast != _My_data._Myend) {

	mov	rdx, QWORD PTR [rcx+8]
	cmp	rdx, QWORD PTR [rcx+16]
	je	SHORT $LN4@push_back
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 254  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8+32]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+48]
	movups	XMMWORD PTR [rdx+48], xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 806  :         ++_Mylast;

	add	QWORD PTR [rcx+8], 64			; 00000040H

; 873  :         _Emplace_one_at_back(_Val);
; 874  :     }

	ret	0
$LN4@push_back:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	jmp	??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z ; std::vector<BVNode,std::allocator<BVNode> >::_Emplace_reallocate<BVNode const &>
?push_back@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAAXAEBVBVNode@@@Z ENDP ; std::vector<BVNode,std::allocator<BVNode> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??1?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAA@XZ PROC ; std::vector<BVNode,std::allocator<BVNode> >::~vector<BVNode,std::allocator<BVNode> >, COMDAT

; 766  :     _CONSTEXPR20 ~vector() noexcept {

$LN33:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR [rcx]
	test	rcx, rcx
	je	SHORT $LN4@vector

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rdx, QWORD PTR [rbx+16]
	sub	rdx, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	and	rdx, -64				; ffffffffffffffc0H

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN22@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	r8, QWORD PTR [rcx-8]
	add	rdx, 39					; 00000027H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	sub	rcx, r8

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	lea	rax, QWORD PTR [rcx-8]
	cmp	rax, 31
	ja	SHORT $LN19@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rcx, r8
$LN22@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

	xor	eax, eax
	mov	QWORD PTR [rbx], rax

; 2050 :             _Mylast  = nullptr;

	mov	QWORD PTR [rbx+8], rax

; 2051 :             _Myend   = nullptr;

	mov	QWORD PTR [rbx+16], rax
$LN4@vector:

; 772  :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN19@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN30@vector:
??1?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAA@XZ ENDP ; std::vector<BVNode,std::allocator<BVNode> >::~vector<BVNode,std::allocator<BVNode> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??0?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAA@$$QEAV01@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??0?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAA@$$QEAV01@@Z PROC ; std::vector<BVNode,std::allocator<BVNode> >::vector<BVNode,std::allocator<BVNode> >, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rax, QWORD PTR [rdx]

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

	xor	r10d, r10d
	mov	r9, QWORD PTR [rdx+16]

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	r8, QWORD PTR [rdx+8]

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	QWORD PTR [rdx+16], r10
	mov	QWORD PTR [rdx+8], r10
	mov	QWORD PTR [rdx], r10
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 401  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

	mov	QWORD PTR [rcx], rax

; 701  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 702  :         _Mypair._Myval2._Swap_proxy_and_iterators(_Right._Mypair._Myval2);
; 703  :     }

	mov	rax, rcx

; 401  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

	mov	QWORD PTR [rcx+8], r8
	mov	QWORD PTR [rcx+16], r9

; 701  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 702  :         _Mypair._Myval2._Swap_proxy_and_iterators(_Right._Mypair._Myval2);
; 703  :     }

	ret	0
??0?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAA@$$QEAV01@@Z ENDP ; std::vector<BVNode,std::allocator<BVNode> >::vector<BVNode,std::allocator<BVNode> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??0?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAA@XZ PROC ; std::vector<BVNode,std::allocator<BVNode> >::vector<BVNode,std::allocator<BVNode> >, COMDAT

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax

; 611  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 612  :     }

	mov	rax, rcx
	ret	0
??0?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEAA@XZ ENDP ; std::vector<BVNode,std::allocator<BVNode> >::vector<BVNode,std::allocator<BVNode> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??A?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAAEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K@Z
_TEXT	SEGMENT
this$ = 8
_Pos$ = 16
??A?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAAEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K@Z PROC ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::operator[], COMDAT

; 1883 :         auto& _My_data = _Mypair._Myval2;
; 1884 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1885 :         _STL_VERIFY(
; 1886 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1887 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1888 : 
; 1889 :         return _My_data._Myfirst[_Pos];

	mov	rax, QWORD PTR [rcx]
	lea	rdx, QWORD PTR [rdx+rdx*8]
	lea	rax, QWORD PTR [rax+rdx*8]

; 1890 :     }

	ret	0
??A?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAAEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K@Z ENDP ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?size@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?size@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEBA_KXZ PROC ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::size, COMDAT

; 1868 :         auto& _My_data = _Mypair._Myval2;
; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, QWORD PTR [rcx+8]
	sub	rax, QWORD PTR [rcx]
	mov	rcx, -8198552921648689607		; 8e38e38e38e38e39H
	sar	rax, 3
	imul	rax, rcx

; 1870 :     }

	ret	0
?size@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?resize@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 48
_Newsize$ = 56
?resize@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAX_K@Z PROC ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::resize, COMDAT

; 1590 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

$LN12:
	push	rbx
	sub	rsp, 32					; 00000020H

; 1557 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	r9, QWORD PTR [rcx+8]

; 1590 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	mov	rbx, rcx

; 1557 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	r8, QWORD PTR [rcx]
	mov	r10, -8198552921648689607		; 8e38e38e38e38e39H
	mov	rcx, r9
	sub	rcx, r8
	sar	rcx, 3
	imul	rcx, r10

; 1558 :         if (_Newsize < _Oldsize) { // trim

	cmp	rdx, rcx
	jae	SHORT $LN4@resize

; 1559 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	rax, QWORD PTR [rdx+rdx*8]
	lea	rcx, QWORD PTR [r8+rax*8]

; 1560 :             _Orphan_range(_Newlast, _Mylast);
; 1561 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1562 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1563 :             _Mylast = _Newlast;

	mov	QWORD PTR [rbx+8], rcx

; 1591 :         // trim or append value-initialized elements, provide strong guarantee
; 1592 :         _Resize(_Newsize, _Value_init_tag{});
; 1593 :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN4@resize:

; 1567 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN5@resize

; 1568 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	rax, QWORD PTR [rbx+16]
	sub	rax, r8
	sar	rax, 3
	imul	rax, r10

; 1569 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	rdx, rax
	jbe	SHORT $LN6@resize

; 1570 :                 _Resize_reallocate(_Newsize, _Val);

	mov	rcx, rbx

; 1591 :         // trim or append value-initialized elements, provide strong guarantee
; 1592 :         _Resize(_Newsize, _Value_init_tag{});
; 1593 :     }

	add	rsp, 32					; 00000020H
	pop	rbx

; 1570 :                 _Resize_reallocate(_Newsize, _Val);

	jmp	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Resize_reallocate<std::_Value_init_tag>
$LN6@resize:

; 1571 :                 return;
; 1572 :             }
; 1573 : 
; 1574 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1575 :             const pointer _Oldlast = _Mylast;
; 1576 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1577 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1578 :             } else {
; 1579 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1580 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

	sub	rdx, rcx
	mov	rcx, r9
	call	??$_Uninitialized_value_construct_n@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@_KAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
	mov	QWORD PTR [rbx+8], rax
$LN5@resize:

; 1591 :         // trim or append value-initialized elements, provide strong guarantee
; 1592 :         _Resize(_Newsize, _Value_init_tag{});
; 1593 :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?resize@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAX_K@Z ENDP ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??1?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@XZ PROC ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::~vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >, COMDAT

; 766  :     _CONSTEXPR20 ~vector() noexcept {

$LN33:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR [rcx]
	test	rcx, rcx
	je	SHORT $LN4@vector

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR [rbx+16]
	mov	rdx, -8198552921648689607		; 8e38e38e38e38e39H
	sub	rax, rcx
	sar	rax, 3
	imul	rax, rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	lea	rdx, QWORD PTR [rax+rax*8]
	shl	rdx, 3

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN22@vector

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	r8, QWORD PTR [rcx-8]
	add	rdx, 39					; 00000027H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	sub	rcx, r8

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	lea	rax, QWORD PTR [rcx-8]
	cmp	rax, 31
	ja	SHORT $LN19@vector

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rcx, r8
$LN22@vector:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

	xor	eax, eax
	mov	QWORD PTR [rbx], rax

; 2050 :             _Mylast  = nullptr;

	mov	QWORD PTR [rbx+8], rax

; 2051 :             _Myend   = nullptr;

	mov	QWORD PTR [rbx+16], rax
$LN4@vector:

; 772  :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN19@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN30@vector:
??1?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@XZ ENDP ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::~vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??0?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@$$QEAV01@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??0?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@$$QEAV01@@Z PROC ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rax, QWORD PTR [rdx]

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

	xor	r10d, r10d
	mov	r9, QWORD PTR [rdx+16]

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	r8, QWORD PTR [rdx+8]

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	QWORD PTR [rdx+16], r10
	mov	QWORD PTR [rdx+8], r10
	mov	QWORD PTR [rdx], r10
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 401  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

	mov	QWORD PTR [rcx], rax

; 701  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 702  :         _Mypair._Myval2._Swap_proxy_and_iterators(_Right._Mypair._Myval2);
; 703  :     }

	mov	rax, rcx

; 401  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

	mov	QWORD PTR [rcx+8], r8
	mov	QWORD PTR [rcx+16], r9

; 701  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 702  :         _Mypair._Myval2._Swap_proxy_and_iterators(_Right._Mypair._Myval2);
; 703  :     }

	ret	0
??0?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@$$QEAV01@@Z ENDP ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??0?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@XZ PROC ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >, COMDAT

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax

; 611  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 612  :     }

	mov	rax, rcx
	ret	0
??0?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@XZ ENDP ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
;	COMDAT ?Write@?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z
_TEXT	SEGMENT
this$ = 48
Writer$ = 56
?Write@?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z PROC ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::Write, COMDAT

; 937  :         virtual void Write(PhiveBinaryVectorWriter& Writer) override {

$LN39:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rdx, QWORD PTR [rdx+8]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp

; 70   : 	if (this->m_Offset + Size > this->m_Data.size())

	mov	eax, DWORD PTR [rbx+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	rdx, QWORD PTR [rbx]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp

; 70   : 	if (this->m_Offset + Size > this->m_Data.size())

	add	eax, 3
	cdqe
	cmp	rax, rdx
	jbe	SHORT $LL17@Write

; 71   : 	{
; 72   : 		this->m_Data.resize(this->m_Data.size() + Size);

	add	rdx, 3
	mov	rcx, rbx
	call	?resize@?$vector@EV?$allocator@E@std@@@std@@QEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize
$LL17@Write:

; 73   : 	}
; 74   : 	for (int i = 0; i < Size; i++)
; 75   : 	{
; 76   : 		this->m_Data[this->m_Offset + i] = Bytes[i];

	movsxd	rdx, DWORD PTR [rbx+24]
	mov	rcx, QWORD PTR [rbx]
	movzx	eax, BYTE PTR [rdi+8]
	mov	BYTE PTR [rdx+rcx], al
	movsxd	rdx, DWORD PTR [rbx+24]
	mov	rcx, QWORD PTR [rbx]
	movzx	eax, BYTE PTR [rdi+9]
	mov	BYTE PTR [rdx+rcx+1], al
	movsxd	rdx, DWORD PTR [rbx+24]
	mov	rcx, QWORD PTR [rbx]
	movzx	eax, BYTE PTR [rdi+10]
	mov	BYTE PTR [rdx+rcx+2], al

; 77   : 	}
; 78   : 	this->m_Offset += Size;

	add	DWORD PTR [rbx+24], 3
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 942  :         }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?Write@?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorWriter@@@Z ENDP ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::Write
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h
;	COMDAT ?Read@?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z
_TEXT	SEGMENT
this$ = 8
Reader$ = 16
?Read@?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z PROC ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::Read, COMDAT
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp

; 146  : 	std::memcpy(Dest, this->m_Bytes.data() + this->m_Offset + 1, Size);

	movsxd	r9, DWORD PTR [rdx+8]
	mov	rax, QWORD PTR [rdx]
	mov	r8, QWORD PTR [rax]
	movzx	eax, WORD PTR [r9+r8+1]
	mov	WORD PTR [rcx+16], ax
	movzx	eax, BYTE PTR [r9+r8+3]
	mov	BYTE PTR [rcx+18], al

; 147  : 
; 148  : 	//std::memcopy(this->m_Bytes.begin() + this->m_Offset + 1, this->m_Bytes.begin() + this->m_Offset + 1 + Size, static_cast<char*>(Dest));
; 149  : 
; 150  : 	this->m_Offset += Size;

	add	DWORD PTR [rdx+8], 3
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveNavMesh.h

; 935  :         }

	ret	0
?Read@?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@UEAAXAEAVPhiveBinaryVectorReader@@@Z ENDP ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::Read
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?data@?$vector@IV?$allocator@I@std@@@std@@QEAAPEAIXZ
_TEXT	SEGMENT
this$ = 8
?data@?$vector@IV?$allocator@I@std@@@std@@QEAAPEAIXZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::data, COMDAT

; 1787 :         return _Unfancy_maybe_null(_Mypair._Myval2._Myfirst);

	mov	rax, QWORD PTR [rcx]

; 1788 :     }

	ret	0
?data@?$vector@IV?$allocator@I@std@@@std@@QEAAPEAIXZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Tidy@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Tidy@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@AEAAXXZ PROC ; std::vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >::_Tidy, COMDAT

; 2035 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN30:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 2036 :         auto& _Al         = _Getal();
; 2037 :         auto& _My_data    = _Mypair._Myval2;
; 2038 :         pointer& _Myfirst = _My_data._Myfirst;
; 2039 :         pointer& _Mylast  = _My_data._Mylast;
; 2040 :         pointer& _Myend   = _My_data._Myend;
; 2041 : 
; 2042 :         _My_data._Orphan_all();
; 2043 : 
; 2044 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR [rcx]
	test	rcx, rcx
	je	SHORT $LN2@Tidy

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR [rbx+16]
	mov	rdx, -6148914691236517205		; aaaaaaaaaaaaaaabH
	sub	rax, rcx
	sar	rax, 2
	imul	rax, rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	lea	rdx, QWORD PTR [rax+rax*2]
	shl	rdx, 2

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN20@Tidy

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	r8, QWORD PTR [rcx-8]
	add	rdx, 39					; 00000027H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	sub	rcx, r8

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	lea	rax, QWORD PTR [rcx-8]
	cmp	rax, 31
	ja	SHORT $LN17@Tidy

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rcx, r8
$LN20@Tidy:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

	xor	eax, eax
	mov	QWORD PTR [rbx], rax

; 2050 :             _Mylast  = nullptr;

	mov	QWORD PTR [rbx+8], rax

; 2051 :             _Myend   = nullptr;

	mov	QWORD PTR [rbx+16], rax
$LN2@Tidy:

; 2053 :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN17@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN27@Tidy:
?_Tidy@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@AEAAXXZ ENDP ; std::vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Getal@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAAEAV?$allocator@VBVNode@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAAEAV?$allocator@VBVNode@@@2@XZ PROC ; std::vector<BVNode,std::allocator<BVNode> >::_Getal, COMDAT

; 2181 :         return _Mypair._Get_first();

	mov	rax, rcx

; 2182 :     }

	ret	0
?_Getal@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAAEAV?$allocator@VBVNode@@@2@XZ ENDP ; std::vector<BVNode,std::allocator<BVNode> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Tidy@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Tidy@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAXXZ PROC ; std::vector<BVNode,std::allocator<BVNode> >::_Tidy, COMDAT

; 2035 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN30:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 2036 :         auto& _Al         = _Getal();
; 2037 :         auto& _My_data    = _Mypair._Myval2;
; 2038 :         pointer& _Myfirst = _My_data._Myfirst;
; 2039 :         pointer& _Mylast  = _My_data._Mylast;
; 2040 :         pointer& _Myend   = _My_data._Myend;
; 2041 : 
; 2042 :         _My_data._Orphan_all();
; 2043 : 
; 2044 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR [rcx]
	test	rcx, rcx
	je	SHORT $LN2@Tidy

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rdx, QWORD PTR [rbx+16]
	sub	rdx, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	and	rdx, -64				; ffffffffffffffc0H

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN20@Tidy

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	r8, QWORD PTR [rcx-8]
	add	rdx, 39					; 00000027H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	sub	rcx, r8

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	lea	rax, QWORD PTR [rcx-8]
	cmp	rax, 31
	ja	SHORT $LN17@Tidy

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rcx, r8
$LN20@Tidy:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

	xor	eax, eax
	mov	QWORD PTR [rbx], rax

; 2050 :             _Mylast  = nullptr;

	mov	QWORD PTR [rbx+8], rax

; 2051 :             _Myend   = nullptr;

	mov	QWORD PTR [rbx+16], rax
$LN2@Tidy:

; 2053 :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN17@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN27@Tidy:
?_Tidy@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAXXZ ENDP ; std::vector<BVNode,std::allocator<BVNode> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Getal@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@2@XZ PROC ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Getal, COMDAT

; 2181 :         return _Mypair._Get_first();

	mov	rax, rcx

; 2182 :     }

	ret	0
?_Getal@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@2@XZ ENDP ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Tidy@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Tidy@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAXXZ PROC ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Tidy, COMDAT

; 2035 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN30:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 2036 :         auto& _Al         = _Getal();
; 2037 :         auto& _My_data    = _Mypair._Myval2;
; 2038 :         pointer& _Myfirst = _My_data._Myfirst;
; 2039 :         pointer& _Mylast  = _My_data._Mylast;
; 2040 :         pointer& _Myend   = _My_data._Myend;
; 2041 : 
; 2042 :         _My_data._Orphan_all();
; 2043 : 
; 2044 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR [rcx]
	test	rcx, rcx
	je	SHORT $LN2@Tidy

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR [rbx+16]
	mov	rdx, -8198552921648689607		; 8e38e38e38e38e39H
	sub	rax, rcx
	sar	rax, 3
	imul	rax, rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	lea	rdx, QWORD PTR [rax+rax*8]
	shl	rdx, 3

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN20@Tidy

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	r8, QWORD PTR [rcx-8]
	add	rdx, 39					; 00000027H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	sub	rcx, r8

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	lea	rax, QWORD PTR [rcx-8]
	cmp	rax, 31
	ja	SHORT $LN17@Tidy

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rcx, r8
$LN20@Tidy:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

	xor	eax, eax
	mov	QWORD PTR [rbx], rax

; 2050 :             _Mylast  = nullptr;

	mov	QWORD PTR [rbx+8], rax

; 2051 :             _Myend   = nullptr;

	mov	QWORD PTR [rbx+16], rax
$LN2@Tidy:

; 2053 :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN17@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN27@Tidy:
?_Tidy@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAXXZ ENDP ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Getal@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$vec@$02M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$vec@$02M$0A@@glm@@@2@XZ PROC ; std::vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >::_Getal, COMDAT

; 2181 :         return _Mypair._Get_first();

	mov	rax, rcx

; 2182 :     }

	ret	0
?_Getal@?$vector@U?$vec@$02M$0A@@glm@@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$vec@$02M$0A@@glm@@@2@XZ ENDP ; std::vector<glm::vec<3,float,0>,std::allocator<glm::vec<3,float,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$vec@$02M$0A@@glm@@@std@@QEAAXQEAU?$vec@$02M$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@U?$vec@$02M$0A@@glm@@@std@@QEAAXQEAU?$vec@$02M$0A@@glm@@_K@Z PROC ; std::allocator<glm::vec<3,float,0> >::deallocate, COMDAT

; 966  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN23:
	sub	rsp, 40					; 00000028H
	mov	rax, rdx

; 967  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 968  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	lea	rdx, QWORD PTR [r8+r8*2]
	shl	rdx, 2

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN17@deallocate

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rax-8]
	add	rdx, 39					; 00000027H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	sub	rax, rcx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	ja	SHORT $LN14@deallocate

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rax, rcx
$LN17@deallocate:

; 265  :         ::operator delete(_Ptr, _Bytes);

	mov	rcx, rax

; 970  :     }

	add	rsp, 40					; 00000028H

; 265  :         ::operator delete(_Ptr, _Bytes);

	jmp	??3@YAXPEAX_K@Z				; operator delete
$LN14@deallocate:

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN20@deallocate:
?deallocate@?$allocator@U?$vec@$02M$0A@@glm@@@std@@QEAAXQEAU?$vec@$02M$0A@@glm@@_K@Z ENDP ; std::allocator<glm::vec<3,float,0> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@VBVNode@@@std@@V?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@2@$00@std@@QEAAAEAV?$allocator@VBVNode@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@V?$allocator@VBVNode@@@std@@V?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@2@$00@std@@QEAAAEAV?$allocator@VBVNode@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<BVNode>,std::_Vector_val<std::_Simple_types<BVNode> >,1>::_Get_first, COMDAT

; 1523 :         return *this;

	mov	rax, rcx

; 1524 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@VBVNode@@@std@@V?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@2@$00@std@@QEAAAEAV?$allocator@VBVNode@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<BVNode>,std::_Vector_val<std::_Simple_types<BVNode> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ?deallocate@?$allocator@VBVNode@@@std@@QEAAXQEAVBVNode@@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@VBVNode@@@std@@QEAAXQEAVBVNode@@_K@Z PROC ; std::allocator<BVNode>::deallocate, COMDAT

; 966  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN23:
	sub	rsp, 40					; 00000028H

; 967  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 968  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	shl	r8, 6
	mov	rax, rdx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	r8, 4096				; 00001000H
	jb	SHORT $LN17@deallocate

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rdx-8]
	add	r8, 39					; 00000027H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	sub	rax, rcx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	ja	SHORT $LN14@deallocate

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rax, rcx
$LN17@deallocate:

; 265  :         ::operator delete(_Ptr, _Bytes);

	mov	rdx, r8
	mov	rcx, rax

; 970  :     }

	add	rsp, 40					; 00000028H

; 265  :         ::operator delete(_Ptr, _Bytes);

	jmp	??3@YAXPEAX_K@Z				; operator delete
$LN14@deallocate:

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN20@deallocate:
?deallocate@?$allocator@VBVNode@@@std@@QEAAXQEAVBVNode@@_K@Z ENDP ; std::allocator<BVNode>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@V?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@2@$00@std@@QEAAAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@V?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@2@$00@std@@QEAAAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >,1>::_Get_first, COMDAT

; 1523 :         return *this;

	mov	rax, rcx

; 1524 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@V?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@2@$00@std@@QEAAAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ?deallocate@?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@QEAAXQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@QEAAXQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K@Z PROC ; std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>::deallocate, COMDAT

; 966  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN23:
	sub	rsp, 40					; 00000028H
	mov	rax, rdx

; 967  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 968  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	lea	rdx, QWORD PTR [r8+r8*8]
	shl	rdx, 3

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN17@deallocate

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rax-8]
	add	rdx, 39					; 00000027H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	sub	rax, rcx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	ja	SHORT $LN14@deallocate

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rax, rcx
$LN17@deallocate:

; 265  :         ::operator delete(_Ptr, _Bytes);

	mov	rcx, rax

; 970  :     }

	add	rsp, 40					; 00000028H

; 265  :         ::operator delete(_Ptr, _Bytes);

	jmp	??3@YAXPEAX_K@Z				; operator delete
$LN14@deallocate:

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN20@deallocate:
?deallocate@?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@QEAAXQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K@Z ENDP ; std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$vec@$02M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$vec@$02M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$vec@$02M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$vec@$02M$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::vec<3,float,0> >,std::_Vector_val<std::_Simple_types<glm::vec<3,float,0> > >,1>::_Get_first, COMDAT

; 1523 :         return *this;

	mov	rax, rcx

; 1524 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$vec@$02M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$vec@$02M$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::vec<3,float,0> >,std::_Vector_val<std::_Simple_types<glm::vec<3,float,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Libraries\include\glm\detail\type_vec3.inl
;	COMDAT ??0?$vec@$02M$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 8
_x$ = 16
_y$ = 24
_z$ = 32
??0?$vec@$02M$0A@@glm@@QEAA@MMM@Z PROC			; glm::vec<3,float,0>::vec<3,float,0>, COMDAT

; 38   : 		: x(_x), y(_y), z(_z)

	movss	DWORD PTR [rcx], xmm1

; 39   : 	{}

	mov	rax, rcx
	movss	DWORD PTR [rcx+4], xmm2
	movss	DWORD PTR [rcx+8], xmm3
	ret	0
??0?$vec@$02M$0A@@glm@@QEAA@MMM@Z ENDP			; glm::vec<3,float,0>::vec<3,float,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath
;	COMDAT ??$fmax@MH$0A@@@YANMH@Z
_TEXT	SEGMENT
_Left$ = 8
_Right$dead$ = 16
??$fmax@MH$0A@@@YANMH@Z PROC				; fmax<float,int,0>, COMDAT

; 698  : _GENERIC_MATH2(fmax)

	cvtss2sd xmm0, xmm0
	xorps	xmm1, xmm1
	rex_jmp	QWORD PTR __imp_fmax
??$fmax@MH$0A@@@YANMH@Z ENDP				; fmax<float,int,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
;	COMDAT ??$min@H@std@@YAAEBHAEBH0@Z
_TEXT	SEGMENT
_Left$ = 8
_Right$ = 16
??$min@H@std@@YAAEBHAEBH0@Z PROC			; std::min<int>, COMDAT

; 69   :     // return smaller of _Left and _Right
; 70   :     return _Right < _Left ? _Right : _Left;

	mov	eax, DWORD PTR [rcx]
	cmp	DWORD PTR [rdx], eax
	cmovl	rcx, rdx
	mov	rax, rcx

; 71   : }

	ret	0
??$min@H@std@@YAAEBHAEBH0@Z ENDP			; std::min<int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Unfancy_maybe_null@M@std@@YAPEAMPEAM@Z
_TEXT	SEGMENT
_Ptr$ = 8
??$_Unfancy_maybe_null@M@std@@YAPEAMPEAM@Z PROC		; std::_Unfancy_maybe_null<float>, COMDAT

; 434  :     return _Ptr;

	mov	rax, rcx

; 435  : }

	ret	0
??$_Unfancy_maybe_null@M@std@@YAPEAMPEAM@Z ENDP		; std::_Unfancy_maybe_null<float>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_one_at_back@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAMAEBM@Z
_TEXT	SEGMENT
this$ = 8
<_Val_0>$ = 16
??$_Emplace_one_at_back@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAMAEBM@Z PROC ; std::vector<float,std::allocator<float> >::_Emplace_one_at_back<float const &>, COMDAT

; 776  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

	mov	r8, rdx

; 777  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 778  :         auto& _My_data   = _Mypair._Myval2;
; 779  :         pointer& _Mylast = _My_data._Mylast;
; 780  : 
; 781  :         if (_Mylast != _My_data._Myend) {

	mov	rdx, QWORD PTR [rcx+8]
	cmp	rdx, QWORD PTR [rcx+16]
	je	SHORT $LN2@Emplace_on

; 805  :         _Ty& _Result = *_Mylast;

	mov	eax, DWORD PTR [r8]
	mov	DWORD PTR [rdx], eax
	mov	rax, QWORD PTR [rcx+8]

; 806  :         ++_Mylast;

	lea	rdx, QWORD PTR [rax+4]
	mov	QWORD PTR [rcx+8], rdx

; 786  :     }

	ret	0
$LN2@Emplace_on:

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);
; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	jmp	??$_Emplace_reallocate@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAMAEBM@Z ; std::vector<float,std::allocator<float> >::_Emplace_reallocate<float const &>
??$_Emplace_one_at_back@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAMAEBM@Z ENDP ; std::vector<float,std::allocator<float> >::_Emplace_one_at_back<float const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_one_at_back@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAAEAVBVNode@@AEBV2@@Z
_TEXT	SEGMENT
this$ = 8
<_Val_0>$ = 16
??$_Emplace_one_at_back@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAAEAVBVNode@@AEBV2@@Z PROC ; std::vector<BVNode,std::allocator<BVNode> >::_Emplace_one_at_back<BVNode const &>, COMDAT

; 776  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

	mov	r8, rdx
	mov	r9, rcx

; 777  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 778  :         auto& _My_data   = _Mypair._Myval2;
; 779  :         pointer& _Mylast = _My_data._Mylast;
; 780  : 
; 781  :         if (_Mylast != _My_data._Myend) {

	mov	rdx, QWORD PTR [rcx+8]
	cmp	rdx, QWORD PTR [rcx+16]
	je	SHORT $LN2@Emplace_on
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 254  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8+32]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+48]
	movups	XMMWORD PTR [rdx+48], xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 805  :         _Ty& _Result = *_Mylast;

	mov	rax, QWORD PTR [rcx+8]

; 806  :         ++_Mylast;

	lea	rcx, QWORD PTR [rax+64]
	mov	QWORD PTR [r9+8], rcx

; 786  :     }

	ret	0
$LN2@Emplace_on:

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);
; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	jmp	??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z ; std::vector<BVNode,std::allocator<BVNode> >::_Emplace_reallocate<BVNode const &>
??$_Emplace_one_at_back@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAAEAVBVNode@@AEBV2@@Z ENDP ; std::vector<BVNode,std::allocator<BVNode> >::_Emplace_one_at_back<BVNode const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
;	COMDAT ??$move@AEAV?$allocator@VBVNode@@@std@@@std@@YA$$QEAV?$allocator@VBVNode@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$move@AEAV?$allocator@VBVNode@@@std@@@std@@YA$$QEAV?$allocator@VBVNode@@@0@AEAV10@@Z PROC ; std::move<std::allocator<BVNode> &>, COMDAT

; 1595 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, rcx

; 1596 : }

	ret	0
??$move@AEAV?$allocator@VBVNode@@@std@@@std@@YA$$QEAV?$allocator@VBVNode@@@0@AEAV10@@Z ENDP ; std::move<std::allocator<BVNode> &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
;	COMDAT ??$exchange@PEAVBVNode@@$$T@std@@YAPEAVBVNode@@AEAPEAV1@$$QEA$$T@Z
_TEXT	SEGMENT
_Val$ = 8
_New_val$ = 16
??$exchange@PEAVBVNode@@$$T@std@@YAPEAVBVNode@@AEAPEAV1@$$QEA$$T@Z PROC ; std::exchange<BVNode *,std::nullptr_t>, COMDAT

; 753  :     // assign _New_val to _Val, return previous _Val
; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);
; 755  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	rdx, QWORD PTR [rdx]
	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rcx], rdx

; 756  :     return _Old_val;
; 757  : }

	ret	0
??$exchange@PEAVBVNode@@$$T@std@@YAPEAVBVNode@@AEAPEAV1@$$QEA$$T@Z ENDP ; std::exchange<BVNode *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$?0V?$allocator@VBVNode@@@std@@PEAVBVNode@@PEAV2@PEAV2@@?$_Compressed_pair@V?$allocator@VBVNode@@@std@@V?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@VBVNode@@@1@$$QEAPEAVBVNode@@22@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
_Val1$dead$ = 24
<_Val2_0>$ = 32
<_Val2_1>$ = 40
<_Val2_2>$ = 48
??$?0V?$allocator@VBVNode@@@std@@PEAVBVNode@@PEAV2@PEAV2@@?$_Compressed_pair@V?$allocator@VBVNode@@@std@@V?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@VBVNode@@@1@$$QEAPEAVBVNode@@22@Z PROC ; std::_Compressed_pair<std::allocator<BVNode>,std::_Vector_val<std::_Simple_types<BVNode> >,1>::_Compressed_pair<std::allocator<BVNode>,std::_Vector_val<std::_Simple_types<BVNode> >,1><std::allocator<BVNode>,BVNode *,BVNode *,BVNode *>, COMDAT

; 1520 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	mov	rax, QWORD PTR <_Val2_2>$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR <_Val2_1>$[rsp]
	mov	rdx, QWORD PTR [rax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 401  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

	mov	rax, QWORD PTR [r9]
	mov	QWORD PTR [rcx], rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1520 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	mov	rax, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 401  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], r8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1520 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	ret	0
??$?0V?$allocator@VBVNode@@@std@@PEAVBVNode@@PEAV2@PEAV2@@?$_Compressed_pair@V?$allocator@VBVNode@@@std@@V?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@VBVNode@@@1@$$QEAPEAVBVNode@@22@Z ENDP ; std::_Compressed_pair<std::allocator<BVNode>,std::_Vector_val<std::_Simple_types<BVNode> >,1>::_Compressed_pair<std::allocator<BVNode>,std::_Vector_val<std::_Simple_types<BVNode> >,1><std::allocator<BVNode>,BVNode *,BVNode *,BVNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@VBVNode@@@std@@V?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
??$?0$$V@?$_Compressed_pair@V?$allocator@VBVNode@@@std@@V?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<BVNode>,std::_Vector_val<std::_Simple_types<BVNode> >,1>::_Compressed_pair<std::allocator<BVNode>,std::_Vector_val<std::_Simple_types<BVNode> >,1><>, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1515 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	mov	rax, rcx
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@VBVNode@@@std@@V?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<BVNode>,std::_Vector_val<std::_Simple_types<BVNode> >,1>::_Compressed_pair<std::allocator<BVNode>,std::_Vector_val<std::_Simple_types<BVNode> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
this$ = 48
_Newsize$ = 56
_Val$dead$ = 64
??$_Resize@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Resize<std::_Value_init_tag>, COMDAT

; 1551 :     _CONSTEXPR20 void _Resize(const size_type _Newsize, const _Ty2& _Val) {

$LN10:
	push	rbx
	sub	rsp, 32					; 00000020H

; 1552 :         // trim or append elements, provide strong guarantee
; 1553 :         auto& _Al           = _Getal();
; 1554 :         auto& _My_data      = _Mypair._Myval2;
; 1555 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1556 :         pointer& _Mylast    = _My_data._Mylast;
; 1557 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	r9, QWORD PTR [rcx+8]
	mov	rbx, rcx
	mov	r8, QWORD PTR [rcx]
	mov	r10, -8198552921648689607		; 8e38e38e38e38e39H
	mov	rcx, r9
	sub	rcx, r8
	sar	rcx, 3
	imul	rcx, r10

; 1558 :         if (_Newsize < _Oldsize) { // trim

	cmp	rdx, rcx
	jae	SHORT $LN2@Resize

; 1559 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	rax, QWORD PTR [rdx+rdx*8]
	lea	rcx, QWORD PTR [r8+rax*8]

; 1560 :             _Orphan_range(_Newlast, _Mylast);
; 1561 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1562 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1563 :             _Mylast = _Newlast;

	mov	QWORD PTR [rbx+8], rcx

; 1581 :             }
; 1582 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1583 :             _Orphan_range(_Oldlast, _Oldlast);
; 1584 :         }
; 1585 : 
; 1586 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1587 :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN2@Resize:

; 1564 :             return;
; 1565 :         }
; 1566 : 
; 1567 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN3@Resize

; 1568 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	rax, QWORD PTR [rbx+16]
	sub	rax, r8
	sar	rax, 3
	imul	rax, r10

; 1569 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	rdx, rax
	jbe	SHORT $LN4@Resize

; 1570 :                 _Resize_reallocate(_Newsize, _Val);

	mov	rcx, rbx

; 1581 :             }
; 1582 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1583 :             _Orphan_range(_Oldlast, _Oldlast);
; 1584 :         }
; 1585 : 
; 1586 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1587 :     }

	add	rsp, 32					; 00000020H
	pop	rbx

; 1570 :                 _Resize_reallocate(_Newsize, _Val);

	jmp	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Resize_reallocate<std::_Value_init_tag>
$LN4@Resize:

; 1571 :                 return;
; 1572 :             }
; 1573 : 
; 1574 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1575 :             const pointer _Oldlast = _Mylast;
; 1576 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1577 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1578 :             } else {
; 1579 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1580 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

	sub	rdx, rcx
	mov	rcx, r9
	call	??$_Uninitialized_value_construct_n@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@_KAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
	mov	QWORD PTR [rbx+8], rax
$LN3@Resize:

; 1581 :             }
; 1582 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1583 :             _Orphan_range(_Oldlast, _Oldlast);
; 1584 :         }
; 1585 : 
; 1586 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1587 :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$_Resize@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
;	COMDAT ??$move@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YA$$QEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$move@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YA$$QEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@AEAV10@@Z PROC ; std::move<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> &>, COMDAT

; 1595 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, rcx

; 1596 : }

	ret	0
??$move@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YA$$QEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@AEAV10@@Z ENDP ; std::move<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
;	COMDAT ??$exchange@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@$$T@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@AEAPEAU12@$$QEA$$T@Z
_TEXT	SEGMENT
_Val$ = 8
_New_val$ = 16
??$exchange@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@$$T@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@AEAPEAU12@$$QEA$$T@Z PROC ; std::exchange<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec *,std::nullptr_t>, COMDAT

; 753  :     // assign _New_val to _Val, return previous _Val
; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);
; 755  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	rdx, QWORD PTR [rdx]
	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rcx], rdx

; 756  :     return _Old_val;
; 757  : }

	ret	0
??$exchange@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@$$T@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@AEAPEAU12@$$QEA$$T@Z ENDP ; std::exchange<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$?0V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU23@PEAU23@@?$_Compressed_pair@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@V?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@1@$$QEAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@22@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
_Val1$dead$ = 24
<_Val2_0>$ = 32
<_Val2_1>$ = 40
<_Val2_2>$ = 48
??$?0V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU23@PEAU23@@?$_Compressed_pair@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@V?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@1@$$QEAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@22@Z PROC ; std::_Compressed_pair<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >,1>::_Compressed_pair<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >,1><std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec *,PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec *,PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec *>, COMDAT

; 1520 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	mov	rax, QWORD PTR <_Val2_2>$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR <_Val2_1>$[rsp]
	mov	rdx, QWORD PTR [rax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 401  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

	mov	rax, QWORD PTR [r9]
	mov	QWORD PTR [rcx], rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1520 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	mov	rax, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 401  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], r8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1520 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	ret	0
??$?0V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU23@PEAU23@@?$_Compressed_pair@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@V?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@1@$$QEAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@22@Z ENDP ; std::_Compressed_pair<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >,1>::_Compressed_pair<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >,1><std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec *,PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec *,PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@V?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
??$?0$$V@?$_Compressed_pair@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@V?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >,1>::_Compressed_pair<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >,1><>, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1515 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	mov	rax, rcx
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@V?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >,1>::_Compressed_pair<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Unfancy_maybe_null@I@std@@YAPEAIPEAI@Z
_TEXT	SEGMENT
_Ptr$ = 8
??$_Unfancy_maybe_null@I@std@@YAPEAIPEAI@Z PROC		; std::_Unfancy_maybe_null<unsigned int>, COMDAT

; 434  :     return _Ptr;

	mov	rax, rcx

; 435  : }

	ret	0
??$_Unfancy_maybe_null@I@std@@YAPEAIPEAI@Z ENDP		; std::_Unfancy_maybe_null<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@YAXPEAU?$vec@$02M$0A@@glm@@QEAU12@AEAV?$allocator@U?$vec@$02M$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_First$dead$ = 8
_Last$dead$ = 16
_Al$dead$ = 24
??$_Destroy_range@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@YAXPEAU?$vec@$02M$0A@@glm@@QEAU12@AEAV?$allocator@U?$vec@$02M$0A@@glm@@@0@@Z PROC ; std::_Destroy_range<std::allocator<glm::vec<3,float,0> > >, COMDAT

; 1083 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1084 :     using _Ty = typename _Alloc::value_type;
; 1085 :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1086 :         for (; _First != _Last; ++_First) {
; 1087 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1088 :         }
; 1089 :     }
; 1090 : }

	ret	0
??$_Destroy_range@V?$allocator@U?$vec@$02M$0A@@glm@@@std@@@std@@YAXPEAU?$vec@$02M$0A@@glm@@QEAU12@AEAV?$allocator@U?$vec@$02M$0A@@glm@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<glm::vec<3,float,0> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@VBVNode@@@std@@@std@@YAXPEAVBVNode@@QEAV1@AEAV?$allocator@VBVNode@@@0@@Z
_TEXT	SEGMENT
_First$dead$ = 8
_Last$dead$ = 16
_Al$dead$ = 24
??$_Destroy_range@V?$allocator@VBVNode@@@std@@@std@@YAXPEAVBVNode@@QEAV1@AEAV?$allocator@VBVNode@@@0@@Z PROC ; std::_Destroy_range<std::allocator<BVNode> >, COMDAT

; 1083 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1084 :     using _Ty = typename _Alloc::value_type;
; 1085 :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1086 :         for (; _First != _Last; ++_First) {
; 1087 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1088 :         }
; 1089 :     }
; 1090 : }

	ret	0
??$_Destroy_range@V?$allocator@VBVNode@@@std@@@std@@YAXPEAVBVNode@@QEAV1@AEAV?$allocator@VBVNode@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<BVNode> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAXPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z
_TEXT	SEGMENT
_First$dead$ = 8
_Last$dead$ = 16
_Al$dead$ = 24
??$_Destroy_range@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAXPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z PROC ; std::_Destroy_range<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >, COMDAT

; 1083 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1084 :     using _Ty = typename _Alloc::value_type;
; 1085 :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1086 :         for (; _First != _Last; ++_First) {
; 1087 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1088 :         }
; 1089 :     }
; 1090 : }

	ret	0
??$_Destroy_range@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAXPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@std@@QEAA@PEAVBVNode@@00@Z
_TEXT	SEGMENT
this$ = 8
_First$ = 16
_Last$ = 24
_End$ = 32
??0?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@std@@QEAA@PEAVBVNode@@00@Z PROC ; std::_Vector_val<std::_Simple_types<BVNode> >::_Vector_val<std::_Simple_types<BVNode> >, COMDAT

; 401  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

	mov	QWORD PTR [rcx], rdx
	mov	rax, rcx
	mov	QWORD PTR [rcx+8], r8
	mov	QWORD PTR [rcx+16], r9
	ret	0
??0?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@std@@QEAA@PEAVBVNode@@00@Z ENDP ; std::_Vector_val<std::_Simple_types<BVNode> >::_Vector_val<std::_Simple_types<BVNode> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<BVNode> >::_Vector_val<std::_Simple_types<BVNode> >, COMDAT

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	rax, rcx
	ret	0
??0?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<BVNode> >::_Vector_val<std::_Simple_types<BVNode> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??0?$allocator@VBVNode@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$allocator@VBVNode@@@std@@QEAA@XZ PROC		; std::allocator<BVNode>::allocator<BVNode>, COMDAT

; 958  :     constexpr allocator() noexcept {}

	mov	rax, rcx
	ret	0
??0?$allocator@VBVNode@@@std@@QEAA@XZ ENDP		; std::allocator<BVNode>::allocator<BVNode>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@00@Z
_TEXT	SEGMENT
this$ = 8
_First$ = 16
_Last$ = 24
_End$ = 32
??0?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@00@Z PROC ; std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >, COMDAT

; 401  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

	mov	QWORD PTR [rcx], rdx
	mov	rax, rcx
	mov	QWORD PTR [rcx+8], r8
	mov	QWORD PTR [rcx+16], r9
	ret	0
??0?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@00@Z ENDP ; std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >, COMDAT

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	rax, rcx
	ret	0
??0?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Orphan_range@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEBAXPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@0@Z
_TEXT	SEGMENT
this$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
?_Orphan_range@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEBAXPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@0@Z PROC ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Orphan_range, COMDAT

; 2177 :     _CONSTEXPR20 void _Orphan_range(pointer, pointer) const {}

	ret	0
?_Orphan_range@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEBAXPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@0@Z ENDP ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??0?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@QEAA@XZ PROC ; std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>, COMDAT

; 958  :     constexpr allocator() noexcept {}

	mov	rax, rcx
	ret	0
??0?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@QEAA@XZ ENDP ; std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAMAEBM@Z
_TEXT	SEGMENT
this$ = 8
<_Val_0>$ = 16
??$_Emplace_back_with_unused_capacity@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAMAEBM@Z PROC ; std::vector<float,std::allocator<float> >::_Emplace_back_with_unused_capacity<float const &>, COMDAT

; 790  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 791  :         auto& _My_data   = _Mypair._Myval2;
; 792  :         pointer& _Mylast = _My_data._Mylast;
; 793  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 794  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 795  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 796  :             _ASAN_VECTOR_MODIFY(1);
; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);
; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;

	mov	eax, DWORD PTR [rdx]
	mov	r8, QWORD PTR [rcx+8]
	mov	DWORD PTR [r8], eax
	mov	rax, QWORD PTR [rcx+8]

; 806  :         ++_Mylast;

	lea	rdx, QWORD PTR [rax+4]
	mov	QWORD PTR [rcx+8], rdx

; 807  : 
; 808  :         return _Result;
; 809  :     }

	ret	0
??$_Emplace_back_with_unused_capacity@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAAEAMAEBM@Z ENDP ; std::vector<float,std::allocator<float> >::_Emplace_back_with_unused_capacity<float const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAMAEBM@Z
_TEXT	SEGMENT
this$ = 80
_Whereptr$ = 88
<_Val_0>$ = 96
??$_Emplace_reallocate@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAMAEBM@Z PROC ; std::vector<float,std::allocator<float> >::_Emplace_reallocate<float const &>, COMDAT

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

$LN101:
	push	rbx
	push	rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);
; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR [rcx+8]
	mov	r15, rdx
	mov	rdx, QWORD PTR [rcx]
	mov	r14, r15
	sub	r14, rdx
	sub	rax, rdx
	sar	r14, 2

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

	mov	rbx, 4611686018427387903		; 3fffffffffffffffH
	sar	rax, 2
	mov	r12, r8
	mov	rdi, rcx
	cmp	rax, rbx
	je	$LN99@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rcx, QWORD PTR [rcx+16]
	sub	rcx, rdx
	mov	QWORD PTR [rsp+96], rbp
	sar	rcx, 2

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

	lea	rbp, QWORD PTR [rax+1]

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	rdx, rcx
	mov	QWORD PTR [rsp+104], rsi
	shr	rdx, 1
	mov	rax, rbx
	sub	rax, rdx
	cmp	rcx, rax
	ja	SHORT $LN13@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow
; 1968 :         }
; 1969 : 
; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	rbx, QWORD PTR [rdx+rcx]

; 1971 : 
; 1972 :         if (_Geometric < _Newsize) {

	cmp	rbx, rbp
	cmovb	rbx, rbp
$LN13@Emplace_re:

; 831  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	rdx, rbx
	call	?allocate@?$allocator@M@std@@QEAAPEAM_K@Z ; std::allocator<float>::allocate
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR [r12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 831  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	rsi, rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [rax+r14*4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	rcx, rax
	mov	r8, QWORD PTR [rdi+8]
	mov	rdx, QWORD PTR [rdi]
	lea	r14, QWORD PTR [rax+r14*4]
	cmp	r15, r8
	jne	SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	r8, rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

	jmp	SHORT $LN97@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	r8, r15
	sub	r8, rdx

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	call	memmove
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1932 :     const auto _ULast = _Get_unwrapped(_Last);

	mov	r8, QWORD PTR [rdi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	lea	rcx, QWORD PTR [r14+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	r8, r15

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rdx, r15
$LN97@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	call	memmove

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, rbx
	mov	r8, rbp
	mov	rdx, rsi
	mov	rcx, rdi
	call	?_Change_array@?$vector@MV?$allocator@M@std@@@std@@AEAAXQEAM_K1@Z ; std::vector<float,std::allocator<float> >::_Change_array

; 857  :         return _Newvec + _Whereoff;

	mov	rsi, QWORD PTR [rsp+104]
	mov	rax, r14
	mov	rbp, QWORD PTR [rsp+96]

; 858  :     }

	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rbx
	ret	0
$LN99@Emplace_re:

; 825  :             _Xlength();

	call	?_Xlength@?$vector@MV?$allocator@M@std@@@std@@CAXXZ ; std::vector<float,std::allocator<float> >::_Xlength
	int	3
$LN96@Emplace_re:
??$_Emplace_reallocate@AEBM@?$vector@MV?$allocator@M@std@@@std@@AEAAPEAMQEAMAEBM@Z ENDP ; std::vector<float,std::allocator<float> >::_Emplace_reallocate<float const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
;	COMDAT ??$forward@AEBVBVNode@@@std@@YAAEBVBVNode@@AEBV1@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEBVBVNode@@@std@@YAAEBVBVNode@@AEBV1@@Z PROC ; std::forward<BVNode const &>, COMDAT

; 1584 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, rcx

; 1585 : }

	ret	0
??$forward@AEBVBVNode@@@std@@YAAEBVBVNode@@AEBV1@@Z ENDP ; std::forward<BVNode const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAAEAVBVNode@@AEBV2@@Z
_TEXT	SEGMENT
this$ = 8
<_Val_0>$ = 16
??$_Emplace_back_with_unused_capacity@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAAEAVBVNode@@AEBV2@@Z PROC ; std::vector<BVNode,std::allocator<BVNode> >::_Emplace_back_with_unused_capacity<BVNode const &>, COMDAT

; 790  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 791  :         auto& _My_data   = _Mypair._Myval2;
; 792  :         pointer& _Mylast = _My_data._Mylast;
; 793  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 794  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 795  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 796  :             _ASAN_VECTOR_MODIFY(1);
; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rax, QWORD PTR [rcx+8]
	mov	r8, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 254  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	movups	xmm0, XMMWORD PTR [rdx]
	movups	XMMWORD PTR [rax], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rax+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [rax+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rax+48], xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 805  :         _Ty& _Result = *_Mylast;

	mov	rax, QWORD PTR [rcx+8]

; 806  :         ++_Mylast;

	lea	rcx, QWORD PTR [rax+64]
	mov	QWORD PTR [r8+8], rcx

; 807  : 
; 808  :         return _Result;
; 809  :     }

	ret	0
??$_Emplace_back_with_unused_capacity@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAAEAVBVNode@@AEBV2@@Z ENDP ; std::vector<BVNode,std::allocator<BVNode> >::_Emplace_back_with_unused_capacity<BVNode const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z
_TEXT	SEGMENT
this$ = 80
_Whereptr$ = 88
<_Val_0>$ = 96
??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z PROC ; std::vector<BVNode,std::allocator<BVNode> >::_Emplace_reallocate<BVNode const &>, COMDAT

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

$LN165:
	push	rbp
	push	rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	rax, QWORD PTR [rcx]
	mov	r14, rdx

; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rbp, QWORD PTR [rcx+8]
	mov	r12, r8
	sub	rbp, rax
	sub	r14, rax
	sar	rbp, 6

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

	mov	r8, 288230376151711743			; 03ffffffffffffffH
	mov	r15, rdx
	mov	rsi, rcx
	cmp	rbp, r8
	je	$LN163@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rcx, QWORD PTR [rcx+16]

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

	inc	rbp

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	sub	rcx, rax
	mov	QWORD PTR [rsp+96], rbx
	sar	rcx, 6

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	rax, r8
	mov	rdx, rcx
	mov	QWORD PTR [rsp+104], rdi
	shr	rdx, 1
	sub	rax, rdx
	cmp	rcx, rax
	jbe	SHORT $LN12@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow

	mov	rbx, -64				; ffffffffffffffc0H
	lea	rcx, QWORD PTR [rbx+39]
	jmp	SHORT $LN35@Emplace_re
$LN12@Emplace_re:

; 1968 :         }
; 1969 : 
; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	rax, QWORD PTR [rdx+rcx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 70   :         if (_Count > _Max_possible) {

	mov	rbx, rbp
	cmp	rax, rbp
	cmovae	rbx, rax
	cmp	rbx, r8
	ja	$LN146@Emplace_re

; 71   :             _Throw_bad_array_new_length(); // multiply overflow
; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

	shl	rbx, 6

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rbx, 4096				; 00001000H
	jb	SHORT $LN25@Emplace_re

; 139  :     const size_t _Block_size = _Non_user_size + _Bytes;

	lea	rcx, QWORD PTR [rbx+39]

; 140  :     if (_Block_size <= _Bytes) {

	cmp	rcx, rbx
	jbe	$LN146@Emplace_re
$LN35@Emplace_re:

; 87   :         return ::operator new(_Bytes);

	call	??2@YAPEAX_K@Z				; operator new

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	test	rax, rax
	je	$LN125@Emplace_re

; 146  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	lea	rdi, QWORD PTR [rax+39]
	and	rdi, -32				; ffffffffffffffe0H

; 147  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	QWORD PTR [rdi-8], rax

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	jmp	SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

	test	rbx, rbx
	je	SHORT $LN26@Emplace_re

; 87   :         return ::operator new(_Bytes);

	mov	rcx, rbx
	call	??2@YAPEAX_K@Z				; operator new
	mov	rdi, rax

; 245  :         return _Traits::_Allocate(_Bytes);

	jmp	SHORT $LN23@Emplace_re
$LN26@Emplace_re:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

	xor	edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	movups	xmm0, XMMWORD PTR [r12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	and	r14, -64				; ffffffffffffffc0H

; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	rcx, rdi
	add	r14, rdi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	movups	XMMWORD PTR [r14], xmm0
	movups	xmm1, XMMWORD PTR [r12+16]
	movups	XMMWORD PTR [r14+16], xmm1
	movups	xmm0, XMMWORD PTR [r12+32]
	movups	XMMWORD PTR [r14+32], xmm0
	movups	xmm1, XMMWORD PTR [r12+48]
	movups	XMMWORD PTR [r14+48], xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	r8, QWORD PTR [rsi+8]
	mov	rdx, QWORD PTR [rsi]
	cmp	r15, r8
	jne	SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	r8, rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

	jmp	SHORT $LN161@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	r8, r15
	sub	r8, rdx

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	call	memmove
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1932 :     const auto _ULast = _Get_unwrapped(_Last);

	mov	r8, QWORD PTR [rsi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	lea	rcx, QWORD PTR [r14+64]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	r8, r15

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rdx, r15
$LN161@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	call	memmove

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR [rsi]
	test	rcx, rcx
	je	SHORT $LN116@Emplace_re

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rdx, QWORD PTR [rsi+16]
	sub	rdx, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	and	rdx, -64				; ffffffffffffffc0H

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN128@Emplace_re

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	r8, QWORD PTR [rcx-8]
	add	rdx, 39					; 00000027H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	sub	rcx, r8

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	lea	rax, QWORD PTR [rcx-8]
	cmp	rax, 31
	ja	SHORT $LN125@Emplace_re

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rcx, r8
$LN128@Emplace_re:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
$LN116@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2029 :         _Myfirst = _Newvec;

	mov	QWORD PTR [rsi], rdi

; 2031 :         _Myend   = _Newvec + _Newcapacity;

	lea	rcx, QWORD PTR [rbx+rdi]
	mov	rbx, QWORD PTR [rsp+96]

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 857  :         return _Newvec + _Whereoff;

	mov	rax, r14

; 2030 :         _Mylast  = _Newvec + _Newsize;

	shl	rbp, 6
	add	rbp, rdi
	mov	rdi, QWORD PTR [rsp+104]
	mov	QWORD PTR [rsi+8], rbp

; 2031 :         _Myend   = _Newvec + _Newcapacity;

	mov	QWORD PTR [rsi+16], rcx

; 858  :     }

	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	pop	rsi
	pop	rbp
	ret	0
$LN125@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN163@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 825  :             _Xlength();

	call	?_Xlength@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@CAXXZ ; std::vector<BVNode,std::allocator<BVNode> >::_Xlength
	int	3
$LN146@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 141  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
	int	3
$LN160@Emplace_re:
??$_Emplace_reallocate@AEBVBVNode@@@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAPEAVBVNode@@QEAV2@AEBV2@@Z ENDP ; std::vector<BVNode,std::allocator<BVNode> >::_Emplace_reallocate<BVNode const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
;	COMDAT ??$forward@V?$allocator@VBVNode@@@std@@@std@@YA$$QEAV?$allocator@VBVNode@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@V?$allocator@VBVNode@@@std@@@std@@YA$$QEAV?$allocator@VBVNode@@@0@AEAV10@@Z PROC ; std::forward<std::allocator<BVNode> >, COMDAT

; 1584 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, rcx

; 1585 : }

	ret	0
??$forward@V?$allocator@VBVNode@@@std@@@std@@YA$$QEAV?$allocator@VBVNode@@@0@AEAV10@@Z ENDP ; std::forward<std::allocator<BVNode> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
;	COMDAT ??$forward@PEAVBVNode@@@std@@YA$$QEAPEAVBVNode@@AEAPEAV1@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@PEAVBVNode@@@std@@YA$$QEAPEAVBVNode@@AEAPEAV1@@Z PROC ; std::forward<BVNode *>, COMDAT

; 1584 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, rcx

; 1585 : }

	ret	0
??$forward@PEAVBVNode@@@std@@YA$$QEAPEAVBVNode@@AEAPEAV1@@Z ENDP ; std::forward<BVNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_Newsize$GSCopy$1$ = 32
this$ = 112
_Newsize$ = 120
_Val$dead$ = 128
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT

; 1511 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

$LN95:
	push	rbx
	push	rdi
	push	r14
	sub	rsp, 80					; 00000050H

; 1512 :         if (_Newsize > max_size()) {

	mov	rdi, 256204778801521550			; 038e38e38e38e38eH
	mov	QWORD PTR _Newsize$GSCopy$1$[rsp], rdx
	mov	r14, rdx
	mov	rbx, rcx
	cmp	rdx, rdi
	ja	$LN93@Resize_rea
	mov	QWORD PTR [rsp+128], rbp

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	rax, rdi
	mov	QWORD PTR [rsp+72], rsi

; 1514 :         }
; 1515 : 
; 1516 :         auto& _Al         = _Getal();
; 1517 :         auto& _My_data    = _Mypair._Myval2;
; 1518 :         pointer& _Myfirst = _My_data._Myfirst;
; 1519 :         pointer& _Mylast  = _My_data._Mylast;
; 1520 : 
; 1521 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rbp, -8198552921648689607		; 8e38e38e38e38e39H
	mov	rsi, QWORD PTR [rcx+8]
	sub	rsi, QWORD PTR [rcx]

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rcx, QWORD PTR [rcx+16]
	sub	rcx, QWORD PTR [rbx]
	sar	rcx, 3
	imul	rcx, rbp

; 1514 :         }
; 1515 : 
; 1516 :         auto& _Al         = _Getal();
; 1517 :         auto& _My_data    = _Mypair._Myval2;
; 1518 :         pointer& _Myfirst = _My_data._Myfirst;
; 1519 :         pointer& _Mylast  = _My_data._Mylast;
; 1520 : 
; 1521 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	sar	rsi, 3

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	rdx, rcx
	mov	QWORD PTR [rsp+48], r15
	shr	rdx, 1
	sub	rax, rdx

; 1514 :         }
; 1515 : 
; 1516 :         auto& _Al         = _Getal();
; 1517 :         auto& _My_data    = _Mypair._Myval2;
; 1518 :         pointer& _Myfirst = _My_data._Myfirst;
; 1519 :         pointer& _Mylast  = _My_data._Mylast;
; 1520 : 
; 1521 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	imul	rsi, rbp

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	cmp	rcx, rax
	ja	SHORT $LN11@Resize_rea

; 1967 :             return _Max; // geometric growth would overflow
; 1968 :         }
; 1969 : 
; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	rdi, QWORD PTR [rdx+rcx]

; 1971 : 
; 1972 :         if (_Geometric < _Newsize) {

	cmp	rdi, r14
	cmovb	rdi, r14
$LN11@Resize_rea:

; 1524 :         const pointer _Newvec         = _Al.allocate(_Newcapacity);

	mov	rdx, rdi
	call	?allocate@?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@QEAAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K@Z ; std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>::allocate

; 1525 :         const pointer _Appended_first = _Newvec + _Oldsize;
; 1526 :         pointer _Appended_last        = _Appended_first;
; 1527 : 
; 1528 :         _TRY_BEGIN
; 1529 :         if constexpr (is_same_v<_Ty2, _Ty>) {
; 1530 :             _Appended_last = _Uninitialized_fill_n(_Appended_first, _Newsize - _Oldsize, _Val, _Al);
; 1531 :         } else {
; 1532 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1533 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

	mov	rdx, r14
	lea	rcx, QWORD PTR [rsi+rsi*8]
	sub	rdx, rsi
	mov	r15, rax
	lea	rcx, QWORD PTR [rax+rcx*8]
	call	??$_Uninitialized_value_construct_n@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@_KAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >

; 1534 :         }
; 1535 : 
; 1536 :         if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 1537 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	rcx, QWORD PTR [rbx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1932 :     const auto _ULast = _Get_unwrapped(_Last);

	mov	r8, QWORD PTR [rbx+8]

; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	rcx, r8
	je	$LN17@Resize_rea
	mov	QWORD PTR [rsp+64], r12
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1524 :         const pointer _Newvec         = _Al.allocate(_Newcapacity);

	lea	rdx, QWORD PTR [r15+40]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	QWORD PTR [rsp+56], r13
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1524 :         const pointer _Newvec         = _Al.allocate(_Newcapacity);

	lea	r9, OFFSET FLAT:??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	lea	r13, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	lea	r10, OFFSET FLAT:??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	lea	r11, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	lea	rsi, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	lea	r12, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	lea	rbp, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	lea	r14, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	npad	15
$LL18@Resize_rea:
	mov	QWORD PTR [rdx-40], r9
	mov	QWORD PTR [rdx-32], r10
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1803 :         ++_Last;

	lea	rdx, QWORD PTR [rdx+72]
	movzx	eax, WORD PTR [rcx+16]
	mov	WORD PTR [rdx-96], ax
	movzx	eax, BYTE PTR [rcx+18]
	mov	BYTE PTR [rdx-94], al
	mov	QWORD PTR [rdx-112], r11
	mov	QWORD PTR [rdx-88], r12
	mov	QWORD PTR [rdx-80], r13
	mov	QWORD PTR [rdx-104], rsi
	movzx	eax, BYTE PTR [rcx+40]
	mov	BYTE PTR [rdx-72], al
	mov	QWORD PTR [rdx-64], rbp
	mov	QWORD PTR [rdx-56], r14
	movzx	eax, WORD PTR [rcx+64]

; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	rcx, 72					; 00000048H
	mov	WORD PTR [rdx-48], ax
	cmp	rcx, r8
	jne	SHORT $LL18@Resize_rea
	mov	r13, QWORD PTR [rsp+56]
	mov	rbp, -8198552921648689607		; 8e38e38e38e38e39H
	mov	r12, QWORD PTR [rsp+64]
	mov	rcx, QWORD PTR [rbx]
	mov	r14, QWORD PTR _Newsize$GSCopy$1$[rsp]
$LN17@Resize_rea:
	mov	rsi, QWORD PTR [rsp+72]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2023 :         if (_Myfirst) { // destroy and deallocate old array

	test	rcx, rcx
	je	SHORT $LN61@Resize_rea

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR [rbx+16]
	sub	rax, rcx
	sar	rax, 3
	imul	rax, rbp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	lea	rdx, QWORD PTR [rax+rax*8]
	shl	rdx, 3

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN73@Resize_rea

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rax, QWORD PTR [rcx-8]
	add	rdx, 39					; 00000027H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	sub	rcx, rax

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rcx, -8
	cmp	rcx, 31
	ja	SHORT $LN70@Resize_rea

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rcx, rax
$LN73@Resize_rea:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
$LN61@Resize_rea:
	mov	rbp, QWORD PTR [rsp+128]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2030 :         _Mylast  = _Newvec + _Newsize;

	lea	rax, QWORD PTR [r14+r14*8]
	lea	rcx, QWORD PTR [r15+rax*8]
	mov	QWORD PTR [rbx], r15
	mov	QWORD PTR [rbx+8], rcx

; 2031 :         _Myend   = _Newvec + _Newcapacity;

	lea	rax, QWORD PTR [rdi+rdi*8]
	lea	rcx, QWORD PTR [r15+rax*8]
	mov	r15, QWORD PTR [rsp+48]
	mov	QWORD PTR [rbx+16], rcx

; 1538 :         } else {
; 1539 :             _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 1540 :         }
; 1541 :         _CATCH_ALL
; 1542 :         _Destroy_range(_Appended_first, _Appended_last, _Al);
; 1543 :         _Al.deallocate(_Newvec, _Newcapacity);
; 1544 :         _RERAISE;
; 1545 :         _CATCH_END
; 1546 : 
; 1547 :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 1548 :     }

	add	rsp, 80					; 00000050H
	pop	r14
	pop	rdi
	pop	rbx
	ret	0
$LN70@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN93@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1513 :             _Xlength();

	call	?_Xlength@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@CAXXZ ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Xlength
	int	3
$LN91@Resize_rea:
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@_KAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Count$ = 24
_Al$dead$ = 32
??$_Uninitialized_value_construct_n@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@_KAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >, COMDAT

; 2026 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

$LN49:
	sub	rsp, 8

; 2027 :     // value-initialize _Count objects to raw _First, using _Al
; 2028 :     using _Ptrty = typename _Alloc::value_type*;
; 2029 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 2030 : #if _HAS_CXX20
; 2031 :         if (!_STD is_constant_evaluated())
; 2032 : #endif // _HAS_CXX20
; 2033 :         {
; 2034 :             auto _PFirst = _Unfancy(_First);
; 2035 :             _Zero_range(_PFirst, _PFirst + _Count);
; 2036 :             return _First + _Count;
; 2037 :         }
; 2038 :     }
; 2039 : 
; 2040 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 2041 :     for (; 0 < _Count; --_Count) {

	test	rdx, rdx
	je	$LN44@Uninitiali
	mov	QWORD PTR [rsp+16], rbx
	lea	rax, QWORD PTR [rcx+56]
	mov	QWORD PTR [rsp+24], rsi
	lea	r9, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rsp], rdi
	lea	r10, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	lea	rdi, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	xor	r8d, r8d
	lea	r11, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	lea	rbx, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	lea	rsi, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	npad	4
$LL4@Uninitiali:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	mov	QWORD PTR [rcx+8], r8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1803 :         ++_Last;

	lea	rax, QWORD PTR [rax+72]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	mov	QWORD PTR [rcx+16], r8
	mov	QWORD PTR [rcx+24], r8
	mov	QWORD PTR [rcx+32], r8
	mov	QWORD PTR [rcx+40], r8
	mov	QWORD PTR [rcx+48], r8
	mov	QWORD PTR [rcx+56], r8
	mov	QWORD PTR [rcx+64], r8
	mov	QWORD PTR [rcx], r9
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1803 :         ++_Last;

	add	rcx, 72					; 00000048H
	mov	QWORD PTR [rax-120], r10
	mov	QWORD PTR [rax-104], r11
	mov	QWORD PTR [rax-96], rbx
	mov	QWORD PTR [rax-80], rdi
	mov	QWORD PTR [rax-72], rsi

; 2027 :     // value-initialize _Count objects to raw _First, using _Al
; 2028 :     using _Ptrty = typename _Alloc::value_type*;
; 2029 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 2030 : #if _HAS_CXX20
; 2031 :         if (!_STD is_constant_evaluated())
; 2032 : #endif // _HAS_CXX20
; 2033 :         {
; 2034 :             auto _PFirst = _Unfancy(_First);
; 2035 :             _Zero_range(_PFirst, _PFirst + _Count);
; 2036 :             return _First + _Count;
; 2037 :         }
; 2038 :     }
; 2039 : 
; 2040 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 2041 :     for (; 0 < _Count; --_Count) {

	sub	rdx, 1
	jne	SHORT $LL4@Uninitiali
	mov	rdi, QWORD PTR [rsp]
	mov	rsi, QWORD PTR [rsp+24]
	mov	rbx, QWORD PTR [rsp+16]
$LN44@Uninitiali:

; 2042 :         _Backout._Emplace_back();
; 2043 :     }
; 2044 : 
; 2045 :     return _Backout._Release();
; 2046 : }

	mov	rax, rcx
	add	rsp, 8
	ret	0
??$_Uninitialized_value_construct_n@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@_KAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
;	COMDAT ??$forward@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YA$$QEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YA$$QEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@AEAV10@@Z PROC ; std::forward<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >, COMDAT

; 1584 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, rcx

; 1585 : }

	ret	0
??$forward@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YA$$QEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@AEAV10@@Z ENDP ; std::forward<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
;	COMDAT ??$forward@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@YA$$QEAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@AEAPEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@YA$$QEAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@AEAPEAU12@@Z PROC ; std::forward<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec *>, COMDAT

; 1584 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, rcx

; 1585 : }

	ret	0
??$forward@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@YA$$QEAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@AEAPEAU12@@Z ENDP ; std::forward<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 8
classSize$dead$ = 16
?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAX_K@Z PROC ; std::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::__autoclassinit2, COMDAT
	xorps	xmm0, xmm0
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	mov	QWORD PTR [rcx+16], rax
	ret	0
?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAX_K@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@XZ
_TEXT	SEGMENT
this$ = 8
?_Release@?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Release, COMDAT

; 1807 :         _First = _Last;

	mov	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR [rcx], rax

; 1808 :         return _Last;
; 1809 :     }

	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::~_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >, COMDAT

; 1797 :         _Destroy_range(_First, _Last, _Al);
; 1798 :     }

	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::~_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@1@@Z
_TEXT	SEGMENT
this$ = 8
_Dest$ = 16
_Al_$ = 24
??0?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >, COMDAT

; 1791 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	QWORD PTR [rcx], rdx
	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], r8
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAA@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Orphan_range@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEBAXPEAVBVNode@@0@Z
_TEXT	SEGMENT
this$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
?_Orphan_range@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEBAXPEAVBVNode@@0@Z PROC ; std::vector<BVNode,std::allocator<BVNode> >::_Orphan_range, COMDAT

; 2177 :     _CONSTEXPR20 void _Orphan_range(pointer, pointer) const {}

	ret	0
?_Orphan_range@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEBAXPEAVBVNode@@0@Z ENDP ; std::vector<BVNode,std::allocator<BVNode> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@CAXXZ PROC ; std::vector<BVNode,std::allocator<BVNode> >::_Xlength, COMDAT

; 2137 :     [[noreturn]] static void _Xlength() {

$LN4:
	sub	rsp, 40					; 00000028H

; 2138 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN3@Xlength:
?_Xlength@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@CAXXZ ENDP ; std::vector<BVNode,std::allocator<BVNode> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Change_array@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAXQEAVBVNode@@_K1@Z
_TEXT	SEGMENT
this$ = 48
_Newvec$ = 56
_Newsize$ = 64
_Newcapacity$ = 72
?_Change_array@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAXQEAVBVNode@@_K1@Z PROC ; std::vector<BVNode,std::allocator<BVNode> >::_Change_array, COMDAT

; 2013 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN30:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, rcx
	mov	rbx, r9

; 2014 :         // orphan all iterators, discard old array, acquire new array
; 2015 :         auto& _Al         = _Getal();
; 2016 :         auto& _My_data    = _Mypair._Myval2;
; 2017 :         pointer& _Myfirst = _My_data._Myfirst;
; 2018 :         pointer& _Mylast  = _My_data._Mylast;
; 2019 :         pointer& _Myend   = _My_data._Myend;
; 2020 : 
; 2021 :         _My_data._Orphan_all();
; 2022 : 
; 2023 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR [rcx]
	mov	rdi, r8
	mov	rbp, rdx
	test	rcx, rcx
	je	SHORT $LN8@Change_arr

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rdx, QWORD PTR [rsi+16]
	sub	rdx, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	and	rdx, -64				; ffffffffffffffc0H

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN20@Change_arr

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	r8, QWORD PTR [rcx-8]
	add	rdx, 39					; 00000027H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	sub	rcx, r8

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	lea	rax, QWORD PTR [rcx-8]
	cmp	rax, 31
	ja	SHORT $LN17@Change_arr

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rcx, r8
$LN20@Change_arr:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
$LN8@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2029 :         _Myfirst = _Newvec;

	mov	QWORD PTR [rsi], rbp

; 2030 :         _Mylast  = _Newvec + _Newsize;

	shl	rdi, 6
	add	rdi, rbp

; 2031 :         _Myend   = _Newvec + _Newcapacity;

	shl	rbx, 6
	add	rbx, rbp
	mov	QWORD PTR [rsi+8], rdi

; 2033 :     }

	mov	rbp, QWORD PTR [rsp+64]
	mov	QWORD PTR [rsi+16], rbx
	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN17@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN27@Change_arr:
?_Change_array@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEAAXQEAVBVNode@@_K1@Z ENDP ; std::vector<BVNode,std::allocator<BVNode> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Calculate_growth@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
this$ = 8
_Newsize$ = 16
?_Calculate_growth@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEBA_K_K@Z PROC ; std::vector<BVNode,std::allocator<BVNode> >::_Calculate_growth, COMDAT

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	r8, QWORD PTR [rcx+16]

; 1962 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1963 :         const size_type _Oldcapacity = capacity();
; 1964 :         const auto _Max              = max_size();
; 1965 : 
; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	rax, 288230376151711743			; 03ffffffffffffffH

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	sub	r8, QWORD PTR [rcx]

; 1962 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1963 :         const size_type _Oldcapacity = capacity();
; 1964 :         const auto _Max              = max_size();
; 1965 : 
; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	rcx, rax

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	sar	r8, 6

; 1962 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1963 :         const size_type _Oldcapacity = capacity();
; 1964 :         const auto _Max              = max_size();
; 1965 : 
; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	r9, r8
	shr	r9, 1
	sub	rcx, r9
	cmp	r8, rcx
	ja	SHORT $LN1@Calculate_

; 1967 :             return _Max; // geometric growth would overflow
; 1968 :         }
; 1969 : 
; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	rax, QWORD PTR [r9+r8]

; 1971 : 
; 1972 :         if (_Geometric < _Newsize) {

	cmp	rax, rdx
	cmovb	rax, rdx
$LN1@Calculate_:

; 1973 :             return _Newsize; // geometric growth would be insufficient
; 1974 :         }
; 1975 : 
; 1976 :         return _Geometric; // geometric growth is sufficient
; 1977 :     }

	ret	0
?_Calculate_growth@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<BVNode,std::allocator<BVNode> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?max_size@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 8
?max_size@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEBA_KXZ PROC ; std::vector<BVNode,std::allocator<BVNode> >::max_size, COMDAT

; 1873 :         return (_STD min)(

	mov	rax, 288230376151711743			; 03ffffffffffffffH

; 1874 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1875 :     }

	ret	0
?max_size@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<BVNode,std::allocator<BVNode> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ?allocate@?$allocator@VBVNode@@@std@@QEAAPEAVBVNode@@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Count$ = 56
?allocate@?$allocator@VBVNode@@@std@@QEAAPEAVBVNode@@_K@Z PROC ; std::allocator<BVNode>::allocate, COMDAT

; 972  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN32:
	sub	rsp, 40					; 00000028H

; 70   :         if (_Count > _Max_possible) {

	mov	rax, 288230376151711743			; 03ffffffffffffffH
	cmp	rdx, rax
	ja	SHORT $LN28@allocate

; 71   :             _Throw_bad_array_new_length(); // multiply overflow
; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

	shl	rdx, 6

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN9@allocate

; 139  :     const size_t _Block_size = _Non_user_size + _Bytes;

	lea	rcx, QWORD PTR [rdx+39]

; 140  :     if (_Block_size <= _Bytes) {

	cmp	rcx, rdx
	jbe	SHORT $LN28@allocate

; 87   :         return ::operator new(_Bytes);

	call	??2@YAPEAX_K@Z				; operator new
	mov	rcx, rax

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	test	rax, rax
	je	SHORT $LN18@allocate

; 146  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	add	rax, 39					; 00000027H
	and	rax, -32				; ffffffffffffffe0H

; 147  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	QWORD PTR [rax-8], rcx

; 973  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 974  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 975  :     }

	add	rsp, 40					; 00000028H
	ret	0
$LN18@allocate:

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN9@allocate:

; 244  :     if (_Bytes != 0) {

	test	rdx, rdx
	je	SHORT $LN10@allocate

; 87   :         return ::operator new(_Bytes);

	mov	rcx, rdx

; 973  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 974  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 975  :     }

	add	rsp, 40					; 00000028H

; 87   :         return ::operator new(_Bytes);

	jmp	??2@YAPEAX_K@Z				; operator new
$LN10@allocate:

; 248  :     return nullptr;

	xor	eax, eax

; 973  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 974  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 975  :     }

	add	rsp, 40					; 00000028H
	ret	0
$LN28@allocate:

; 141  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
	int	3
$LN30@allocate:
?allocate@?$allocator@VBVNode@@@std@@QEAAPEAVBVNode@@_K@Z ENDP ; std::allocator<BVNode>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Xlength@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@CAXXZ PROC ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Xlength, COMDAT

; 2137 :     [[noreturn]] static void _Xlength() {

$LN4:
	sub	rsp, 40					; 00000028H

; 2138 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
	int	3
$LN3@Xlength:
?_Xlength@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@CAXXZ ENDP ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Change_array@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAXQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K1@Z
_TEXT	SEGMENT
this$ = 48
_Newvec$ = 56
_Newsize$ = 64
_Newcapacity$ = 72
?_Change_array@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAXQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K1@Z PROC ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Change_array, COMDAT

; 2013 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN30:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rsi, r9

; 2014 :         // orphan all iterators, discard old array, acquire new array
; 2015 :         auto& _Al         = _Getal();
; 2016 :         auto& _My_data    = _Mypair._Myval2;
; 2017 :         pointer& _Myfirst = _My_data._Myfirst;
; 2018 :         pointer& _Mylast  = _My_data._Mylast;
; 2019 :         pointer& _Myend   = _My_data._Myend;
; 2020 : 
; 2021 :         _My_data._Orphan_all();
; 2022 : 
; 2023 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR [rcx]
	mov	r14, r8
	mov	rdi, rdx
	test	rcx, rcx
	je	SHORT $LN8@Change_arr

; 2024 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2025 :             _ASAN_VECTOR_REMOVE;
; 2026 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR [rbx+16]
	mov	rdx, -8198552921648689607		; 8e38e38e38e38e39H
	sub	rax, rcx
	sar	rax, 3
	imul	rax, rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	lea	rdx, QWORD PTR [rax+rax*8]
	shl	rdx, 3

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN20@Change_arr

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	r8, QWORD PTR [rcx-8]
	add	rdx, 39					; 00000027H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	sub	rcx, r8

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	lea	rax, QWORD PTR [rcx-8]
	cmp	rax, 31
	ja	SHORT $LN17@Change_arr

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rcx, r8
$LN20@Change_arr:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
$LN8@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2029 :         _Myfirst = _Newvec;

	mov	QWORD PTR [rbx], rdi

; 2030 :         _Mylast  = _Newvec + _Newsize;

	lea	rax, QWORD PTR [r14+r14*8]
	lea	rcx, QWORD PTR [rdi+rax*8]
	mov	QWORD PTR [rbx+8], rcx

; 2031 :         _Myend   = _Newvec + _Newcapacity;

	lea	rax, QWORD PTR [rsi+rsi*8]

; 2033 :     }

	mov	rsi, QWORD PTR [rsp+64]
	lea	rcx, QWORD PTR [rdi+rax*8]
	mov	rdi, QWORD PTR [rsp+72]
	mov	QWORD PTR [rbx+16], rcx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
$LN17@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN27@Change_arr:
?_Change_array@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEAAXQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K1@Z ENDP ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Calculate_growth@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
this$ = 8
_Newsize$ = 16
?_Calculate_growth@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEBA_K_K@Z PROC ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Calculate_growth, COMDAT

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	r8, QWORD PTR [rcx+16]
	mov	rax, -8198552921648689607		; 8e38e38e38e38e39H
	sub	r8, QWORD PTR [rcx]
	sar	r8, 3
	imul	r8, rax

; 1962 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1963 :         const size_type _Oldcapacity = capacity();
; 1964 :         const auto _Max              = max_size();
; 1965 : 
; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	rax, 256204778801521550			; 038e38e38e38e38eH
	mov	r9, r8
	mov	rcx, rax
	shr	r9, 1
	sub	rcx, r9
	cmp	r8, rcx
	ja	SHORT $LN1@Calculate_

; 1967 :             return _Max; // geometric growth would overflow
; 1968 :         }
; 1969 : 
; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	rax, QWORD PTR [r9+r8]

; 1971 : 
; 1972 :         if (_Geometric < _Newsize) {

	cmp	rax, rdx
	cmovb	rax, rdx
$LN1@Calculate_:

; 1973 :             return _Newsize; // geometric growth would be insufficient
; 1974 :         }
; 1975 : 
; 1976 :         return _Geometric; // geometric growth is sufficient
; 1977 :     }

	ret	0
?_Calculate_growth@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?max_size@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 8
?max_size@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEBA_KXZ PROC ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::max_size, COMDAT

; 1873 :         return (_STD min)(

	mov	rax, 256204778801521550			; 038e38e38e38e38eH

; 1874 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1875 :     }

	ret	0
?max_size@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ?allocate@?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@QEAAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Count$ = 56
?allocate@?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@QEAAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K@Z PROC ; std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>::allocate, COMDAT

; 972  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN32:
	sub	rsp, 40					; 00000028H

; 70   :         if (_Count > _Max_possible) {

	mov	rax, 256204778801521550			; 038e38e38e38e38eH
	cmp	rdx, rax
	ja	SHORT $LN28@allocate

; 71   :             _Throw_bad_array_new_length(); // multiply overflow
; 72   :         }
; 73   :     }
; 74   : 
; 75   :     return _Count * _Ty_size;

	lea	rax, QWORD PTR [rdx+rdx*8]
	lea	rcx, QWORD PTR [rax*8]

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rcx, 4096				; 00001000H
	jb	SHORT $LN9@allocate

; 139  :     const size_t _Block_size = _Non_user_size + _Bytes;

	lea	rax, QWORD PTR [rcx+39]

; 140  :     if (_Block_size <= _Bytes) {

	cmp	rax, rcx
	jbe	SHORT $LN28@allocate

; 87   :         return ::operator new(_Bytes);

	mov	rcx, rax
	call	??2@YAPEAX_K@Z				; operator new
	mov	rcx, rax

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	test	rax, rax
	je	SHORT $LN18@allocate

; 146  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	add	rax, 39					; 00000027H
	and	rax, -32				; ffffffffffffffe0H

; 147  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	QWORD PTR [rax-8], rcx

; 973  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 974  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 975  :     }

	add	rsp, 40					; 00000028H
	ret	0
$LN18@allocate:

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN9@allocate:

; 244  :     if (_Bytes != 0) {

	test	rcx, rcx
	je	SHORT $LN10@allocate

; 973  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 974  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 975  :     }

	add	rsp, 40					; 00000028H

; 87   :         return ::operator new(_Bytes);

	jmp	??2@YAPEAX_K@Z				; operator new
$LN10@allocate:

; 248  :     return nullptr;

	xor	eax, eax

; 973  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 974  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 975  :     }

	add	rsp, 40					; 00000028H
	ret	0
$LN28@allocate:

; 141  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
	int	3
$LN30@allocate:
?allocate@?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@QEAAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@_K@Z ENDP ; std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Getal@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEBAAEBV?$allocator@VBVNode@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEBAAEBV?$allocator@VBVNode@@@2@XZ PROC ; std::vector<BVNode,std::allocator<BVNode> >::_Getal, COMDAT

; 2185 :         return _Mypair._Get_first();

	mov	rax, rcx

; 2186 :     }

	ret	0
?_Getal@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@AEBAAEBV?$allocator@VBVNode@@@2@XZ ENDP ; std::vector<BVNode,std::allocator<BVNode> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?capacity@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?capacity@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEBA_KXZ PROC ; std::vector<BVNode,std::allocator<BVNode> >::capacity, COMDAT

; 1878 :         auto& _My_data = _Mypair._Myval2;
; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR [rcx+16]
	sub	rax, QWORD PTR [rcx]
	sar	rax, 6

; 1880 :     }

	ret	0
?capacity@?$vector@VBVNode@@V?$allocator@VBVNode@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<BVNode,std::allocator<BVNode> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@VBVNode@@@std@@@std@@SA_KAEBV?$allocator@VBVNode@@@2@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
?max_size@?$_Default_allocator_traits@V?$allocator@VBVNode@@@std@@@std@@SA_KAEBV?$allocator@VBVNode@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<BVNode> >::max_size, COMDAT

; 733  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 288230376151711743			; 03ffffffffffffffH

; 734  :     }

	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@VBVNode@@@std@@@std@@SA_KAEBV?$allocator@VBVNode@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<BVNode> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Getal@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEBAAEBV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEBAAEBV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@2@XZ PROC ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Getal, COMDAT

; 2185 :         return _Mypair._Get_first();

	mov	rax, rcx

; 2186 :     }

	ret	0
?_Getal@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@AEBAAEBV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@2@XZ ENDP ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?capacity@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?capacity@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEBA_KXZ PROC ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::capacity, COMDAT

; 1878 :         auto& _My_data = _Mypair._Myval2;
; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR [rcx+16]
	sub	rax, QWORD PTR [rcx]
	mov	rcx, -8198552921648689607		; 8e38e38e38e38e39H
	sar	rax, 3
	imul	rax, rcx

; 1880 :     }

	ret	0
?capacity@?$vector@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@SA_KAEBV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@2@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
?max_size@?$_Default_allocator_traits@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@SA_KAEBV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::max_size, COMDAT

; 733  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 256204778801521550			; 038e38e38e38e38eH

; 734  :     }

	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@SA_KAEBV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@VBVNode@@@std@@V?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@2@$00@std@@QEBAAEBV?$allocator@VBVNode@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@V?$allocator@VBVNode@@@std@@V?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@2@$00@std@@QEBAAEBV?$allocator@VBVNode@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<BVNode>,std::_Vector_val<std::_Simple_types<BVNode> >,1>::_Get_first, COMDAT

; 1527 :         return *this;

	mov	rax, rcx

; 1528 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@VBVNode@@@std@@V?$_Vector_val@U?$_Simple_types@VBVNode@@@std@@@2@$00@std@@QEBAAEBV?$allocator@VBVNode@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<BVNode>,std::_Vector_val<std::_Simple_types<BVNode> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@V?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@2@$00@std@@QEBAAEBV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@V?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@2@$00@std@@QEBAAEBV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >,1>::_Get_first, COMDAT

; 1527 :         return *this;

	mov	rax, rcx

; 1528 :     }

	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@V?$_Vector_val@U?$_Simple_types@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@2@$00@std@@QEBAAEBV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>,std::_Vector_val<std::_Simple_types<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Construct_in_place@MAEBM@std@@YAXAEAMAEBM@Z
_TEXT	SEGMENT
_Obj$ = 8
<_Args_0>$ = 16
??$_Construct_in_place@MAEBM@std@@YAXAEAMAEBM@Z PROC	; std::_Construct_in_place<float,float const &>, COMDAT

; 248  : #if _HAS_CXX20
; 249  :     if (_STD is_constant_evaluated()) {
; 250  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 251  :     } else
; 252  : #endif // _HAS_CXX20
; 253  :     {
; 254  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 255  :     }
; 256  : }

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax
	ret	0
??$_Construct_in_place@MAEBM@std@@YAXAEAMAEBM@Z ENDP	; std::_Construct_in_place<float,float const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$construct@MAEBM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAEAV?$allocator@M@1@QEAMAEBM@Z
_TEXT	SEGMENT
__formal$dead$ = 8
_Ptr$ = 16
<_Args_0>$ = 24
??$construct@MAEBM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAEAV?$allocator@M@1@QEAMAEBM@Z PROC ; std::_Default_allocator_traits<std::allocator<float> >::construct<float,float const &>, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR [r8]
	mov	DWORD PTR [rdx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 721  :     }

	ret	0
??$construct@MAEBM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAEAV?$allocator@M@1@QEAMAEBM@Z ENDP ; std::_Default_allocator_traits<std::allocator<float> >::construct<float,float const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Construct_in_place@VBVNode@@AEBV1@@std@@YAXAEAVBVNode@@AEBV1@@Z
_TEXT	SEGMENT
_Obj$ = 8
<_Args_0>$ = 16
??$_Construct_in_place@VBVNode@@AEBV1@@std@@YAXAEAVBVNode@@AEBV1@@Z PROC ; std::_Construct_in_place<BVNode,BVNode const &>, COMDAT

; 248  : #if _HAS_CXX20
; 249  :     if (_STD is_constant_evaluated()) {
; 250  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 251  :     } else
; 252  : #endif // _HAS_CXX20
; 253  :     {
; 254  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	movaps	xmm0, XMMWORD PTR [rdx]
	movups	XMMWORD PTR [rcx], xmm0
	movaps	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movaps	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [rcx+32], xmm0
	movaps	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx+48], xmm1

; 255  :     }
; 256  : }

	ret	0
??$_Construct_in_place@VBVNode@@AEBV1@@std@@YAXAEAVBVNode@@AEBV1@@Z ENDP ; std::_Construct_in_place<BVNode,BVNode const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Unfancy@VBVNode@@@std@@YAPEAVBVNode@@PEAV1@@Z
_TEXT	SEGMENT
_Ptr$ = 8
??$_Unfancy@VBVNode@@@std@@YAPEAVBVNode@@PEAV1@@Z PROC	; std::_Unfancy<BVNode>, COMDAT

; 37   :     return _Ptr;

	mov	rax, rcx

; 38   : }

	ret	0
??$_Unfancy@VBVNode@@@std@@YAPEAVBVNode@@PEAV1@@Z ENDP	; std::_Unfancy<BVNode>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$construct@VBVNode@@AEBV1@@?$_Default_allocator_traits@V?$allocator@VBVNode@@@std@@@std@@SAXAEAV?$allocator@VBVNode@@@1@QEAVBVNode@@AEBV3@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
_Ptr$ = 16
<_Args_0>$ = 24
??$construct@VBVNode@@AEBV1@@?$_Default_allocator_traits@V?$allocator@VBVNode@@@std@@@std@@SAXAEAV?$allocator@VBVNode@@@1@QEAVBVNode@@AEBV3@@Z PROC ; std::_Default_allocator_traits<std::allocator<BVNode> >::construct<BVNode,BVNode const &>, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8+32]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+48]
	movups	XMMWORD PTR [rdx+48], xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 721  :     }

	ret	0
??$construct@VBVNode@@AEBV1@@?$_Default_allocator_traits@V?$allocator@VBVNode@@@std@@@std@@SAXAEAV?$allocator@VBVNode@@@1@QEAVBVNode@@AEBV3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<BVNode> >::construct<BVNode,BVNode const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAVBVNode@@@std@@YA?A_TAEBQEAVBVNode@@@Z
_TEXT	SEGMENT
_It$ = 8
??$_Get_unwrapped@AEBQEAVBVNode@@@std@@YA?A_TAEBQEAVBVNode@@@Z PROC ; std::_Get_unwrapped<BVNode * const &>, COMDAT

; 1156 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1157 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1158 :         return _It + 0;

	mov	rax, QWORD PTR [rcx]

; 1159 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1160 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1161 :     } else {
; 1162 :         return static_cast<_Iter&&>(_It);
; 1163 :     }
; 1164 : }

	ret	0
??$_Get_unwrapped@AEBQEAVBVNode@@@std@@YA?A_TAEBQEAVBVNode@@@Z ENDP ; std::_Get_unwrapped<BVNode * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAVBVNode@@V?$allocator@VBVNode@@@std@@@std@@YAPEAVBVNode@@QEAV1@0PEAV1@AEAV?$allocator@VBVNode@@@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
_Al$dead$ = 72
??$_Uninitialized_move@PEAVBVNode@@V?$allocator@VBVNode@@@std@@@std@@YAPEAVBVNode@@QEAV1@0PEAV1@AEAV?$allocator@VBVNode@@@0@@Z PROC ; std::_Uninitialized_move<BVNode *,std::allocator<BVNode> >, COMDAT

; 1927 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN27:
	mov	QWORD PTR [rsp+32], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, r8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	rbx, rcx

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rdx, rcx
	mov	r8, rbx
	mov	rcx, rdi
	call	memmove
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1940 :             return _Dest + (_ULast - _UFirst);

	and	rbx, -64				; ffffffffffffffc0H
	lea	rax, QWORD PTR [rdi+rbx]

; 1941 :         }
; 1942 :     }
; 1943 : 
; 1944 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {
; 1946 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1947 :     }
; 1948 : 
; 1949 :     return _Backout._Release();
; 1950 : }

	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Uninitialized_move@PEAVBVNode@@V?$allocator@VBVNode@@@std@@@std@@YAPEAVBVNode@@QEAV1@0PEAV1@AEAV?$allocator@VBVNode@@@0@@Z ENDP ; std::_Uninitialized_move<BVNode *,std::allocator<BVNode> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@YA?A_TAEBQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@Z
_TEXT	SEGMENT
_It$ = 8
??$_Get_unwrapped@AEBQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@YA?A_TAEBQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@Z PROC ; std::_Get_unwrapped<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec * const &>, COMDAT

; 1156 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1157 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1158 :         return _It + 0;

	mov	rax, QWORD PTR [rcx]

; 1159 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1160 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1161 :     } else {
; 1162 :         return static_cast<_Iter&&>(_It);
; 1163 :     }
; 1164 : }

	ret	0
??$_Get_unwrapped@AEBQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@YA?A_TAEBQEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@Z ENDP ; std::_Get_unwrapped<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@0PEAU12@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
_Al$dead$ = 72
??$_Uninitialized_move@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@0PEAU12@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z PROC ; std::_Uninitialized_move<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec *,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >, COMDAT

; 1927 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN49:
	mov	rax, rsp
	sub	rsp, 40					; 00000028H
	mov	r9, r8

; 1928 :     // move [_First, _Last) to raw _Dest, using _Al
; 1929 :     // note: only called internally from elsewhere in the STL
; 1930 :     using _Ptrval     = typename _Alloc::value_type*;
; 1931 :     auto _UFirst      = _Get_unwrapped(_First);
; 1932 :     const auto _ULast = _Get_unwrapped(_Last);
; 1933 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1934 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1935 : #if _HAS_CXX20
; 1936 :         if (!_STD is_constant_evaluated())
; 1937 : #endif // _HAS_CXX20
; 1938 :         {
; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1940 :             return _Dest + (_ULast - _UFirst);
; 1941 :         }
; 1942 :     }
; 1943 : 
; 1944 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	rcx, rdx
	je	$LN44@Uninitiali
	mov	QWORD PTR [rax+8], rbx

; 1791 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	add	r8, 32					; 00000020H

; 1928 :     // move [_First, _Last) to raw _Dest, using _Al
; 1929 :     // note: only called internally from elsewhere in the STL
; 1930 :     using _Ptrval     = typename _Alloc::value_type*;
; 1931 :     auto _UFirst      = _Get_unwrapped(_First);
; 1932 :     const auto _ULast = _Get_unwrapped(_Last);
; 1933 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1934 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1935 : #if _HAS_CXX20
; 1936 :         if (!_STD is_constant_evaluated())
; 1937 : #endif // _HAS_CXX20
; 1938 :         {
; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1940 :             return _Dest + (_ULast - _UFirst);
; 1941 :         }
; 1942 :     }
; 1943 : 
; 1944 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	QWORD PTR [rax+16], rbp

; 1791 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	sub	rcx, r9

; 1928 :     // move [_First, _Last) to raw _Dest, using _Al
; 1929 :     // note: only called internally from elsewhere in the STL
; 1930 :     using _Ptrval     = typename _Alloc::value_type*;
; 1931 :     auto _UFirst      = _Get_unwrapped(_First);
; 1932 :     const auto _ULast = _Get_unwrapped(_Last);
; 1933 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1934 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1935 : #if _HAS_CXX20
; 1936 :         if (!_STD is_constant_evaluated())
; 1937 : #endif // _HAS_CXX20
; 1938 :         {
; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1940 :             return _Dest + (_ULast - _UFirst);
; 1941 :         }
; 1942 :     }
; 1943 : 
; 1944 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	QWORD PTR [rax+24], rsi

; 1791 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	lea	rbp, OFFSET FLAT:??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@

; 1928 :     // move [_First, _Last) to raw _Dest, using _Al
; 1929 :     // note: only called internally from elsewhere in the STL
; 1930 :     using _Ptrval     = typename _Alloc::value_type*;
; 1931 :     auto _UFirst      = _Get_unwrapped(_First);
; 1932 :     const auto _ULast = _Get_unwrapped(_Last);
; 1933 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1934 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1935 : #if _HAS_CXX20
; 1936 :         if (!_STD is_constant_evaluated())
; 1937 : #endif // _HAS_CXX20
; 1938 :         {
; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1940 :             return _Dest + (_ULast - _UFirst);
; 1941 :         }
; 1942 :     }
; 1943 : 
; 1944 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	QWORD PTR [rax-8], rdi

; 1791 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	lea	rsi, OFFSET FLAT:??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@

; 1928 :     // move [_First, _Last) to raw _Dest, using _Al
; 1929 :     // note: only called internally from elsewhere in the STL
; 1930 :     using _Ptrval     = typename _Alloc::value_type*;
; 1931 :     auto _UFirst      = _Get_unwrapped(_First);
; 1932 :     const auto _ULast = _Get_unwrapped(_Last);
; 1933 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1934 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1935 : #if _HAS_CXX20
; 1936 :         if (!_STD is_constant_evaluated())
; 1937 : #endif // _HAS_CXX20
; 1938 :         {
; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1940 :             return _Dest + (_ULast - _UFirst);
; 1941 :         }
; 1942 :     }
; 1943 : 
; 1944 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	QWORD PTR [rax-16], r12

; 1791 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	lea	r12, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@

; 1928 :     // move [_First, _Last) to raw _Dest, using _Al
; 1929 :     // note: only called internally from elsewhere in the STL
; 1930 :     using _Ptrval     = typename _Alloc::value_type*;
; 1931 :     auto _UFirst      = _Get_unwrapped(_First);
; 1932 :     const auto _ULast = _Get_unwrapped(_Last);
; 1933 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1934 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1935 : #if _HAS_CXX20
; 1936 :         if (!_STD is_constant_evaluated())
; 1937 : #endif // _HAS_CXX20
; 1938 :         {
; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1940 :             return _Dest + (_ULast - _UFirst);
; 1941 :         }
; 1942 :     }
; 1943 : 
; 1944 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	QWORD PTR [rax-24], r13

; 1791 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	lea	r10, QWORD PTR [rcx-16]

; 1928 :     // move [_First, _Last) to raw _Dest, using _Al
; 1929 :     // note: only called internally from elsewhere in the STL
; 1930 :     using _Ptrval     = typename _Alloc::value_type*;
; 1931 :     auto _UFirst      = _Get_unwrapped(_First);
; 1932 :     const auto _ULast = _Get_unwrapped(_Last);
; 1933 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1934 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1935 : #if _HAS_CXX20
; 1936 :         if (!_STD is_constant_evaluated())
; 1937 : #endif // _HAS_CXX20
; 1938 :         {
; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1940 :             return _Dest + (_ULast - _UFirst);
; 1941 :         }
; 1942 :     }
; 1943 : 
; 1944 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	QWORD PTR [rax-32], r14

; 1791 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	lea	r11, QWORD PTR [rcx+8]

; 1928 :     // move [_First, _Last) to raw _Dest, using _Al
; 1929 :     // note: only called internally from elsewhere in the STL
; 1930 :     using _Ptrval     = typename _Alloc::value_type*;
; 1931 :     auto _UFirst      = _Get_unwrapped(_First);
; 1932 :     const auto _ULast = _Get_unwrapped(_Last);
; 1933 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1934 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1935 : #if _HAS_CXX20
; 1936 :         if (!_STD is_constant_evaluated())
; 1937 : #endif // _HAS_CXX20
; 1938 :         {
; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1940 :             return _Dest + (_ULast - _UFirst);
; 1941 :         }
; 1942 :     }
; 1943 : 
; 1944 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

	mov	QWORD PTR [rsp], r15

; 1791 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	lea	rbx, QWORD PTR [rcx+32]
	lea	r15, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	lea	rdi, QWORD PTR [rcx-32]
	lea	r14, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	lea	r13, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
$LL4@Uninitiali:
	mov	QWORD PTR [r9], rsi
	mov	QWORD PTR [r8-24], rbp
	movzx	eax, WORD PTR [r10+r8]
	mov	WORD PTR [r8-16], ax
	movzx	eax, BYTE PTR [r10+r8+2]
	mov	BYTE PTR [r8-14], al

; 1803 :         ++_Last;

	lea	rax, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [r9], r14
	add	r9, 72					; 00000048H
	mov	QWORD PTR [r8-8], r12
	mov	QWORD PTR [r8], r13
	mov	QWORD PTR [r8-24], r15
	movzx	ecx, BYTE PTR [r11+r8]
	mov	QWORD PTR [r8+16], rax
	lea	rax, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	BYTE PTR [r8+8], cl
	mov	QWORD PTR [r8+24], rax
	movzx	ecx, WORD PTR [rbx+r8]
	mov	WORD PTR [r8+32], cx
	lea	r8, QWORD PTR [r8+72]

; 1928 :     // move [_First, _Last) to raw _Dest, using _Al
; 1929 :     // note: only called internally from elsewhere in the STL
; 1930 :     using _Ptrval     = typename _Alloc::value_type*;
; 1931 :     auto _UFirst      = _Get_unwrapped(_First);
; 1932 :     const auto _ULast = _Get_unwrapped(_Last);
; 1933 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1934 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1935 : #if _HAS_CXX20
; 1936 :         if (!_STD is_constant_evaluated())
; 1937 : #endif // _HAS_CXX20
; 1938 :         {
; 1939 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1940 :             return _Dest + (_ULast - _UFirst);
; 1941 :         }
; 1942 :     }
; 1943 : 
; 1944 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1945 :     for (; _UFirst != _ULast; ++_UFirst) {

	lea	rcx, QWORD PTR [rdi+r8]
	cmp	rcx, rdx
	jne	SHORT $LL4@Uninitiali
	mov	r15, QWORD PTR [rsp]
	mov	r14, QWORD PTR [rsp+8]
	mov	r13, QWORD PTR [rsp+16]
	mov	r12, QWORD PTR [rsp+24]
	mov	rdi, QWORD PTR [rsp+32]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rbx, QWORD PTR [rsp+48]
$LN44@Uninitiali:

; 1946 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1947 :     }
; 1948 : 
; 1949 :     return _Backout._Release();
; 1950 : }

	mov	rax, r9
	add	rsp, 40					; 00000028H
	ret	0
??$_Uninitialized_move@PEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@0PEAU12@AEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@0@@Z ENDP ; std::_Uninitialized_move<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec *,std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Emplace_back<>, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	mov	rax, QWORD PTR [rcx+8]
	xor	edx, edx
	mov	QWORD PTR [rax+16], rdx
	mov	QWORD PTR [rax+40], rdx
	mov	QWORD PTR [rax+64], rdx
	lea	rdx, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rax], rdx
	lea	rdx, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rax+8], rdx
	lea	rdx, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rax+24], rdx
	lea	rdx, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rax+32], rdx
	lea	rdx, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rax+48], rdx
	lea	rdx, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rax+56], rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1803 :         ++_Last;

	add	QWORD PTR [rcx+8], 72			; 00000048H

; 1804 :     }

	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@VBVNode@@@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 8
classSize$dead$ = 16
?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@VBVNode@@@std@@@std@@QEAAX_K@Z PROC ; std::_Uninitialized_backout_al<std::allocator<BVNode> >::__autoclassinit2, COMDAT
	xorps	xmm0, xmm0
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	mov	QWORD PTR [rcx+16], rax
	ret	0
?__autoclassinit2@?$_Uninitialized_backout_al@V?$allocator@VBVNode@@@std@@@std@@QEAAX_K@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<BVNode> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@VBVNode@@@std@@@std@@QEAAPEAVBVNode@@XZ
_TEXT	SEGMENT
this$ = 8
?_Release@?$_Uninitialized_backout_al@V?$allocator@VBVNode@@@std@@@std@@QEAAPEAVBVNode@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<BVNode> >::_Release, COMDAT

; 1807 :         _First = _Last;

	mov	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR [rcx], rax

; 1808 :         return _Last;
; 1809 :     }

	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@VBVNode@@@std@@@std@@QEAAPEAVBVNode@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<BVNode> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@VBVNode@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1?$_Uninitialized_backout_al@V?$allocator@VBVNode@@@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<BVNode> >::~_Uninitialized_backout_al<std::allocator<BVNode> >, COMDAT

; 1797 :         _Destroy_range(_First, _Last, _Al);
; 1798 :     }

	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@VBVNode@@@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<BVNode> >::~_Uninitialized_backout_al<std::allocator<BVNode> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@VBVNode@@@std@@@std@@QEAA@PEAVBVNode@@AEAV?$allocator@VBVNode@@@1@@Z
_TEXT	SEGMENT
this$ = 8
_Dest$ = 16
_Al_$ = 24
??0?$_Uninitialized_backout_al@V?$allocator@VBVNode@@@std@@@std@@QEAA@PEAVBVNode@@AEAV?$allocator@VBVNode@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<BVNode> >::_Uninitialized_backout_al<std::allocator<BVNode> >, COMDAT

; 1791 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	mov	QWORD PTR [rcx], rdx
	mov	rax, rcx
	mov	QWORD PTR [rcx+8], rdx
	mov	QWORD PTR [rcx+16], r8
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@VBVNode@@@std@@@std@@QEAA@PEAVBVNode@@AEAV?$allocator@VBVNode@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<BVNode> >::_Uninitialized_backout_al<std::allocator<BVNode> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
;	COMDAT ??$addressof@M@std@@YAPEAMAEAM@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@M@std@@YAPEAMAEAM@Z PROC			; std::addressof<float>, COMDAT

; 1607 :     return __builtin_addressof(_Val);

	mov	rax, rcx

; 1608 : }

	ret	0
??$addressof@M@std@@YAPEAMAEAM@Z ENDP			; std::addressof<float>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$construct_at@MAEBM$0A@@std@@YAPEAMQEAMAEBM@Z
_TEXT	SEGMENT
_Location$ = 8
<_Args_0>$ = 16
??$construct_at@MAEBM$0A@@std@@YAPEAMQEAMAEBM@Z PROC	; std::construct_at<float,float const &,0>, COMDAT

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax
	mov	rax, rcx

; 242  : }

	ret	0
??$construct_at@MAEBM$0A@@std@@YAPEAMQEAMAEBM@Z ENDP	; std::construct_at<float,float const &,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
;	COMDAT ??$addressof@VBVNode@@@std@@YAPEAVBVNode@@AEAV1@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@VBVNode@@@std@@YAPEAVBVNode@@AEAV1@@Z PROC	; std::addressof<BVNode>, COMDAT

; 1607 :     return __builtin_addressof(_Val);

	mov	rax, rcx

; 1608 : }

	ret	0
??$addressof@VBVNode@@@std@@YAPEAVBVNode@@AEAV1@@Z ENDP	; std::addressof<BVNode>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$construct_at@VBVNode@@AEBV1@$0A@@std@@YAPEAVBVNode@@QEAV1@AEBV1@@Z
_TEXT	SEGMENT
_Location$ = 8
<_Args_0>$ = 16
??$construct_at@VBVNode@@AEBV1@$0A@@std@@YAPEAVBVNode@@QEAV1@AEBV1@@Z PROC ; std::construct_at<BVNode,BVNode const &,0>, COMDAT

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	movaps	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movaps	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movaps	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [rcx+32], xmm0
	movaps	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx+48], xmm1

; 242  : }

	ret	0
??$construct_at@VBVNode@@AEBV1@$0A@@std@@YAPEAVBVNode@@QEAV1@AEBV1@@Z ENDP ; std::construct_at<BVNode,BVNode const &,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
;	COMDAT ??$move@AEAVBVNode@@@std@@YA$$QEAVBVNode@@AEAV1@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$move@AEAVBVNode@@@std@@YA$$QEAVBVNode@@AEAV1@@Z PROC	; std::move<BVNode &>, COMDAT

; 1595 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, rcx

; 1596 : }

	ret	0
??$move@AEAVBVNode@@@std@@YA$$QEAVBVNode@@AEAV1@@Z ENDP	; std::move<BVNode &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_memmove@PEAVBVNode@@PEAV1@@std@@YAPEAVBVNode@@PEAV1@00@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
??$_Copy_memmove@PEAVBVNode@@PEAV1@@std@@YAPEAVBVNode@@PEAV1@00@Z PROC ; std::_Copy_memmove<BVNode *,BVNode *>, COMDAT

; 4526 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN4:
	mov	QWORD PTR [rsp+32], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, r8

; 4527 :     auto _FirstPtr              = _To_address(_First);
; 4528 :     auto _LastPtr               = _To_address(_Last);
; 4529 :     auto _DestPtr               = _To_address(_Dest);
; 4530 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4531 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4532 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	rbx, rcx

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rdx, rcx
	mov	r8, rbx
	mov	rcx, rdi
	call	memmove

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	lea	rax, QWORD PTR [rdi+rbx]

; 4537 :     } else {
; 4538 :         return _Dest + (_LastPtr - _FirstPtr);
; 4539 :     }
; 4540 : }

	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAVBVNode@@PEAV1@@std@@YAPEAVBVNode@@PEAV1@00@Z ENDP ; std::_Copy_memmove<BVNode *,BVNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_To_address@PEAVBVNode@@@std@@YA?A_PAEBQEAVBVNode@@@Z
_TEXT	SEGMENT
_Val$ = 8
??$_To_address@PEAVBVNode@@@std@@YA?A_PAEBQEAVBVNode@@@Z PROC ; std::_To_address<BVNode *>, COMDAT

; 4395 :     _STL_INTERNAL_STATIC_ASSERT(contiguous_iterator<_Iter>);
; 4396 :     return _STD to_address(_Val);

	mov	rax, QWORD PTR [rcx]

; 4397 : }

	ret	0
??$_To_address@PEAVBVNode@@@std@@YA?A_PAEBQEAVBVNode@@@Z ENDP ; std::_To_address<BVNode *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Emplace_back@VBVNode@@@?$_Uninitialized_backout_al@V?$allocator@VBVNode@@@std@@@std@@QEAAX$$QEAVBVNode@@@Z
_TEXT	SEGMENT
this$ = 8
<_Vals_0>$ = 16
??$_Emplace_back@VBVNode@@@?$_Uninitialized_backout_al@V?$allocator@VBVNode@@@std@@@std@@QEAAX$$QEAVBVNode@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<BVNode> >::_Emplace_back<BVNode>, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	movups	xmm0, XMMWORD PTR [rdx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1802 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rax, QWORD PTR [rcx+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	movups	XMMWORD PTR [rax], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rax+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [rax+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rax+48], xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1803 :         ++_Last;

	add	QWORD PTR [rcx+8], 64			; 00000040H

; 1804 :     }

	ret	0
??$_Emplace_back@VBVNode@@@?$_Uninitialized_backout_al@V?$allocator@VBVNode@@@std@@@std@@QEAAX$$QEAVBVNode@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<BVNode> >::_Emplace_back<BVNode>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
;	COMDAT ??$move@AEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@YA$$QEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$move@AEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@YA$$QEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@AEAU12@@Z PROC ; std::move<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec &>, COMDAT

; 1595 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, rcx

; 1596 : }

	ret	0
??$move@AEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@YA$$QEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@AEAU12@@Z ENDP ; std::move<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Emplace_back@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAX$$QEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@Z
_TEXT	SEGMENT
this$ = 8
<_Vals_0>$ = 16
??$_Emplace_back@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAX$$QEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Emplace_back<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	mov	r8, QWORD PTR [rcx+8]
	lea	rax, OFFSET FLAT:??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [r8], rax
	lea	rax, OFFSET FLAT:??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [r8+8], rax
	movzx	eax, WORD PTR [rdx+16]
	mov	WORD PTR [r8+16], ax
	movzx	eax, BYTE PTR [rdx+18]
	mov	BYTE PTR [r8+18], al
	lea	rax, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [r8], rax
	lea	rax, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [r8+8], rax
	lea	rax, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [r8+24], rax
	lea	rax, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [r8+32], rax
	movzx	eax, BYTE PTR [rdx+40]
	mov	BYTE PTR [r8+40], al
	lea	rax, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [r8+48], rax
	lea	rax, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [r8+56], rax
	movzx	eax, WORD PTR [rdx+64]
	mov	WORD PTR [r8+64], ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1803 :         ++_Last;

	add	QWORD PTR [rcx+8], 72			; 00000048H

; 1804 :     }

	ret	0
??$_Emplace_back@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@?$_Uninitialized_backout_al@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@QEAAX$$QEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::_Emplace_back<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Unfancy@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@@Z
_TEXT	SEGMENT
_Ptr$ = 8
??$_Unfancy@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@@Z PROC ; std::_Unfancy<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>, COMDAT

; 37   :     return _Ptr;

	mov	rax, rcx

; 38   : }

	ret	0
??$_Unfancy@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@PEAU12@@Z ENDP ; std::_Unfancy<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$construct@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@$$V@?$_Default_allocator_traits@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@SAXAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@1@QEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
_Ptr$ = 16
??$construct@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@$$V@?$_Default_allocator_traits@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@SAXAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@1@QEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@Z PROC ; std::_Default_allocator_traits<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::construct<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	xor	eax, eax
	mov	QWORD PTR [rdx+16], rax
	mov	QWORD PTR [rdx+40], rax
	mov	QWORD PTR [rdx+64], rax
	lea	rax, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rdx], rax
	lea	rax, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rdx+8], rax
	lea	rax, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rdx+24], rax
	lea	rax, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rdx+32], rax
	lea	rax, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rdx+48], rax
	lea	rax, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rdx+56], rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 721  :     }

	ret	0
??$construct@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@$$V@?$_Default_allocator_traits@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@SAXAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@1@QEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::construct<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$to_address@VBVNode@@@std@@YAPEAVBVNode@@QEAV1@@Z
_TEXT	SEGMENT
_Val$ = 8
??$to_address@VBVNode@@@std@@YAPEAVBVNode@@QEAV1@@Z PROC ; std::to_address<BVNode>, COMDAT

; 328  :     static_assert(!is_function_v<_Ty>, "N4950 [pointer.conversion]/1: Mandates: T is not a function type.");
; 329  :     return _Val;

	mov	rax, rcx

; 330  : }

	ret	0
??$to_address@VBVNode@@@std@@YAPEAVBVNode@@QEAV1@@Z ENDP ; std::to_address<BVNode>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
;	COMDAT ??$forward@VBVNode@@@std@@YA$$QEAVBVNode@@AEAV1@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@VBVNode@@@std@@YA$$QEAVBVNode@@AEAV1@@Z PROC	; std::forward<BVNode>, COMDAT

; 1584 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, rcx

; 1585 : }

	ret	0
??$forward@VBVNode@@@std@@YA$$QEAVBVNode@@AEAV1@@Z ENDP	; std::forward<BVNode>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$construct@VBVNode@@V1@@?$_Default_allocator_traits@V?$allocator@VBVNode@@@std@@@std@@SAXAEAV?$allocator@VBVNode@@@1@QEAVBVNode@@$$QEAV3@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
_Ptr$ = 16
<_Args_0>$ = 24
??$construct@VBVNode@@V1@@?$_Default_allocator_traits@V?$allocator@VBVNode@@@std@@@std@@SAXAEAV?$allocator@VBVNode@@@1@QEAVBVNode@@$$QEAV3@@Z PROC ; std::_Default_allocator_traits<std::allocator<BVNode> >::construct<BVNode,BVNode>, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8+32]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+48]
	movups	XMMWORD PTR [rdx+48], xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 721  :     }

	ret	0
??$construct@VBVNode@@V1@@?$_Default_allocator_traits@V?$allocator@VBVNode@@@std@@@std@@SAXAEAV?$allocator@VBVNode@@@1@QEAVBVNode@@$$QEAV3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<BVNode> >::construct<BVNode,BVNode>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
;	COMDAT ??$forward@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@YA$$QEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@YA$$QEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@AEAU12@@Z PROC ; std::forward<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>, COMDAT

; 1584 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, rcx

; 1585 : }

	ret	0
??$forward@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@YA$$QEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@AEAU12@@Z ENDP ; std::forward<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$construct@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@U12@@?$_Default_allocator_traits@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@SAXAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@1@QEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@$$QEAU34@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
_Ptr$ = 16
<_Args_0>$ = 24
??$construct@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@U12@@?$_Default_allocator_traits@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@SAXAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@1@QEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@$$QEAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::construct<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>, COMDAT

; 715  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	lea	rax, OFFSET FLAT:??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rdx], rax
	lea	rax, OFFSET FLAT:??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rdx+8], rax
	movzx	eax, WORD PTR [r8+16]
	mov	WORD PTR [rdx+16], ax
	movzx	eax, BYTE PTR [r8+18]
	mov	BYTE PTR [rdx+18], al
	lea	rax, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rdx], rax
	lea	rax, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rdx+8], rax
	lea	rax, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rdx+24], rax
	lea	rax, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rdx+32], rax
	movzx	eax, BYTE PTR [r8+40]
	mov	BYTE PTR [rdx+40], al
	lea	rax, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rdx+48], rax
	lea	rax, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rdx+56], rax
	movzx	eax, WORD PTR [r8+64]
	mov	WORD PTR [rdx+64], ax

; 716  : #if _HAS_CXX20
; 717  :         _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 718  : #else // ^^^ _HAS_CXX20 / !_HAS_CXX20 vvv
; 719  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);
; 720  : #endif // ^^^ !_HAS_CXX20 ^^^
; 721  :     }

	ret	0
??$construct@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@U12@@?$_Default_allocator_traits@V?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@std@@@std@@SAXAEAV?$allocator@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@@1@QEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@$$QEAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec> >::construct<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$construct_at@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@$$V$0A@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@@Z
_TEXT	SEGMENT
_Location$ = 8
??$construct_at@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@$$V$0A@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@@Z PROC ; std::construct_at<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,0>, COMDAT

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	xor	eax, eax
	mov	QWORD PTR [rcx+16], rax
	mov	QWORD PTR [rcx+40], rax
	mov	QWORD PTR [rcx+64], rax
	lea	rax, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx], rax
	lea	rax, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+8], rax
	lea	rax, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx+24], rax
	lea	rax, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+32], rax
	lea	rax, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx+48], rax
	lea	rax, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+56], rax
	mov	rax, rcx

; 242  : }

	ret	0
??$construct_at@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@$$V$0A@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@@Z ENDP ; std::construct_at<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$construct_at@VBVNode@@V1@$0A@@std@@YAPEAVBVNode@@QEAV1@$$QEAV1@@Z
_TEXT	SEGMENT
_Location$ = 8
<_Args_0>$ = 16
??$construct_at@VBVNode@@V1@$0A@@std@@YAPEAVBVNode@@QEAV1@$$QEAV1@@Z PROC ; std::construct_at<BVNode,BVNode,0>, COMDAT

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	movups	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx+48], xmm1

; 242  : }

	ret	0
??$construct_at@VBVNode@@V1@$0A@@std@@YAPEAVBVNode@@QEAV1@$$QEAV1@@Z ENDP ; std::construct_at<BVNode,BVNode,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$construct_at@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@U12@$0A@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@$$QEAU12@@Z
_TEXT	SEGMENT
_Location$ = 8
<_Args_0>$ = 16
??$construct_at@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@U12@$0A@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@$$QEAU12@@Z PROC ; std::construct_at<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,0>, COMDAT

; 240  :     noexcept(::new(static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...))) /* strengthened */ {

	lea	rax, OFFSET FLAT:??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx], rax
	lea	rax, OFFSET FLAT:??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+8], rax
	movzx	eax, WORD PTR [rdx+16]
	mov	WORD PTR [rcx+16], ax
	movzx	eax, BYTE PTR [rdx+18]
	mov	BYTE PTR [rcx+18], al
	lea	rax, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx], rax
	lea	rax, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+8], rax
	lea	rax, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx+24], rax
	lea	rax, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+32], rax
	movzx	eax, BYTE PTR [rdx+40]
	mov	BYTE PTR [rcx+40], al
	lea	rax, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx+48], rax
	lea	rax, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+56], rax
	movzx	eax, WORD PTR [rdx+64]
	mov	WORD PTR [rcx+64], ax

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	mov	rax, rcx

; 242  : }

	ret	0
??$construct_at@UhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@U12@$0A@@std@@YAPEAUhkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAU12@$$QEAU12@@Z ENDP ; std::construct_at<PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAA@$$QEAU01@@Z
_TEXT	SEGMENT
this$ = 8
__that$ = 16
??0hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAA@$$QEAU01@@Z PROC ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::hkcdCompressedAabbCodecs__Aabb6BytesCodec, COMDAT
	lea	rax, OFFSET FLAT:??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx], rax
	lea	rax, OFFSET FLAT:??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+8], rax
	movzx	eax, WORD PTR [rdx+16]
	mov	WORD PTR [rcx+16], ax
	movzx	eax, BYTE PTR [rdx+18]
	mov	BYTE PTR [rcx+18], al
	lea	rax, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx], rax
	lea	rax, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+8], rax
	lea	rax, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx+24], rax
	lea	rax, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+32], rax
	movzx	eax, BYTE PTR [rdx+40]
	mov	BYTE PTR [rcx+40], al
	lea	rax, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx+48], rax
	lea	rax, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+56], rax
	movzx	eax, WORD PTR [rdx+64]
	mov	WORD PTR [rcx+64], ax
	mov	rax, rcx
	ret	0
??0hkcdCompressedAabbCodecs__Aabb6BytesCodec@PhiveNavMesh@@QEAA@$$QEAU01@@Z ENDP ; PhiveNavMesh::hkcdCompressedAabbCodecs__Aabb6BytesCodec::hkcdCompressedAabbCodecs__Aabb6BytesCodec
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@QEAA@$$QEAU01@@Z
_TEXT	SEGMENT
this$ = 8
__that$ = 16
??0?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@QEAA@$$QEAU01@@Z PROC ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>, COMDAT
	lea	rax, OFFSET FLAT:??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx], rax
	lea	rax, OFFSET FLAT:??_7?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+8], rax
	movzx	eax, WORD PTR [rdx+16]
	mov	WORD PTR [rcx+16], ax
	movzx	eax, BYTE PTR [rdx+18]
	mov	BYTE PTR [rcx+18], al
	mov	rax, rcx
	ret	0
??0?$hkcdCompressedAabbCodecs__CompressedAabbCodec@E$02@PhiveNavMesh@@QEAA@$$QEAU01@@Z ENDP ; PhiveNavMesh::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>::hkcdCompressedAabbCodecs__CompressedAabbCodec<unsigned char,3>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@QEAA@$$QEAU01@@Z
_TEXT	SEGMENT
this$ = 8
__that$dead$ = 16
??0hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@QEAA@$$QEAU01@@Z PROC ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::hkcdCompressedAabbCodecs__AabbCodecBase, COMDAT
	lea	rax, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx], rax
	lea	rax, OFFSET FLAT:??_7hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+8], rax
	mov	rax, rcx
	ret	0
??0hkcdCompressedAabbCodecs__AabbCodecBase@PhiveNavMesh@@QEAA@$$QEAU01@@Z ENDP ; PhiveNavMesh::hkcdCompressedAabbCodecs__AabbCodecBase::hkcdCompressedAabbCodecs__AabbCodecBase
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0hkReadable@PhiveBinaryVectorReader@@QEAA@$$QEAU01@@Z
_TEXT	SEGMENT
this$ = 8
__that$dead$ = 16
??0hkReadable@PhiveBinaryVectorReader@@QEAA@$$QEAU01@@Z PROC ; PhiveBinaryVectorReader::hkReadable::hkReadable, COMDAT
	lea	rax, OFFSET FLAT:??_7hkReadable@PhiveBinaryVectorReader@@6B@
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	ret	0
??0hkReadable@PhiveBinaryVectorReader@@QEAA@$$QEAU01@@Z ENDP ; PhiveBinaryVectorReader::hkReadable::hkReadable
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0hkWriteable@PhiveBinaryVectorWriter@@QEAA@$$QEAU01@@Z
_TEXT	SEGMENT
this$ = 8
__that$dead$ = 16
??0hkWriteable@PhiveBinaryVectorWriter@@QEAA@$$QEAU01@@Z PROC ; PhiveBinaryVectorWriter::hkWriteable::hkWriteable, COMDAT
	lea	rax, OFFSET FLAT:??_7hkWriteable@PhiveBinaryVectorWriter@@6B@
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	ret	0
??0hkWriteable@PhiveBinaryVectorWriter@@QEAA@$$QEAU01@@Z ENDP ; PhiveBinaryVectorWriter::hkWriteable::hkWriteable
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0hkUint8@PhiveNavMesh@@QEAA@$$QEAU01@@Z
_TEXT	SEGMENT
this$ = 8
__that$ = 16
??0hkUint8@PhiveNavMesh@@QEAA@$$QEAU01@@Z PROC		; PhiveNavMesh::hkUint8::hkUint8, COMDAT
	lea	rax, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx], rax
	lea	rax, OFFSET FLAT:??_7hkUint8@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+8], rax
	movzx	eax, BYTE PTR [rdx+16]
	mov	BYTE PTR [rcx+16], al
	mov	rax, rcx
	ret	0
??0hkUint8@PhiveNavMesh@@QEAA@$$QEAU01@@Z ENDP		; PhiveNavMesh::hkUint8::hkUint8
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0hkUint16@PhiveNavMesh@@QEAA@$$QEAU01@@Z
_TEXT	SEGMENT
this$ = 8
__that$ = 16
??0hkUint16@PhiveNavMesh@@QEAA@$$QEAU01@@Z PROC		; PhiveNavMesh::hkUint16::hkUint16, COMDAT
	lea	rax, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkReadable@PhiveBinaryVectorReader@@@
	mov	QWORD PTR [rcx], rax
	lea	rax, OFFSET FLAT:??_7hkUint16@PhiveNavMesh@@6BhkWriteable@PhiveBinaryVectorWriter@@@
	mov	QWORD PTR [rcx+8], rax
	movzx	eax, WORD PTR [rdx+16]
	mov	WORD PTR [rcx+16], ax
	mov	rax, rcx
	ret	0
??0hkUint16@PhiveNavMesh@@QEAA@$$QEAU01@@Z ENDP		; PhiveNavMesh::hkUint16::hkUint16
_TEXT	ENDS
END
