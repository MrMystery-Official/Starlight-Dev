; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	??_U@YAPEAX_K@Z:PROC				; operator new[]
EXTRN	??_V@YAXPEAX@Z:PROC				; operator delete[]
PUBLIC	?Align@BinaryVectorWriter@@QEAAXIE@Z		; BinaryVectorWriter::Align
PUBLIC	?GetData@BinaryVectorWriter@@QEAAAEAV?$vector@EV?$allocator@E@std@@@std@@XZ ; BinaryVectorWriter::GetData
PUBLIC	?Seek@BinaryVectorWriter@@QEAAXHW4Position@1@@Z	; BinaryVectorWriter::Seek
PUBLIC	?WriteRawUnsafeFixed@BinaryVectorWriter@@QEAAXPEBDH@Z ; BinaryVectorWriter::WriteRawUnsafeFixed
PUBLIC	?WriteInteger@BinaryVectorWriter@@QEAAX_JH@Z	; BinaryVectorWriter::WriteInteger
PUBLIC	?WriteBytes@BinaryVectorWriter@@QEAAXPEBD@Z	; BinaryVectorWriter::WriteBytes
PUBLIC	?WriteByte@BinaryVectorWriter@@QEAAXD@Z		; BinaryVectorWriter::WriteByte
PUBLIC	?GetPosition@BinaryVectorWriter@@QEAAHXZ	; BinaryVectorWriter::GetPosition
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Align@BinaryVectorWriter@@QEAAXIE@Z DD imagerel $LN18
	DD	imagerel $LN18+94
	DD	imagerel $unwind$?Align@BinaryVectorWriter@@QEAAXIE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Seek@BinaryVectorWriter@@QEAAXHW4Position@1@@Z DD imagerel $LN22
	DD	imagerel $LN22+112
	DD	imagerel $unwind$?Seek@BinaryVectorWriter@@QEAAXHW4Position@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?WriteRawUnsafeFixed@BinaryVectorWriter@@QEAAXPEBDH@Z DD imagerel $LN24
	DD	imagerel $LN24+135
	DD	imagerel $unwind$?WriteRawUnsafeFixed@BinaryVectorWriter@@QEAAXPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?WriteInteger@BinaryVectorWriter@@QEAAX_JH@Z DD imagerel $LN24
	DD	imagerel $LN24+160
	DD	imagerel $unwind$?WriteInteger@BinaryVectorWriter@@QEAAX_JH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?WriteBytes@BinaryVectorWriter@@QEAAXPEBD@Z DD imagerel $LN29
	DD	imagerel $LN29+172
	DD	imagerel $unwind$?WriteBytes@BinaryVectorWriter@@QEAAXPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?WriteByte@BinaryVectorWriter@@QEAAXD@Z DD imagerel $LN9
	DD	imagerel $LN9+56
	DD	imagerel $unwind$?WriteByte@BinaryVectorWriter@@QEAAXD@Z
;	COMDAT xdata
xdata	SEGMENT
$unwind$?WriteByte@BinaryVectorWriter@@QEAAXD@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?WriteBytes@BinaryVectorWriter@@QEAAXPEBD@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?WriteInteger@BinaryVectorWriter@@QEAAX_JH@Z DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?WriteRawUnsafeFixed@BinaryVectorWriter@@QEAAXPEBDH@Z DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Seek@BinaryVectorWriter@@QEAAXHW4Position@1@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Align@BinaryVectorWriter@@QEAAXIE@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
;	COMDAT ?GetPosition@BinaryVectorWriter@@QEAAHXZ
_TEXT	SEGMENT
this$ = 8
?GetPosition@BinaryVectorWriter@@QEAAHXZ PROC		; BinaryVectorWriter::GetPosition, COMDAT

; 7    : 	return this->m_Offset;

	mov	eax, DWORD PTR [rcx+24]

; 8    : }

	ret	0
?GetPosition@BinaryVectorWriter@@QEAAHXZ ENDP		; BinaryVectorWriter::GetPosition
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
;	COMDAT ?WriteByte@BinaryVectorWriter@@QEAAXD@Z
_TEXT	SEGMENT
this$ = 48
Byte$ = 56
?WriteByte@BinaryVectorWriter@@QEAAXD@Z PROC		; BinaryVectorWriter::WriteByte, COMDAT

; 11   : {

$LN9:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	movzx	ebx, dl
	mov	rdi, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rdx, QWORD PTR [rcx+8]
	sub	rdx, QWORD PTR [rcx]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp

; 12   : 	this->m_Data.resize(this->m_Data.size() + 1);

	inc	rdx
	call	?resize@?$vector@EV?$allocator@E@std@@@std@@QEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize

; 13   : 	this->m_Data[m_Offset] = Byte;

	movsxd	r8, DWORD PTR [rdi+24]
	mov	rax, QWORD PTR [rdi]
	mov	BYTE PTR [r8+rax], bl

; 14   : 	this->m_Offset++;

	inc	DWORD PTR [rdi+24]

; 15   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?WriteByte@BinaryVectorWriter@@QEAAXD@Z ENDP		; BinaryVectorWriter::WriteByte
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
;	COMDAT ?WriteBytes@BinaryVectorWriter@@QEAAXPEBD@Z
_TEXT	SEGMENT
this$ = 48
Bytes$ = 56
?WriteBytes@BinaryVectorWriter@@QEAAXPEBD@Z PROC	; BinaryVectorWriter::WriteBytes, COMDAT

; 43   : {

$LN29:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
	mov	rbx, rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rcx, QWORD PTR [rcx+8]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp

; 44   : 	if (this->m_Offset + strlen(Bytes) > this->m_Data.size())

	mov	rdx, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	rcx, QWORD PTR [rdi]
	npad	2
$LL20@WriteBytes:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp

; 44   : 	if (this->m_Offset + strlen(Bytes) > this->m_Data.size())

	inc	rdx
	cmp	BYTE PTR [rbx+rdx], 0
	jne	SHORT $LL20@WriteBytes
	movsxd	rax, DWORD PTR [rdi+24]
	add	rdx, rax
	cmp	rdx, rcx
	jbe	SHORT $LN5@WriteBytes

; 45   : 	{
; 46   : 		this->m_Data.resize(this->m_Data.size() + strlen(Bytes));

	mov	rdx, -1
	npad	4
$LL19@WriteBytes:
	inc	rdx
	cmp	BYTE PTR [rbx+rdx], 0
	jne	SHORT $LL19@WriteBytes
	add	rdx, rcx
	mov	rcx, rdi
	call	?resize@?$vector@EV?$allocator@E@std@@@std@@QEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize
$LN5@WriteBytes:

; 47   : 	}
; 48   : 	for (int i = 0; i < strlen(Bytes); i++)

	xor	r8d, r8d
	mov	rax, -1
	npad	2
$LL18@WriteBytes:
	inc	rax
	cmp	BYTE PTR [rbx+rax], r8b
	jne	SHORT $LL18@WriteBytes
	test	rax, rax
	je	SHORT $LN3@WriteBytes
	mov	r9, rbx
$LL4@WriteBytes:

; 49   : 	{
; 50   : 		this->m_Data[this->m_Offset] = Bytes[i];

	movzx	eax, BYTE PTR [r9]
	lea	r9, QWORD PTR [r9+1]
	movsxd	rdx, DWORD PTR [rdi+24]
	mov	rcx, QWORD PTR [rdi]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, -1

; 51   : 		this->m_Offset++;

	inc	DWORD PTR [rdi+24]
	inc	r8d
$LL17@WriteBytes:

; 47   : 	}
; 48   : 	for (int i = 0; i < strlen(Bytes); i++)

	inc	rax
	cmp	BYTE PTR [rbx+rax], 0
	jne	SHORT $LL17@WriteBytes
	movsxd	rcx, r8d
	cmp	rcx, rax
	jb	SHORT $LL4@WriteBytes
$LN3@WriteBytes:

; 52   : 	}
; 53   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?WriteBytes@BinaryVectorWriter@@QEAAXPEBD@Z ENDP	; BinaryVectorWriter::WriteBytes
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
;	COMDAT ?WriteInteger@BinaryVectorWriter@@QEAAX_JH@Z
_TEXT	SEGMENT
this$ = 48
Data$ = 56
Size$ = 64
?WriteInteger@BinaryVectorWriter@@QEAAX_JH@Z PROC	; BinaryVectorWriter::WriteInteger, COMDAT

; 82   : {

$LN24:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	movsxd	rsi, r8d
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rcx, QWORD PTR [rcx+8]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp

; 82   : {

	mov	rbp, rdx

; 83   : 	if (this->m_Offset + Size > this->m_Data.size())

	mov	rdi, rsi
	mov	eax, DWORD PTR [rbx+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	rcx, QWORD PTR [rbx]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp

; 83   : 	if (this->m_Offset + Size > this->m_Data.size())

	add	eax, esi
	cdqe
	cmp	rax, rcx
	jbe	SHORT $LN5@WriteInteg

; 84   : 	{
; 85   : 		this->m_Data.resize(this->m_Data.size() + Size);

	lea	rdx, QWORD PTR [rsi+rcx]
	mov	rcx, rbx
	call	?resize@?$vector@EV?$allocator@E@std@@@std@@QEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize
$LN5@WriteInteg:

; 86   : 	}
; 87   : 
; 88   : 	char* Bytes = new char[sizeof(int64_t)];

	mov	ecx, 8
	call	??_U@YAPEAX_K@Z				; operator new[]
	xor	r10d, r10d
	mov	ecx, r10d

; 89   : 
; 90   : 	std::memcpy(Bytes, &Data, sizeof(Bytes));

	mov	QWORD PTR [rax], rbp

; 91   : 
; 92   : 	for (int i = 0; i < Size; i++) {

	test	rdi, rdi
	jle	SHORT $LN3@WriteInteg
	npad	9
$LL4@WriteInteg:

; 93   : 		this->m_Data[this->m_Offset + i] = Bytes[i];

	mov	r8d, DWORD PTR [rbx+24]
	movzx	edx, BYTE PTR [rcx+rax]
	add	r8d, r10d
	movsxd	r9, r8d
	inc	r10d
	mov	r8, QWORD PTR [rbx]
	inc	rcx
	mov	BYTE PTR [r9+r8], dl
	cmp	rcx, rdi
	jl	SHORT $LL4@WriteInteg
$LN3@WriteInteg:

; 94   : 	}
; 95   : 
; 96   : 	delete[] Bytes;

	mov	rcx, rax
	call	??_V@YAXPEAX@Z				; operator delete[]

; 97   : 
; 98   : 	this->m_Offset += Size;

	add	DWORD PTR [rbx+24], esi

; 99   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?WriteInteger@BinaryVectorWriter@@QEAAX_JH@Z ENDP	; BinaryVectorWriter::WriteInteger
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
;	COMDAT ?WriteRawUnsafeFixed@BinaryVectorWriter@@QEAAXPEBDH@Z
_TEXT	SEGMENT
this$ = 48
Bytes$ = 56
Size$ = 64
?WriteRawUnsafeFixed@BinaryVectorWriter@@QEAAXPEBDH@Z PROC ; BinaryVectorWriter::WriteRawUnsafeFixed, COMDAT

; 69   : {

$LN24:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	movsxd	rsi, r8d
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rcx, QWORD PTR [rcx+8]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp

; 69   : {

	mov	rbp, rdx

; 70   : 	if (this->m_Offset + Size > this->m_Data.size())

	mov	rdi, rsi
	mov	eax, DWORD PTR [rbx+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	rcx, QWORD PTR [rbx]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp

; 70   : 	if (this->m_Offset + Size > this->m_Data.size())

	add	eax, esi
	cdqe
	cmp	rax, rcx
	jbe	SHORT $LN5@WriteRawUn
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	lea	rdx, QWORD PTR [rcx+rsi]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp

; 72   : 		this->m_Data.resize(this->m_Data.size() + Size);

	mov	rcx, rbx
	call	?resize@?$vector@EV?$allocator@E@std@@@std@@QEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize
$LN5@WriteRawUn:

; 73   : 	}
; 74   : 	for (int i = 0; i < Size; i++)

	xor	r9d, r9d
	test	rdi, rdi
	jle	SHORT $LN18@WriteRawUn
	mov	r8d, r9d
	npad	6
$LL4@WriteRawUn:

; 75   : 	{
; 76   : 		this->m_Data[this->m_Offset + i] = Bytes[i];

	mov	ecx, DWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [r8+rbp]
	add	ecx, r9d
	movsxd	rdx, ecx
	inc	r9d
	mov	rcx, QWORD PTR [rbx]
	inc	r8
	mov	BYTE PTR [rdx+rcx], al
	cmp	r8, rdi
	jl	SHORT $LL4@WriteRawUn
$LN18@WriteRawUn:

; 77   : 	}
; 78   : 	this->m_Offset += Size;
; 79   : }

	add	DWORD PTR [rbx+24], esi
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?WriteRawUnsafeFixed@BinaryVectorWriter@@QEAAXPEBDH@Z ENDP ; BinaryVectorWriter::WriteRawUnsafeFixed
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
;	COMDAT ?Seek@BinaryVectorWriter@@QEAAXHW4Position@1@@Z
_TEXT	SEGMENT
this$ = 48
Offset$ = 56
Position$ = 64
?Seek@BinaryVectorWriter@@QEAAXHW4Position@1@@Z PROC	; BinaryVectorWriter::Seek, COMDAT

; 18   : {

$LN22:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	movsxd	rdi, edx
	mov	rbx, rcx

; 19   : 	//this->Stream->seekp(Offset, Position);
; 20   : 	if (Position == BinaryVectorWriter::Position::Begin)

	test	r8b, r8b
	jne	SHORT $LN2@Seek
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	r8, QWORD PTR [rcx+8]
	sub	r8, QWORD PTR [rcx]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp

; 22   : 		if (Offset > this->m_Data.size())

	cmp	rdi, r8
	jbe	SHORT $LN4@Seek

; 23   : 		{
; 24   : 			this->m_Data.resize(Offset + 1);

	lea	eax, DWORD PTR [rdi+1]
	movsxd	rdx, eax
	call	?resize@?$vector@EV?$allocator@E@std@@@std@@QEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize
$LN4@Seek:

; 25   : 		}
; 26   : 		this->m_Offset = Offset;

	mov	DWORD PTR [rbx+24], edi

; 35   : 	}
; 36   : 	else if (Position == BinaryVectorWriter::Position::End)
; 37   : 	{
; 38   : 		this->m_Offset = this->m_Data.size() - Offset - 1;
; 39   : 	}
; 40   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@Seek:

; 27   : 	}
; 28   : 	else if (Position == BinaryVectorWriter::Position::Current)

	cmp	r8b, 1
	jne	SHORT $LN5@Seek

; 30   : 		if (this->m_Offset + Offset >= this->m_Data.size())

	mov	edx, DWORD PTR [rcx+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rcx, QWORD PTR [rcx+8]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp

; 30   : 		if (this->m_Offset + Offset >= this->m_Data.size())

	add	edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	rcx, QWORD PTR [rbx]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp

; 30   : 		if (this->m_Offset + Offset >= this->m_Data.size())

	movsxd	rax, edx
	cmp	rax, rcx
	jb	SHORT $LN7@Seek

; 31   : 		{
; 32   : 			this->m_Data.resize(Offset + this->m_Offset + 1);

	lea	eax, DWORD PTR [rdx+1]
	mov	rcx, rbx
	movsxd	rdx, eax
	call	?resize@?$vector@EV?$allocator@E@std@@@std@@QEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize
$LN7@Seek:

; 33   : 		}
; 34   : 		this->m_Offset += Offset;

	add	DWORD PTR [rbx+24], edi
$LN5@Seek:

; 35   : 	}
; 36   : 	else if (Position == BinaryVectorWriter::Position::End)
; 37   : 	{
; 38   : 		this->m_Offset = this->m_Data.size() - Offset - 1;
; 39   : 	}
; 40   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?Seek@BinaryVectorWriter@@QEAAXHW4Position@1@@Z ENDP	; BinaryVectorWriter::Seek
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
;	COMDAT ?GetData@BinaryVectorWriter@@QEAAAEAV?$vector@EV?$allocator@E@std@@@std@@XZ
_TEXT	SEGMENT
this$ = 8
?GetData@BinaryVectorWriter@@QEAAAEAV?$vector@EV?$allocator@E@std@@@std@@XZ PROC ; BinaryVectorWriter::GetData, COMDAT

; 103  : 	return this->m_Data;

	mov	rax, rcx

; 104  : }

	ret	0
?GetData@BinaryVectorWriter@@QEAAAEAV?$vector@EV?$allocator@E@std@@@std@@XZ ENDP ; BinaryVectorWriter::GetData
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
;	COMDAT ?Align@BinaryVectorWriter@@QEAAXIE@Z
_TEXT	SEGMENT
this$ = 48
Alignment$ = 56
Aligner$ = 64
?Align@BinaryVectorWriter@@QEAAXIE@Z PROC		; BinaryVectorWriter::Align, COMDAT

; 107  : {

$LN18:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 108  : 	while (GetPosition() % Alignment != 0)

	mov	eax, DWORD PTR [rcx+24]
	mov	edi, edx
	xor	edx, edx
	movzx	esi, r8b
	div	edi
	mov	rbx, rcx
	test	edx, edx
	je	SHORT $LN3@Align
$LL2@Align:

; 12   : 	this->m_Data.resize(this->m_Data.size() + 1);

	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	sub	rdx, QWORD PTR [rbx]
	inc	rdx
	call	?resize@?$vector@EV?$allocator@E@std@@@std@@QEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize

; 13   : 	this->m_Data[m_Offset] = Byte;

	mov	rax, QWORD PTR [rbx]

; 108  : 	while (GetPosition() % Alignment != 0)

	xor	edx, edx

; 13   : 	this->m_Data[m_Offset] = Byte;

	movsxd	rcx, DWORD PTR [rbx+24]
	mov	BYTE PTR [rcx+rax], sil

; 14   : 	this->m_Offset++;

	inc	DWORD PTR [rbx+24]

; 108  : 	while (GetPosition() % Alignment != 0)

	mov	eax, DWORD PTR [rbx+24]
	div	edi
	test	edx, edx
	jne	SHORT $LL2@Align
$LN3@Align:

; 109  : 		WriteByte(Aligner);
; 110  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?Align@BinaryVectorWriter@@QEAAXIE@Z ENDP		; BinaryVectorWriter::Align
_TEXT	ENDS
END
