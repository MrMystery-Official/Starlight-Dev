; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?Align@BinaryVectorReader@@QEAAXI@Z		; BinaryVectorReader::Align
PUBLIC	?ReadDouble@BinaryVectorReader@@QEAAN_N@Z	; BinaryVectorReader::ReadDouble
PUBLIC	?ReadUInt24@BinaryVectorReader@@QEAAI_N@Z	; BinaryVectorReader::ReadUInt24
PUBLIC	?ReadInt64@BinaryVectorReader@@QEAA_J_N@Z	; BinaryVectorReader::ReadInt64
PUBLIC	?ReadUInt64@BinaryVectorReader@@QEAA_K_N@Z	; BinaryVectorReader::ReadUInt64
PUBLIC	?ReadStruct@BinaryVectorReader@@QEAAXPEAXIH@Z	; BinaryVectorReader::ReadStruct
PUBLIC	?ReadFloat@BinaryVectorReader@@QEAAM_N@Z	; BinaryVectorReader::ReadFloat
PUBLIC	?ReadInt32@BinaryVectorReader@@QEAAH_N@Z	; BinaryVectorReader::ReadInt32
PUBLIC	?ReadUInt32@BinaryVectorReader@@QEAAI_N@Z	; BinaryVectorReader::ReadUInt32
PUBLIC	?ReadInt16@BinaryVectorReader@@QEAAF_N@Z	; BinaryVectorReader::ReadInt16
PUBLIC	?ReadUInt16@BinaryVectorReader@@QEAAG_N@Z	; BinaryVectorReader::ReadUInt16
PUBLIC	?ReadInt8@BinaryVectorReader@@QEAACXZ		; BinaryVectorReader::ReadInt8
PUBLIC	?ReadUInt8@BinaryVectorReader@@QEAAEXZ		; BinaryVectorReader::ReadUInt8
PUBLIC	?Read@BinaryVectorReader@@QEAAXPEADH@Z		; BinaryVectorReader::Read
PUBLIC	?GetSize@BinaryVectorReader@@QEAAIXZ		; BinaryVectorReader::GetSize
PUBLIC	?GetPosition@BinaryVectorReader@@QEAAHXZ	; BinaryVectorReader::GetPosition
PUBLIC	?Seek@BinaryVectorReader@@QEAAXHW4Position@1@@Z	; BinaryVectorReader::Seek
PUBLIC	??0BinaryVectorReader@@QEAA@AEAV?$vector@EV?$allocator@E@std@@@std@@_N@Z ; BinaryVectorReader::BinaryVectorReader
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ReadDouble@BinaryVectorReader@@QEAAN_N@Z DD imagerel $LN4
	DD	imagerel $LN4+34
	DD	imagerel $unwind$?ReadDouble@BinaryVectorReader@@QEAAN_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ReadStruct@BinaryVectorReader@@QEAAXPEAXIH@Z DD imagerel $LN15
	DD	imagerel $LN15+60
	DD	imagerel $unwind$?ReadStruct@BinaryVectorReader@@QEAAXPEAXIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ReadFloat@BinaryVectorReader@@QEAAM_N@Z DD imagerel $LN4
	DD	imagerel $LN4+24
	DD	imagerel $unwind$?ReadFloat@BinaryVectorReader@@QEAAM_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ReadUInt32@BinaryVectorReader@@QEAAI_N@Z DD imagerel $LN24
	DD	imagerel $LN24+126
	DD	imagerel $unwind$?ReadUInt32@BinaryVectorReader@@QEAAI_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Read@BinaryVectorReader@@QEAAXPEADH@Z DD imagerel $LN15
	DD	imagerel $LN15+73
	DD	imagerel $unwind$?Read@BinaryVectorReader@@QEAAXPEADH@Z
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Read@BinaryVectorReader@@QEAAXPEADH@Z DD 020501H
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ReadUInt32@BinaryVectorReader@@QEAAI_N@Z DD 020501H
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ReadFloat@BinaryVectorReader@@QEAAM_N@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ReadStruct@BinaryVectorReader@@QEAAXPEAXIH@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ReadDouble@BinaryVectorReader@@QEAAN_N@Z DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
;	COMDAT ??0BinaryVectorReader@@QEAA@AEAV?$vector@EV?$allocator@E@std@@@std@@_N@Z
_TEXT	SEGMENT
this$ = 8
Bytes$ = 16
BigEndian$dead$ = 24
??0BinaryVectorReader@@QEAA@AEAV?$vector@EV?$allocator@E@std@@@std@@_N@Z PROC ; BinaryVectorReader::BinaryVectorReader, COMDAT

; 6    : BinaryVectorReader::BinaryVectorReader(std::vector<unsigned char>& Bytes, bool BigEndian) : m_Bytes(Bytes) {}

	mov	QWORD PTR [rcx], rdx
	mov	rax, rcx
	mov	DWORD PTR [rcx+8], -1
	ret	0
??0BinaryVectorReader@@QEAA@AEAV?$vector@EV?$allocator@E@std@@@std@@_N@Z ENDP ; BinaryVectorReader::BinaryVectorReader
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
;	COMDAT ?Seek@BinaryVectorReader@@QEAAXHW4Position@1@@Z
_TEXT	SEGMENT
this$ = 8
Offset$ = 16
Position$ = 24
?Seek@BinaryVectorReader@@QEAAXHW4Position@1@@Z PROC	; BinaryVectorReader::Seek, COMDAT

; 9    : {

	mov	r9, rcx

; 10   : 	if (Position == BinaryVectorReader::Position::Begin)

	test	r8b, r8b
	jne	SHORT $LN2@Seek

; 11   : 	{
; 12   : 		this->m_Offset = Offset - 1;

	lea	eax, DWORD PTR [rdx-1]
	mov	DWORD PTR [rcx+8], eax

; 21   : 	}
; 22   : }

	ret	0
$LN2@Seek:

; 13   : 	} 
; 14   : 	else if (Position == BinaryVectorReader::Position::Current)

	cmp	r8b, 1
	jne	SHORT $LN4@Seek

; 15   : 	{
; 16   : 		this->m_Offset += Offset;

	mov	ecx, DWORD PTR [rcx+8]
	add	ecx, edx

; 21   : 	}
; 22   : }

	mov	DWORD PTR [r9+8], ecx
	ret	0
$LN4@Seek:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1868 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR [rcx]

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR [rax+8]
	sub	ecx, DWORD PTR [rax]
	sub	ecx, edx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp

; 20   : 		this->m_Offset = this->m_Bytes.size() - Offset - 2;

	sub	ecx, 2

; 21   : 	}
; 22   : }

	mov	DWORD PTR [r9+8], ecx
	ret	0
?Seek@BinaryVectorReader@@QEAAXHW4Position@1@@Z ENDP	; BinaryVectorReader::Seek
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
;	COMDAT ?GetPosition@BinaryVectorReader@@QEAAHXZ
_TEXT	SEGMENT
this$ = 8
?GetPosition@BinaryVectorReader@@QEAAHXZ PROC		; BinaryVectorReader::GetPosition, COMDAT

; 26   : 	return this->m_Offset + 1;

	mov	eax, DWORD PTR [rcx+8]
	inc	eax

; 27   : }

	ret	0
?GetPosition@BinaryVectorReader@@QEAAHXZ ENDP		; BinaryVectorReader::GetPosition
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
;	COMDAT ?GetSize@BinaryVectorReader@@QEAAIXZ
_TEXT	SEGMENT
this$ = 8
?GetSize@BinaryVectorReader@@QEAAIXZ PROC		; BinaryVectorReader::GetSize, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1868 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR [rcx]

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR [rax+8]
	sub	ecx, DWORD PTR [rax]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp

; 31   : 	return this->m_Bytes.size();

	mov	eax, ecx

; 32   : }

	ret	0
?GetSize@BinaryVectorReader@@QEAAIXZ ENDP		; BinaryVectorReader::GetSize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
;	COMDAT ?Read@BinaryVectorReader@@QEAAXPEADH@Z
_TEXT	SEGMENT
this$ = 8
Data$ = 16
Length$ = 24
?Read@BinaryVectorReader@@QEAAXPEADH@Z PROC		; BinaryVectorReader::Read, COMDAT

; 35   : {

$LN15:
	mov	QWORD PTR [rsp+8], rbx

; 36   : 	for (int i = 0; i < Length; i++) {

	movsxd	r11, r8d
	mov	rbx, rdx
	mov	r10, rcx
	test	r8d, r8d
	jle	SHORT $LN3@Read
	xor	eax, eax
	npad	11
$LL4@Read:

; 37   : 		this->m_Offset++;

	movsxd	r9, DWORD PTR [r10+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

	mov	rcx, QWORD PTR [r10]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp

; 37   : 		this->m_Offset++;

	lea	r8d, DWORD PTR [r9+1]
	mov	DWORD PTR [r10+8], r8d

; 38   : 		Data[i] = this->m_Bytes[this->m_Offset];

	mov	rdx, QWORD PTR [rcx]
	movzx	ecx, BYTE PTR [r9+rdx+1]
	mov	BYTE PTR [rax+rbx], cl
	inc	rax
	cmp	rax, r11
	jl	SHORT $LL4@Read
$LN3@Read:

; 39   : 	}
; 40   : }

	mov	rbx, QWORD PTR [rsp+8]
	ret	0
?Read@BinaryVectorReader@@QEAAXPEADH@Z ENDP		; BinaryVectorReader::Read
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
;	COMDAT ?ReadUInt8@BinaryVectorReader@@QEAAEXZ
_TEXT	SEGMENT
this$ = 8
?ReadUInt8@BinaryVectorReader@@QEAAEXZ PROC		; BinaryVectorReader::ReadUInt8, COMDAT

; 44   : 	this->m_Offset++;

	movsxd	rdx, DWORD PTR [rcx+8]
	lea	eax, DWORD PTR [rdx+1]
	mov	DWORD PTR [rcx+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

	mov	rcx, QWORD PTR [rcx]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp

; 45   : 	return this->m_Bytes[this->m_Offset];

	mov	rax, QWORD PTR [rcx]
	movzx	eax, BYTE PTR [rdx+rax+1]

; 46   : }

	ret	0
?ReadUInt8@BinaryVectorReader@@QEAAEXZ ENDP		; BinaryVectorReader::ReadUInt8
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
;	COMDAT ?ReadInt8@BinaryVectorReader@@QEAACXZ
_TEXT	SEGMENT
this$ = 8
?ReadInt8@BinaryVectorReader@@QEAACXZ PROC		; BinaryVectorReader::ReadInt8, COMDAT

; 50   : 	this->m_Offset++;

	movsxd	rdx, DWORD PTR [rcx+8]
	lea	eax, DWORD PTR [rdx+1]
	mov	DWORD PTR [rcx+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

	mov	rcx, QWORD PTR [rcx]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp

; 51   : 	return this->m_Bytes[this->m_Offset];

	mov	rax, QWORD PTR [rcx]
	movzx	eax, BYTE PTR [rdx+rax+1]

; 52   : }

	ret	0
?ReadInt8@BinaryVectorReader@@QEAACXZ ENDP		; BinaryVectorReader::ReadInt8
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
;	COMDAT ?ReadUInt16@BinaryVectorReader@@QEAAG_N@Z
_TEXT	SEGMENT
this$ = 8
BigEndian$ = 16
?ReadUInt16@BinaryVectorReader@@QEAAG_N@Z PROC		; BinaryVectorReader::ReadUInt16, COMDAT

; 56   : 	this->m_Offset += 2;

	movsxd	r8, DWORD PTR [rcx+8]
	lea	eax, DWORD PTR [r8+2]
	mov	DWORD PTR [rcx+8], eax
	mov	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR [rax]

; 57   : 	return !BigEndian ? ((static_cast<uint16_t>(this->m_Bytes[this->m_Offset - 1])) | (this->m_Bytes[this->m_Offset] << 8)) : _byteswap_ushort(((static_cast<uint16_t>(this->m_Bytes[this->m_Offset - 1])) | (this->m_Bytes[this->m_Offset] << 8)));

	movzx	eax, BYTE PTR [r8+rcx+2]
	movzx	ecx, BYTE PTR [r8+rcx+1]
	shl	ax, 8
	or	ax, cx
	test	dl, dl
	je	SHORT $LN4@ReadUInt16
	ror	ax, 8
$LN4@ReadUInt16:

; 58   : }

	ret	0
?ReadUInt16@BinaryVectorReader@@QEAAG_N@Z ENDP		; BinaryVectorReader::ReadUInt16
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
;	COMDAT ?ReadInt16@BinaryVectorReader@@QEAAF_N@Z
_TEXT	SEGMENT
this$ = 8
BigEndian$dead$ = 16
?ReadInt16@BinaryVectorReader@@QEAAF_N@Z PROC		; BinaryVectorReader::ReadInt16, COMDAT

; 62   : 	this->m_Offset += 2;

	movsxd	rdx, DWORD PTR [rcx+8]
	lea	eax, DWORD PTR [rdx+2]
	mov	DWORD PTR [rcx+8], eax
	mov	rax, QWORD PTR [rcx]

; 63   : 	return !BigEndian ? ((static_cast<int16_t>(this->m_Bytes[this->m_Offset - 1])) | (this->m_Bytes[this->m_Offset] << 8)) : _byteswap_ushort(((static_cast<int16_t>(this->m_Bytes[this->m_Offset - 1])) | (this->m_Bytes[this->m_Offset] << 8)));

	lea	ecx, DWORD PTR [rdx+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

	mov	r8, QWORD PTR [rax]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp

; 63   : 	return !BigEndian ? ((static_cast<int16_t>(this->m_Bytes[this->m_Offset - 1])) | (this->m_Bytes[this->m_Offset] << 8)) : _byteswap_ushort(((static_cast<int16_t>(this->m_Bytes[this->m_Offset - 1])) | (this->m_Bytes[this->m_Offset] << 8)));

	movzx	eax, BYTE PTR [rdx+r8+2]
	movsxd	rdx, ecx
	shl	ax, 8
	movzx	ecx, BYTE PTR [rdx+r8]
	or	ax, cx

; 64   : }

	ret	0
?ReadInt16@BinaryVectorReader@@QEAAF_N@Z ENDP		; BinaryVectorReader::ReadInt16
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
;	COMDAT ?ReadUInt32@BinaryVectorReader@@QEAAI_N@Z
_TEXT	SEGMENT
this$ = 8
BigEndian$ = 16
?ReadUInt32@BinaryVectorReader@@QEAAI_N@Z PROC		; BinaryVectorReader::ReadUInt32, COMDAT

; 75   : {

$LN24:
	mov	QWORD PTR [rsp+8], rbx

; 76   : 	this->m_Offset += 4;

	movsxd	r9, DWORD PTR [rcx+8]
	lea	eax, DWORD PTR [r9+4]
	mov	DWORD PTR [rcx+8], eax
	mov	rax, QWORD PTR [rcx]
	mov	r8, QWORD PTR [rax]
	lea	r11, QWORD PTR [r9+r8]

; 77   : 	return !BigEndian ? (static_cast<uint32_t>(this->m_Bytes[this->m_Offset - 3])) |

	test	dl, dl
	jne	SHORT $LN3@ReadUInt32
	movzx	ecx, BYTE PTR [r9+r8+2]
	movzx	eax, BYTE PTR [r9+r8+3]
	shl	eax, 8
	or	eax, ecx
	movzx	ecx, BYTE PTR [r11+4]
	shl	ecx, 24
	shl	eax, 8
	or	eax, ecx
	movzx	ecx, BYTE PTR [r9+r8+1]
	or	eax, ecx

; 78   : 		(static_cast<uint32_t>(this->m_Bytes[this->m_Offset - 2]) << 8) |
; 79   : 		(static_cast<uint32_t>(this->m_Bytes[this->m_Offset - 1]) << 16) |
; 80   : 		static_cast<uint32_t>(this->m_Bytes[this->m_Offset] << 24) : _byteswap_ulong(static_cast<uint32_t>(this->m_Bytes[this->m_Offset - 3]) |
; 81   : 			(static_cast<uint32_t>(this->m_Bytes[this->m_Offset - 2]) << 8) |
; 82   : 			(static_cast<uint32_t>(this->m_Bytes[this->m_Offset - 1]) << 16) |
; 83   : 			static_cast<uint32_t>(this->m_Bytes[this->m_Offset] << 24));
; 84   : }

	mov	rbx, QWORD PTR [rsp+8]
	ret	0
$LN3@ReadUInt32:
	mov	rbx, QWORD PTR [rsp+8]
	lea	eax, DWORD PTR [r9+3]
	movsxd	rcx, eax
	movzx	eax, BYTE PTR [rcx+r8]
	movzx	ecx, BYTE PTR [r9+r8+2]
	shl	eax, 8
	or	eax, ecx
	movzx	ecx, BYTE PTR [r11+4]
	shl	eax, 8
	shl	ecx, 24
	or	eax, ecx
	movzx	ecx, BYTE PTR [r9+r8+1]
	or	eax, ecx
	bswap	eax
	ret	0
?ReadUInt32@BinaryVectorReader@@QEAAI_N@Z ENDP		; BinaryVectorReader::ReadUInt32
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
;	COMDAT ?ReadInt32@BinaryVectorReader@@QEAAH_N@Z
_TEXT	SEGMENT
this$ = 8
BigEndian$ = 16
?ReadInt32@BinaryVectorReader@@QEAAH_N@Z PROC		; BinaryVectorReader::ReadInt32, COMDAT

; 88   : 	this->m_Offset += 4;

	movsxd	r8, DWORD PTR [rcx+8]
	lea	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [rcx+8], eax
	mov	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR [rax]
	lea	r10, QWORD PTR [rcx+r8]
	lea	r11, QWORD PTR [rcx+r8]

; 89   : 	return !BigEndian ? (static_cast<int32_t>(this->m_Bytes[this->m_Offset - 3])) |

	test	dl, dl
	jne	SHORT $LN3@ReadInt32
	movzx	eax, BYTE PTR [r8+rcx+4]
	movzx	ecx, BYTE PTR [r8+rcx+3]
	shl	eax, 8
	or	eax, ecx
	movzx	ecx, BYTE PTR [r10+2]
	shl	eax, 8
	or	eax, ecx
	movzx	ecx, BYTE PTR [r11+1]
	shl	eax, 8
	or	eax, ecx

; 90   : 		(static_cast<int32_t>(this->m_Bytes[this->m_Offset - 2]) << 8) |
; 91   : 		(static_cast<int32_t>(this->m_Bytes[this->m_Offset - 1]) << 16) |
; 92   : 		static_cast<int32_t>(this->m_Bytes[this->m_Offset] << 24) : _byteswap_ulong(static_cast<int32_t>(this->m_Bytes[this->m_Offset - 3])) |
; 93   : 			(static_cast<int32_t>(this->m_Bytes[this->m_Offset - 2]) << 8) |
; 94   : 			(static_cast<int32_t>(this->m_Bytes[this->m_Offset - 1]) << 16) |
; 95   : 			static_cast<int32_t>(this->m_Bytes[this->m_Offset] << 24);
; 96   : }

	ret	0
$LN3@ReadInt32:

; 89   : 	return !BigEndian ? (static_cast<int32_t>(this->m_Bytes[this->m_Offset - 3])) |

	movzx	edx, BYTE PTR [r8+rcx+4]
	movzx	ecx, BYTE PTR [r8+rcx+3]
	movzx	eax, BYTE PTR [r11+1]
	shl	edx, 8
	or	edx, ecx
	movzx	ecx, BYTE PTR [r10+2]
	shl	edx, 8
	or	edx, ecx
	shl	edx, 8
	bswap	eax
	or	eax, edx

; 90   : 		(static_cast<int32_t>(this->m_Bytes[this->m_Offset - 2]) << 8) |
; 91   : 		(static_cast<int32_t>(this->m_Bytes[this->m_Offset - 1]) << 16) |
; 92   : 		static_cast<int32_t>(this->m_Bytes[this->m_Offset] << 24) : _byteswap_ulong(static_cast<int32_t>(this->m_Bytes[this->m_Offset - 3])) |
; 93   : 			(static_cast<int32_t>(this->m_Bytes[this->m_Offset - 2]) << 8) |
; 94   : 			(static_cast<int32_t>(this->m_Bytes[this->m_Offset - 1]) << 16) |
; 95   : 			static_cast<int32_t>(this->m_Bytes[this->m_Offset] << 24);
; 96   : }

	ret	0
?ReadInt32@BinaryVectorReader@@QEAAH_N@Z ENDP		; BinaryVectorReader::ReadInt32
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
;	COMDAT ?ReadFloat@BinaryVectorReader@@QEAAM_N@Z
_TEXT	SEGMENT
this$ = 48
BigEndian$ = 56
Result$ = 64
?ReadFloat@BinaryVectorReader@@QEAAM_N@Z PROC		; BinaryVectorReader::ReadFloat, COMDAT

; 127  : {

$LN4:
	sub	rsp, 40					; 00000028H

; 128  : 	float Result;
; 129  : 	uint32_t Temp = this->ReadUInt32(BigEndian);

	call	?ReadUInt32@BinaryVectorReader@@QEAAI_N@Z ; BinaryVectorReader::ReadUInt32
	mov	DWORD PTR Result$[rsp], eax

; 130  : 	memcpy(&Result, &Temp, sizeof(Result));
; 131  : 	return Result;

	movss	xmm0, DWORD PTR Result$[rsp]

; 132  : }

	add	rsp, 40					; 00000028H
	ret	0
?ReadFloat@BinaryVectorReader@@QEAAM_N@Z ENDP		; BinaryVectorReader::ReadFloat
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
;	COMDAT ?ReadStruct@BinaryVectorReader@@QEAAXPEAXIH@Z
_TEXT	SEGMENT
this$ = 48
Dest$ = 56
Size$ = 64
Offset$dead$ = 72
?ReadStruct@BinaryVectorReader@@QEAAXPEAXIH@Z PROC	; BinaryVectorReader::ReadStruct, COMDAT

; 143  : {

$LN15:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 144  : 	if (Offset != -1) this->Seek(Offset, BinaryVectorReader::Position::Begin);
; 145  : 	
; 146  : 	std::memcpy(Dest, this->m_Bytes.data() + this->m_Offset + 1, Size);

	mov	rax, QWORD PTR [rcx]
	mov	r11, rdx
	movsxd	r10, DWORD PTR [rcx+8]
	mov	rbx, rcx
	inc	r10
	mov	edi, r8d
	mov	r8d, r8d
	mov	rcx, r11
	mov	rdx, QWORD PTR [rax]
	add	rdx, r10
	call	memcpy

; 147  : 
; 148  : 	//std::memcopy(this->m_Bytes.begin() + this->m_Offset + 1, this->m_Bytes.begin() + this->m_Offset + 1 + Size, static_cast<char*>(Dest));
; 149  : 
; 150  : 	this->m_Offset += Size;

	add	DWORD PTR [rbx+8], edi

; 151  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?ReadStruct@BinaryVectorReader@@QEAAXPEAXIH@Z ENDP	; BinaryVectorReader::ReadStruct
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
;	COMDAT ?ReadUInt64@BinaryVectorReader@@QEAA_K_N@Z
_TEXT	SEGMENT
this$ = 8
BigEndian$ = 16
?ReadUInt64@BinaryVectorReader@@QEAA_K_N@Z PROC		; BinaryVectorReader::ReadUInt64, COMDAT

; 100  : 	this->m_Offset += 8;

	movsxd	r9, DWORD PTR [rcx+8]
	movzx	r10d, dl
	lea	eax, DWORD PTR [r9+8]
	mov	DWORD PTR [rcx+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

	mov	rax, QWORD PTR [rcx]
	mov	r8, QWORD PTR [rax]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp

; 101  : 	uint64_t Data = (static_cast<uint64_t>(this->m_Bytes[this->m_Offset - 7])) |

	lea	eax, DWORD PTR [r9+7]
	movsxd	rcx, eax
	movzx	r11d, BYTE PTR [r9+r8+8]
	movzx	eax, BYTE PTR [rcx+r8]
	shl	r11, 8
	or	r11, rax
	lea	eax, DWORD PTR [r9+6]
	shl	r11, 8
	movsxd	rcx, eax
	movzx	eax, BYTE PTR [rcx+r8]
	or	r11, rax
	lea	eax, DWORD PTR [r9+5]
	shl	r11, 8
	movsxd	rcx, eax
	movzx	eax, BYTE PTR [rcx+r8]
	or	r11, rax
	lea	eax, DWORD PTR [r9+4]
	shl	r11, 8
	movsxd	rcx, eax
	movzx	eax, BYTE PTR [rcx+r8]
	or	r11, rax
	lea	eax, DWORD PTR [r9+3]
	shl	r11, 8
	movsxd	rcx, eax
	movzx	eax, BYTE PTR [rcx+r8]
	or	r11, rax
	lea	eax, DWORD PTR [r9+2]
	shl	r11, 8
	movsxd	rcx, eax
	movzx	eax, BYTE PTR [rcx+r8]
	lea	ecx, DWORD PTR [r9+1]
	or	r11, rax
	movsxd	rdx, ecx
	shl	r11, 8
	movzx	ecx, BYTE PTR [rdx+r8]
	or	r11, rcx

; 102  : 		(static_cast<uint64_t>(this->m_Bytes[this->m_Offset - 6]) << 8) |
; 103  : 		(static_cast<uint64_t>(this->m_Bytes[this->m_Offset - 5]) << 16) |
; 104  : 		(static_cast<uint64_t>(this->m_Bytes[this->m_Offset - 4]) << 24) |
; 105  : 		(static_cast<uint64_t>(this->m_Bytes[this->m_Offset - 3]) << 32) |
; 106  : 		(static_cast<uint64_t>(this->m_Bytes[this->m_Offset - 2]) << 40) |
; 107  : 		(static_cast<uint64_t>(this->m_Bytes[this->m_Offset - 1]) << 48) |
; 108  : 		(static_cast<uint64_t>(this->m_Bytes[this->m_Offset]) << 56);
; 109  : 	return BigEndian ? _byteswap_uint64(Data) : Data;

	test	r10b, r10b
	je	SHORT $LN3@ReadUInt64
	bswap	r11
$LN3@ReadUInt64:

; 110  : }

	mov	rax, r11
	ret	0
?ReadUInt64@BinaryVectorReader@@QEAA_K_N@Z ENDP		; BinaryVectorReader::ReadUInt64
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
;	COMDAT ?ReadInt64@BinaryVectorReader@@QEAA_J_N@Z
_TEXT	SEGMENT
this$ = 8
BigEndian$ = 16
?ReadInt64@BinaryVectorReader@@QEAA_J_N@Z PROC		; BinaryVectorReader::ReadInt64, COMDAT

; 114  : 	this->m_Offset += 8;

	movsxd	r9, DWORD PTR [rcx+8]
	movzx	r10d, dl
	lea	eax, DWORD PTR [r9+8]
	mov	DWORD PTR [rcx+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

	mov	rax, QWORD PTR [rcx]
	mov	r8, QWORD PTR [rax]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp

; 115  : 	uint64_t Data = (static_cast<int64_t>(this->m_Bytes[this->m_Offset - 7])) |

	lea	eax, DWORD PTR [r9+7]
	movsxd	rcx, eax
	lea	eax, DWORD PTR [r9+6]
	movzx	r11d, BYTE PTR [rcx+r8]
	movzx	ecx, BYTE PTR [r9+r8+8]
	shl	rcx, 8
	or	r11, rcx
	movsxd	rcx, eax
	shl	r11, 8
	movzx	eax, BYTE PTR [rcx+r8]
	or	r11, rax
	lea	eax, DWORD PTR [r9+5]
	shl	r11, 8
	movsxd	rcx, eax
	movzx	eax, BYTE PTR [rcx+r8]
	or	r11, rax
	lea	eax, DWORD PTR [r9+4]
	shl	r11, 8
	movsxd	rcx, eax
	movzx	eax, BYTE PTR [rcx+r8]
	or	r11, rax
	lea	eax, DWORD PTR [r9+3]
	shl	r11, 8
	movsxd	rcx, eax
	movzx	eax, BYTE PTR [rcx+r8]
	or	r11, rax
	lea	eax, DWORD PTR [r9+2]
	shl	r11, 8
	movsxd	rcx, eax
	movzx	eax, BYTE PTR [rcx+r8]
	lea	ecx, DWORD PTR [r9+1]
	or	r11, rax
	movsxd	rdx, ecx
	shl	r11, 8
	movzx	ecx, BYTE PTR [rdx+r8]
	or	r11, rcx

; 116  : 		(static_cast<int64_t>(this->m_Bytes[this->m_Offset - 6]) << 8) |
; 117  : 		(static_cast<int64_t>(this->m_Bytes[this->m_Offset - 5]) << 16) |
; 118  : 		(static_cast<int64_t>(this->m_Bytes[this->m_Offset - 4]) << 24) |
; 119  : 		(static_cast<int64_t>(this->m_Bytes[this->m_Offset - 3]) << 32) |
; 120  : 		(static_cast<int64_t>(this->m_Bytes[this->m_Offset - 2]) << 40) |
; 121  : 		(static_cast<int64_t>(this->m_Bytes[this->m_Offset - 1]) << 48) |
; 122  : 		(static_cast<int64_t>(this->m_Bytes[this->m_Offset]) << 56);
; 123  : 	return BigEndian ? _byteswap_uint64(Data) : Data;

	test	r10b, r10b
	je	SHORT $LN3@ReadInt64
	bswap	r11
$LN3@ReadInt64:

; 124  : }

	mov	rax, r11
	ret	0
?ReadInt64@BinaryVectorReader@@QEAA_J_N@Z ENDP		; BinaryVectorReader::ReadInt64
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
;	COMDAT ?ReadUInt24@BinaryVectorReader@@QEAAI_N@Z
_TEXT	SEGMENT
this$ = 8
BigEndian$ = 16
?ReadUInt24@BinaryVectorReader@@QEAAI_N@Z PROC		; BinaryVectorReader::ReadUInt24, COMDAT

; 67   : 	this->m_Offset += 3;

	movsxd	r9, DWORD PTR [rcx+8]
	movzx	r10d, dl
	lea	eax, DWORD PTR [r9+3]
	mov	DWORD PTR [rcx+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1889 :         return _My_data._Myfirst[_Pos];

	mov	rax, QWORD PTR [rcx]
	mov	r8, QWORD PTR [rax]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp

; 68   : 	uint32_t Value = (static_cast<uint32_t>(this->m_Bytes[this->m_Offset - 2])) |

	lea	eax, DWORD PTR [r9+2]
	movsxd	rcx, eax
	movzx	r11d, BYTE PTR [rcx+r8]
	movzx	ecx, BYTE PTR [r9+r8+3]
	shl	ecx, 8
	or	r11d, ecx
	lea	ecx, DWORD PTR [r9+1]
	shl	r11d, 8
	movsxd	rdx, ecx
	movzx	ecx, BYTE PTR [rdx+r8]
	or	r11d, ecx

; 69   : 		(static_cast<uint32_t>(this->m_Bytes[this->m_Offset - 1]) << 8) |
; 70   : 		(static_cast<uint32_t>(this->m_Bytes[this->m_Offset]) << 16);
; 71   : 	return !BigEndian ? Value : (_byteswap_ulong(Value) >> 8);

	test	r10b, r10b
	je	SHORT $LN11@ReadUInt24
	bswap	r11d
	shr	r11d, 8
$LN11@ReadUInt24:

; 72   : }

	mov	eax, r11d
	ret	0
?ReadUInt24@BinaryVectorReader@@QEAAI_N@Z ENDP		; BinaryVectorReader::ReadUInt24
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
;	COMDAT ?ReadDouble@BinaryVectorReader@@QEAAN_N@Z
_TEXT	SEGMENT
this$ = 48
BigEndian$ = 56
Temp$ = 64
Result$ = 64
?ReadDouble@BinaryVectorReader@@QEAAN_N@Z PROC		; BinaryVectorReader::ReadDouble, COMDAT

; 135  : {

$LN4:
	sub	rsp, 40					; 00000028H

; 136  : 	double Result;
; 137  : 	uint32_t Temp = this->ReadUInt64(BigEndian);

	call	?ReadUInt64@BinaryVectorReader@@QEAA_K_N@Z ; BinaryVectorReader::ReadUInt64
	mov	DWORD PTR Temp$[rsp], eax

; 138  : 	memcpy(&Result, &Temp, sizeof(Result));

	mov	rax, QWORD PTR Temp$[rsp]
	mov	QWORD PTR Result$[rsp], rax

; 139  : 	return Result;

	movsd	xmm0, QWORD PTR Result$[rsp]

; 140  : }

	add	rsp, 40					; 00000028H
	ret	0
?ReadDouble@BinaryVectorReader@@QEAAN_N@Z ENDP		; BinaryVectorReader::ReadDouble
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorReader.cpp
;	COMDAT ?Align@BinaryVectorReader@@QEAAXI@Z
_TEXT	SEGMENT
this$ = 8
Alignment$ = 16
?Align@BinaryVectorReader@@QEAAXI@Z PROC		; BinaryVectorReader::Align, COMDAT

; 26   : 	return this->m_Offset + 1;

	mov	r8d, DWORD PTR [rcx+8]

; 189  : {

	mov	r9d, edx

; 190  : 	while (GetPosition() % Alignment != 0)

	xor	edx, edx

; 26   : 	return this->m_Offset + 1;

	lea	eax, DWORD PTR [r8+1]

; 190  : 	while (GetPosition() % Alignment != 0)

	div	r9d
	test	edx, edx
	je	SHORT $LN3@Align
	npad	12
$LL2@Align:

; 16   : 		this->m_Offset += Offset;

	inc	r8d

; 190  : 	while (GetPosition() % Alignment != 0)

	xor	edx, edx

; 26   : 	return this->m_Offset + 1;

	lea	eax, DWORD PTR [r8+1]

; 190  : 	while (GetPosition() % Alignment != 0)

	div	r9d
	test	edx, edx
	jne	SHORT $LL2@Align
	mov	DWORD PTR [rcx+8], r8d
$LN3@Align:

; 191  : 		Seek(1, BinaryVectorReader::Position::Current);
; 192  : }

	ret	0
?Align@BinaryVectorReader@@QEAAXI@Z ENDP		; BinaryVectorReader::Align
_TEXT	ENDS
END
