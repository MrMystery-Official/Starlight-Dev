; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?Func@PopupGeneralInputString@@3P6AXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ZEA ; PopupGeneralInputString::Func
PUBLIC	?IsOpen@PopupGeneralInputString@@3_NA		; PopupGeneralInputString::IsOpen
	ALIGN	8

?Func@PopupGeneralInputString@@3P6AXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ZEA DQ 01H DUP (?) ; PopupGeneralInputString::Func
?IsOpen@PopupGeneralInputString@@3_NA DB 01H DUP (?)	; PopupGeneralInputString::IsOpen
_BSS	ENDS
PUBLIC	?Open@PopupGeneralInputString@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00P6AX0@Z@Z ; PopupGeneralInputString::Open
PUBLIC	?Render@PopupGeneralInputString@@YAXXZ		; PopupGeneralInputString::Render
PUBLIC	?Key@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; PopupGeneralInputString::Key
PUBLIC	?Value@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; PopupGeneralInputString::Value
PUBLIC	?ConfirmButtonText@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; PopupGeneralInputString::ConfirmButtonText
PUBLIC	?PopupTitle@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; PopupGeneralInputString::PopupTitle
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Open@PopupGeneralInputString@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00P6AX0@Z@Z DD imagerel $LN47
	DD	imagerel $LN47+230
	DD	imagerel $unwind$?Open@PopupGeneralInputString@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00P6AX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Render@PopupGeneralInputString@@YAXXZ DD imagerel $LN432
	DD	imagerel $LN432+1434
	DD	imagerel $unwind$?Render@PopupGeneralInputString@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__FConfirmButtonText@PopupGeneralInputString@@YAXXZ DD imagerel ??__FConfirmButtonText@PopupGeneralInputString@@YAXXZ
	DD	imagerel ??__FConfirmButtonText@PopupGeneralInputString@@YAXXZ+100
	DD	imagerel $unwind$??__FConfirmButtonText@PopupGeneralInputString@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__FPopupTitle@PopupGeneralInputString@@YAXXZ DD imagerel ??__FPopupTitle@PopupGeneralInputString@@YAXXZ
	DD	imagerel ??__FPopupTitle@PopupGeneralInputString@@YAXXZ+100
	DD	imagerel $unwind$??__FPopupTitle@PopupGeneralInputString@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__FValue@PopupGeneralInputString@@YAXXZ DD imagerel ??__FValue@PopupGeneralInputString@@YAXXZ
	DD	imagerel ??__FValue@PopupGeneralInputString@@YAXXZ+100
	DD	imagerel $unwind$??__FValue@PopupGeneralInputString@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__FKey@PopupGeneralInputString@@YAXXZ DD imagerel ??__FKey@PopupGeneralInputString@@YAXXZ
	DD	imagerel ??__FKey@PopupGeneralInputString@@YAXXZ+100
	DD	imagerel $unwind$??__FKey@PopupGeneralInputString@@YAXXZ
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__FKey@PopupGeneralInputString@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__FValue@PopupGeneralInputString@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__FPopupTitle@PopupGeneralInputString@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__FConfirmButtonText@PopupGeneralInputString@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Render@PopupGeneralInputString@@YAXXZ DB 010H
	DB	019H, 02H
	DB	00H
	DB	05H, 09H
	DB	02H
	DB	0c0H
	DB	04H
	DB	086H
	DB	06H
	DB	0e2H
	DB	08H
	DB	'$'
	DB	0aH
	DB	'('
	DB	08H
	DB	0a9H, 05H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Render@PopupGeneralInputString@@YAXXZ DB 0aH
	DB	0aH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	021H
	DB	02H
	DB	03aH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	090H
	DB	032H
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	021H
	DB	03H
	DB	03aH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	0a1H
	DB	02H
	DB	03aH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	0d0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?Render@PopupGeneralInputString@@YAXXZ DB 028H
	DD	imagerel $stateUnwindMap$?Render@PopupGeneralInputString@@YAXXZ
	DD	imagerel $ip2state$?Render@PopupGeneralInputString@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Render@PopupGeneralInputString@@YAXXZ DD 0b2d19H
	DD	0f681fH
	DD	024741bH
	DD	023641bH
	DD	022341bH
	DD	020011bH
	DD	05010H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?Render@PopupGeneralInputString@@YAXXZ
	DD	0eaH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Open@PopupGeneralInputString@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00P6AX0@Z@Z DB 06H
	DB	0a0H
	DB	06H
	DB	0ceH
	DB	04H
	DB	'D'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Open@PopupGeneralInputString@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00P6AX0@Z@Z DB 06H
	DB	0cH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	060H
	DB	034H
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	050H
	DB	034H
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?Open@PopupGeneralInputString@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00P6AX0@Z@Z DB 028H
	DD	imagerel $stateUnwindMap$?Open@PopupGeneralInputString@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00P6AX0@Z@Z
	DD	imagerel $ip2state$?Open@PopupGeneralInputString@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00P6AX0@Z@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Open@PopupGeneralInputString@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00P6AX0@Z@Z DD 041719H
	DD	070047208H
	DD	030026003H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?Open@PopupGeneralInputString@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00P6AX0@Z@Z
	DD	03aH
?Key@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 00H ; PopupGeneralInputString::Key
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DQ	0000000000000000H
	DQ	000000000000000fH
?Value@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 00H ; PopupGeneralInputString::Value
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DQ	0000000000000000H
	DQ	000000000000000fH
?ConfirmButtonText@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 00H ; PopupGeneralInputString::ConfirmButtonText
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DQ	0000000000000000H
	DQ	000000000000000fH
?PopupTitle@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 00H ; PopupGeneralInputString::PopupTitle
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DQ	0000000000000000H
	DQ	000000000000000fH
?Key$initializer$@PopupGeneralInputString@@3P6AXXZEA DQ FLAT:??__FKey@PopupGeneralInputString@@YAXXZ ; PopupGeneralInputString::Key$initializer$
?Value$initializer$@PopupGeneralInputString@@3P6AXXZEA DQ FLAT:??__FValue@PopupGeneralInputString@@YAXXZ ; PopupGeneralInputString::Value$initializer$
?PopupTitle$initializer$@PopupGeneralInputString@@3P6AXXZEA DQ FLAT:??__FPopupTitle@PopupGeneralInputString@@YAXXZ ; PopupGeneralInputString::PopupTitle$initializer$
?ConfirmButtonText$initializer$@PopupGeneralInputString@@3P6AXXZEA DQ FLAT:??__FConfirmButtonText@PopupGeneralInputString@@YAXXZ ; PopupGeneralInputString::ConfirmButtonText$initializer$
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp
;	COMDAT ??__FKey@PopupGeneralInputString@@YAXXZ
text$di	SEGMENT
??__FKey@PopupGeneralInputString@@YAXXZ PROC		; PopupGeneralInputString::`dynamic atexit destructor for 'Key'', COMDAT

; 8    : std::string PopupGeneralInputString::Key = "";

	lea	rcx, OFFSET FLAT:??__FKey@PopupGeneralInputString@@YAXXZ ; PopupGeneralInputString::`dynamic atexit destructor for 'Key''
	jmp	atexit
??__FKey@PopupGeneralInputString@@YAXXZ ENDP		; PopupGeneralInputString::`dynamic atexit destructor for 'Key''
text$di	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??__FKey@PopupGeneralInputString@@YAXXZ
text$yd	SEGMENT
??__FKey@PopupGeneralInputString@@YAXXZ PROC		; PopupGeneralInputString::`dynamic atexit destructor for 'Key'', COMDAT
	sub	rsp, 40					; 00000028H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

	mov	rdx, QWORD PTR ?Key@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+24
	cmp	rdx, 16

; 4832 :         if (_My_data._Large_string_engaged()) {

	jb	SHORT $LN15@dynamic
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rcx, QWORD PTR ?Key@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN27@dynamic

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	r8, QWORD PTR [rcx-8]
	add	rdx, 39					; 00000027H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	sub	rcx, r8

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	lea	rax, QWORD PTR [rcx-8]
	cmp	rax, 31
	ja	SHORT $LN24@dynamic

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rcx, r8
$LN27@dynamic:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
$LN15@dynamic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

	movdqa	xmm0, XMMWORD PTR __xmm@000000000000000f0000000000000000
	movdqa	XMMWORD PTR ?Key@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, xmm0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;
; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR ?Key@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
	add	rsp, 40					; 00000028H
	ret	0
$LN24@dynamic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN33@dynamic:
??__FKey@PopupGeneralInputString@@YAXXZ ENDP		; PopupGeneralInputString::`dynamic atexit destructor for 'Key''
text$yd	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp
;	COMDAT ??__FValue@PopupGeneralInputString@@YAXXZ
text$di	SEGMENT
??__FValue@PopupGeneralInputString@@YAXXZ PROC		; PopupGeneralInputString::`dynamic atexit destructor for 'Value'', COMDAT

; 9    : std::string PopupGeneralInputString::Value = "";

	lea	rcx, OFFSET FLAT:??__FValue@PopupGeneralInputString@@YAXXZ ; PopupGeneralInputString::`dynamic atexit destructor for 'Value''
	jmp	atexit
??__FValue@PopupGeneralInputString@@YAXXZ ENDP		; PopupGeneralInputString::`dynamic atexit destructor for 'Value''
text$di	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??__FValue@PopupGeneralInputString@@YAXXZ
text$yd	SEGMENT
??__FValue@PopupGeneralInputString@@YAXXZ PROC		; PopupGeneralInputString::`dynamic atexit destructor for 'Value'', COMDAT
	sub	rsp, 40					; 00000028H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

	mov	rdx, QWORD PTR ?Value@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+24
	cmp	rdx, 16

; 4832 :         if (_My_data._Large_string_engaged()) {

	jb	SHORT $LN15@dynamic
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rcx, QWORD PTR ?Value@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN27@dynamic

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	r8, QWORD PTR [rcx-8]
	add	rdx, 39					; 00000027H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	sub	rcx, r8

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	lea	rax, QWORD PTR [rcx-8]
	cmp	rax, 31
	ja	SHORT $LN24@dynamic

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rcx, r8
$LN27@dynamic:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
$LN15@dynamic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

	movdqa	xmm0, XMMWORD PTR __xmm@000000000000000f0000000000000000
	movdqa	XMMWORD PTR ?Value@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, xmm0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;
; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR ?Value@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
	add	rsp, 40					; 00000028H
	ret	0
$LN24@dynamic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN33@dynamic:
??__FValue@PopupGeneralInputString@@YAXXZ ENDP		; PopupGeneralInputString::`dynamic atexit destructor for 'Value''
text$yd	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp
;	COMDAT ??__FPopupTitle@PopupGeneralInputString@@YAXXZ
text$di	SEGMENT
??__FPopupTitle@PopupGeneralInputString@@YAXXZ PROC	; PopupGeneralInputString::`dynamic atexit destructor for 'PopupTitle'', COMDAT

; 11   : std::string PopupGeneralInputString::PopupTitle = "";

	lea	rcx, OFFSET FLAT:??__FPopupTitle@PopupGeneralInputString@@YAXXZ ; PopupGeneralInputString::`dynamic atexit destructor for 'PopupTitle''
	jmp	atexit
??__FPopupTitle@PopupGeneralInputString@@YAXXZ ENDP	; PopupGeneralInputString::`dynamic atexit destructor for 'PopupTitle''
text$di	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??__FPopupTitle@PopupGeneralInputString@@YAXXZ
text$yd	SEGMENT
??__FPopupTitle@PopupGeneralInputString@@YAXXZ PROC	; PopupGeneralInputString::`dynamic atexit destructor for 'PopupTitle'', COMDAT
	sub	rsp, 40					; 00000028H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

	mov	rdx, QWORD PTR ?PopupTitle@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+24
	cmp	rdx, 16

; 4832 :         if (_My_data._Large_string_engaged()) {

	jb	SHORT $LN15@dynamic
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rcx, QWORD PTR ?PopupTitle@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN27@dynamic

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	r8, QWORD PTR [rcx-8]
	add	rdx, 39					; 00000027H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	sub	rcx, r8

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	lea	rax, QWORD PTR [rcx-8]
	cmp	rax, 31
	ja	SHORT $LN24@dynamic

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rcx, r8
$LN27@dynamic:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
$LN15@dynamic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

	movdqa	xmm0, XMMWORD PTR __xmm@000000000000000f0000000000000000
	movdqa	XMMWORD PTR ?PopupTitle@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, xmm0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;
; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR ?PopupTitle@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
	add	rsp, 40					; 00000028H
	ret	0
$LN24@dynamic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN33@dynamic:
??__FPopupTitle@PopupGeneralInputString@@YAXXZ ENDP	; PopupGeneralInputString::`dynamic atexit destructor for 'PopupTitle''
text$yd	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp
;	COMDAT ??__FConfirmButtonText@PopupGeneralInputString@@YAXXZ
text$di	SEGMENT
??__FConfirmButtonText@PopupGeneralInputString@@YAXXZ PROC ; PopupGeneralInputString::`dynamic atexit destructor for 'ConfirmButtonText'', COMDAT

; 12   : std::string PopupGeneralInputString::ConfirmButtonText = "";

	lea	rcx, OFFSET FLAT:??__FConfirmButtonText@PopupGeneralInputString@@YAXXZ ; PopupGeneralInputString::`dynamic atexit destructor for 'ConfirmButtonText''
	jmp	atexit
??__FConfirmButtonText@PopupGeneralInputString@@YAXXZ ENDP ; PopupGeneralInputString::`dynamic atexit destructor for 'ConfirmButtonText''
text$di	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??__FConfirmButtonText@PopupGeneralInputString@@YAXXZ
text$yd	SEGMENT
??__FConfirmButtonText@PopupGeneralInputString@@YAXXZ PROC ; PopupGeneralInputString::`dynamic atexit destructor for 'ConfirmButtonText'', COMDAT
	sub	rsp, 40					; 00000028H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

	mov	rdx, QWORD PTR ?ConfirmButtonText@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+24
	cmp	rdx, 16

; 4832 :         if (_My_data._Large_string_engaged()) {

	jb	SHORT $LN15@dynamic
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rcx, QWORD PTR ?ConfirmButtonText@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN27@dynamic

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	r8, QWORD PTR [rcx-8]
	add	rdx, 39					; 00000027H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	sub	rcx, r8

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	lea	rax, QWORD PTR [rcx-8]
	cmp	rax, 31
	ja	SHORT $LN24@dynamic

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rcx, r8
$LN27@dynamic:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
$LN15@dynamic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

	movdqa	xmm0, XMMWORD PTR __xmm@000000000000000f0000000000000000
	movdqa	XMMWORD PTR ?ConfirmButtonText@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, xmm0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;
; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR ?ConfirmButtonText@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
	add	rsp, 40					; 00000028H
	ret	0
$LN24@dynamic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN33@dynamic:
??__FConfirmButtonText@PopupGeneralInputString@@YAXXZ ENDP ; PopupGeneralInputString::`dynamic atexit destructor for 'ConfirmButtonText''
text$yd	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\imgui\imgui.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\imgui\imgui_stdlib.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\imgui\imgui.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\imgui\imgui_widgets.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\imgui\imgui.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\imgui\imgui_widgets.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\imgui\imgui.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\imgui\imgui_widgets.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\imgui\imgui.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\string
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\string
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\imgui\imgui.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\string
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\string
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp
;	COMDAT ?Render@PopupGeneralInputString@@YAXXZ
_TEXT	SEGMENT
$T4 = 64
$T5 = 64
$T6 = 64
$T7 = 72
$T8 = 104
$T9 = 136
$T10 = 168
$T11 = 168
cb_user_data$12 = 200
$T13 = 200
__$ArrayPad$ = 232
?Render@PopupGeneralInputString@@YAXXZ PROC		; PopupGeneralInputString::Render, COMDAT

; 15   : {

$LN432:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rsi
	mov	QWORD PTR [rax+24], rdi
	push	rbp
	lea	rbp, QWORD PTR [rax-95]
	sub	rsp, 256				; 00000100H
	movaps	XMMWORD PTR [rax-24], xmm6
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-169], rax
	xor	edi, edi

; 16   : 	if (IsOpen)

	cmp	BYTE PTR ?IsOpen@PopupGeneralInputString@@3_NA, dil ; PopupGeneralInputString::IsOpen
	je	$LN2@Render

; 17   : 	{
; 18   : 		UIMapView::RenderSettings.AllowSelectingActor = false;

	mov	BYTE PTR ?RenderSettings@UIMapView@@3URenderingSettingsStruct@1@A+5, dil
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\imgui\imgui.cpp

; 8124 :     ImGuiContext& g = *GImGui;

	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui

; 8125 :     IM_ASSERT(cond == 0 || ImIsPowerOfTwo(cond)); // Make sure the user doesn't attempt to combine multiple condition flags.
; 8126 :     g.NextWindowData.Flags |= ImGuiNextWindowDataFlags_HasSize;

	or	DWORD PTR [rax+18680], 2

; 8127 :     g.NextWindowData.SizeVal = size;

	mov	DWORD PTR [rax+18716], 1135017984	; 43a70000H
	mov	DWORD PTR [rax+18720], 1118830592	; 42b00000H

; 8128 :     g.NextWindowData.SizeCond = cond ? cond : ImGuiCond_Always;

	mov	DWORD PTR [rax+18688], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

	lea	rcx, OFFSET FLAT:?PopupTitle@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; PopupGeneralInputString::PopupTitle
	cmp	QWORD PTR ?PopupTitle@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+24, 16
	cmovae	rcx, QWORD PTR ?PopupTitle@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp

; 20   : 		ImGui::OpenPopup(PopupTitle.c_str());

	call	?OpenPopup@ImGui@@YAXPEBDH@Z		; ImGui::OpenPopup
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

	lea	rcx, OFFSET FLAT:?PopupTitle@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; PopupGeneralInputString::PopupTitle
	cmp	QWORD PTR ?PopupTitle@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+24, 16
	cmovae	rcx, QWORD PTR ?PopupTitle@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp

; 21   : 		if (ImGui::BeginPopupModal(PopupTitle.c_str()))

	xor	r8d, r8d
	call	?BeginPopupModal@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginPopupModal
	movss	xmm6, DWORD PTR __real@bf800000
	test	al, al
	je	$LN5@Render
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

	lea	rcx, OFFSET FLAT:?Key@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; PopupGeneralInputString::Key
	cmp	QWORD PTR ?Key@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+24, 16
	cmovae	rcx, QWORD PTR ?Key@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\imgui\imgui_stdlib.cpp

; 53   :     cb_user_data.Str = str;

	lea	rsi, OFFSET FLAT:?Value@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; PopupGeneralInputString::Value
	mov	QWORD PTR cb_user_data$12[rbp-169], rsi

; 54   :     cb_user_data.ChainCallback = callback;

	mov	QWORD PTR cb_user_data$12[rbp-161], rdi

; 55   :     cb_user_data.ChainCallbackUserData = user_data;

	mov	QWORD PTR cb_user_data$12[rbp-153], rdi

; 56   :     return InputText(label, (char*)str->c_str(), str->capacity() + 1, flags, InputTextCallback, &cb_user_data);

	mov	rax, QWORD PTR ?Value@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+24
	lea	r9, QWORD PTR [rax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

	mov	r8, rsi
	cmp	rax, 16
	cmovae	r8, QWORD PTR ?Value@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\imgui\imgui.h

; 270  :     constexpr ImVec2(float _x, float _y)    : x(_x), y(_y) { }

	mov	QWORD PTR $T4[rbp-169], rdi
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\imgui\imgui_widgets.cpp

; 3658 :     return InputTextEx(label, NULL, buf, (int)buf_size, ImVec2(0, 0), flags, callback, user_data);

	lea	rax, QWORD PTR cb_user_data$12[rbp-169]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, OFFSET FLAT:?InputTextCallback@@YAHPEAUImGuiInputTextCallbackData@@@Z ; InputTextCallback
	mov	QWORD PTR [rsp+48], rax
	mov	DWORD PTR [rsp+40], 262144		; 00040000H
	lea	rax, QWORD PTR $T4[rbp-169]
	mov	QWORD PTR [rsp+32], rax
	xor	edx, edx
	call	?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputTextEx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\imgui\imgui.h

; 270  :     constexpr ImVec2(float _x, float _y)    : x(_x), y(_y) { }

	mov	QWORD PTR $T6[rbp-169], rdi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

	lea	rcx, OFFSET FLAT:?ConfirmButtonText@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; PopupGeneralInputString::ConfirmButtonText
	cmp	QWORD PTR ?ConfirmButtonText@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+24, 16
	cmovae	rcx, QWORD PTR ?ConfirmButtonText@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\imgui\imgui_widgets.cpp

; 723  :     return ButtonEx(label, size_arg, ImGuiButtonFlags_None);

	xor	r8d, r8d
	lea	rdx, QWORD PTR $T6[rbp-169]
	call	?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z ; ImGui::ButtonEx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp

; 24   : 			if (ImGui::Button(ConfirmButtonText.c_str()))

	test	al, al
	je	SHORT $LN4@Render

; 25   : 			{
; 26   : 				Func(Value);

	mov	rbx, QWORD PTR ?Func@PopupGeneralInputString@@3P6AXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ZEA ; PopupGeneralInputString::Func
	mov	rdx, rsi
	lea	rcx, QWORD PTR $T11[rbp-169]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	rcx, rax
	call	rbx

; 27   : 				IsOpen = false;

	mov	BYTE PTR ?IsOpen@PopupGeneralInputString@@3_NA, dil ; PopupGeneralInputString::IsOpen

; 28   : 				Func = nullptr;

	mov	QWORD PTR ?Func@PopupGeneralInputString@@3P6AXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ZEA, rdi ; PopupGeneralInputString::Func
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3395 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:??_C@_00CNPNBAHC@@
	lea	rcx, OFFSET FLAT:?Key@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; PopupGeneralInputString::Key
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:??_C@_00CNPNBAHC@@
	mov	rcx, rsi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:??_C@_00CNPNBAHC@@
	lea	rcx, OFFSET FLAT:?PopupTitle@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; PopupGeneralInputString::PopupTitle
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:??_C@_00CNPNBAHC@@
	lea	rcx, OFFSET FLAT:?ConfirmButtonText@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; PopupGeneralInputString::ConfirmButtonText
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN4@Render:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp

; 34   : 			ImGui::SameLine();

	movaps	xmm1, xmm6
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\imgui\imgui.h

; 270  :     constexpr ImVec2(float _x, float _y)    : x(_x), y(_y) { }

	mov	QWORD PTR $T5[rbp-169], rdi
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\imgui\imgui_widgets.cpp

; 723  :     return ButtonEx(label, size_arg, ImGuiButtonFlags_None);

	xor	r8d, r8d
	lea	rdx, QWORD PTR $T5[rbp-169]
	lea	rcx, OFFSET FLAT:??_C@_06HCFIKKEA@Return@
	call	?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z ; ImGui::ButtonEx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp

; 35   : 			if (ImGui::Button("Return"))

	test	al, al
	je	SHORT $LN5@Render

; 36   : 			{
; 37   : 				IsOpen = false;

	mov	BYTE PTR ?IsOpen@PopupGeneralInputString@@3_NA, dil ; PopupGeneralInputString::IsOpen

; 38   : 				Func = nullptr;

	mov	QWORD PTR ?Func@PopupGeneralInputString@@3P6AXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ZEA, rdi ; PopupGeneralInputString::Func
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3395 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:??_C@_00CNPNBAHC@@
	lea	rcx, OFFSET FLAT:?Key@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; PopupGeneralInputString::Key
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:??_C@_00CNPNBAHC@@
	mov	rcx, rsi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:??_C@_00CNPNBAHC@@
	lea	rcx, OFFSET FLAT:?PopupTitle@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; PopupGeneralInputString::PopupTitle
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:??_C@_00CNPNBAHC@@
	lea	rcx, OFFSET FLAT:?ConfirmButtonText@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; PopupGeneralInputString::ConfirmButtonText
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN5@Render:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp

; 45   : 		ImGui::SameLine();

	movaps	xmm1, xmm6
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\imgui\imgui.cpp

; 8006 :     ImGuiWindow* window = GetCurrentWindowRead();

	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	rcx, QWORD PTR [rax+16408]
	movss	xmm6, DWORD PTR [rcx+92]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\string

; 536  :     return _STD to_string(static_cast<double>(_Val));

	cvtps2pd xmm6, xmm6

; 529  :     const auto _Len = static_cast<size_t>(_CSTD _scprintf("%f", _Val));

	movaps	xmm1, xmm6
	movq	rdx, xmm6
	lea	rcx, OFFSET FLAT:??_C@_02NJPGOMH@?$CFf@
	call	_scprintf
	movsxd	rbx, eax

; 530  :     string _Str(_Len, '\0');

	mov	rdx, rbx
	lea	rcx, QWORD PTR $T9[rbp-169]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2226 :         value_type* _Result = _Bx._Buf;

	lea	rcx, QWORD PTR $T9[rbp-169]

; 2227 :         if (_Large_string_engaged()) {

	cmp	QWORD PTR $T9[rbp-145], 16
	cmovae	rcx, QWORD PTR $T9[rbp-169]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\string

; 531  :     _CSTD sprintf_s(&_Str[0], _Len + 1, "%f", _Val);

	lea	rdx, QWORD PTR [rbx+1]
	movaps	xmm3, xmm6
	movq	r9, xmm6
	lea	r8, OFFSET FLAT:??_C@_02NJPGOMH@?$CFf@
	call	sprintf_s
	npad	1
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\imgui\imgui.cpp

; 8006 :     ImGuiWindow* window = GetCurrentWindowRead();

	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	rcx, QWORD PTR [rax+16408]
	movss	xmm6, DWORD PTR [rcx+88]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\string

; 536  :     return _STD to_string(static_cast<double>(_Val));

	cvtps2pd xmm6, xmm6

; 529  :     const auto _Len = static_cast<size_t>(_CSTD _scprintf("%f", _Val));

	movaps	xmm1, xmm6
	movq	rdx, xmm6
	lea	rcx, OFFSET FLAT:??_C@_02NJPGOMH@?$CFf@
	call	_scprintf
	movsxd	rbx, eax

; 530  :     string _Str(_Len, '\0');

	mov	rdx, rbx
	lea	rcx, QWORD PTR $T7[rbp-169]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2226 :         value_type* _Result = _Bx._Buf;

	lea	rcx, QWORD PTR $T7[rbp-169]

; 2227 :         if (_Large_string_engaged()) {

	cmp	QWORD PTR $T7[rbp-145], 16
	cmovae	rcx, QWORD PTR $T7[rbp-169]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\string

; 531  :     _CSTD sprintf_s(&_Str[0], _Len + 1, "%f", _Val);

	lea	rdx, QWORD PTR [rbx+1]
	movaps	xmm3, xmm6
	movq	r9, xmm6
	lea	r8, OFFSET FLAT:??_C@_02NJPGOMH@?$CFf@
	call	sprintf_s
	npad	1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3537 :         return insert(_Off, _Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	r9d, 6
	lea	r8, OFFSET FLAT:??_C@_06FMLHDGIC@Size?3?5@
	lea	rcx, QWORD PTR $T7[rbp-169]
	call	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KQEBD0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
	xorps	xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T13[rbp-169], xmm0
	xorps	xmm1, xmm1

; 2293 :     size_type _Mysize = 0; // current length of string

	movdqu	XMMWORD PTR $T13[rbp-153], xmm1

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR $T13[rbp-169], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR $T13[rbp-153], xmm1
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp

; 46   : 		ImGui::Text(std::string("Size: " + std::to_string(ImGui::GetWindowSize().x) + "x" + std::to_string(ImGui::GetWindowSize().y)).c_str());

	mov	QWORD PTR [rax+16], rdi
	mov	QWORD PTR [rax+24], 15
	mov	BYTE PTR [rax], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3270 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

	mov	rcx, QWORD PTR $T13[rbp-153]
	mov	rdx, QWORD PTR $T13[rbp-145]
	mov	rax, rdx
	sub	rax, rcx

; 3271 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

	cmp	rax, 1
	jb	SHORT $LN112@Render

; 3272 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 3273 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

	lea	rax, QWORD PTR [rcx+1]
	mov	QWORD PTR $T13[rbp-153], rax

; 2226 :         value_type* _Result = _Bx._Buf;

	lea	rax, QWORD PTR $T13[rbp-169]

; 2227 :         if (_Large_string_engaged()) {

	cmp	rdx, 16
	cmovae	rax, QWORD PTR $T13[rbp-169]

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

	mov	WORD PTR [rax+rcx], 120			; 00000078H

; 3277 :             return *this;

	lea	rax, QWORD PTR $T13[rbp-169]
	jmp	SHORT $LN111@Render
$LN112@Render:

; 3278 :         }
; 3279 : 
; 3280 :         return _Reallocate_grow_by(

	mov	QWORD PTR [rsp+32], 1
	lea	r9, OFFSET FLAT:??_C@_01FJMABOPO@x@
	mov	edx, 1
	lea	rcx, QWORD PTR $T13[rbp-169]
	call	??$_Reallocate_grow_by@V<lambda_1>@?1??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append'::`2'::<lambda_1>,char const *,unsigned __int64>
$LN111@Render:

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR $T10[rbp-169], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR $T10[rbp-153], xmm1
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp

; 46   : 		ImGui::Text(std::string("Size: " + std::to_string(ImGui::GetWindowSize().x) + "x" + std::to_string(ImGui::GetWindowSize().y)).c_str());

	mov	QWORD PTR [rax+16], rdi
	mov	QWORD PTR [rax+24], 15
	mov	BYTE PTR [rax], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4980 :     return {_String_constructor_concat_tag{}, _Left, _Right};

	lea	r9, QWORD PTR $T9[rbp-169]
	lea	r8, QWORD PTR $T10[rbp-169]
	lea	rcx, QWORD PTR $T8[rbp-169]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1

; 2235 :         const value_type* _Result = _Bx._Buf;

	lea	rcx, QWORD PTR $T8[rbp-169]

; 2236 :         if (_Large_string_engaged()) {

	cmp	QWORD PTR $T8[rbp-145], 16
	cmovae	rcx, QWORD PTR $T8[rbp-169]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp

; 46   : 		ImGui::Text(std::string("Size: " + std::to_string(ImGui::GetWindowSize().x) + "x" + std::to_string(ImGui::GetWindowSize().y)).c_str());

	call	?Text@ImGui@@YAXPEBDZZ			; ImGui::Text
	npad	1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

	mov	rdx, QWORD PTR $T8[rbp-145]
	cmp	rdx, 16
	jb	SHORT $LN187@Render

; 4833 :             _ASAN_STRING_REMOVE(*this);
; 4834 :             const pointer _Ptr = _My_data._Bx._Ptr;
; 4835 :             auto& _Al          = _Getal();
; 4836 :             _Destroy_in_place(_My_data._Bx._Ptr);
; 4837 :             _My_data._Activate_SSO_buffer();
; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rcx, QWORD PTR $T8[rbp-169]
	mov	rax, rcx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN199@Render

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rcx-8]
	sub	rax, rcx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	jbe	SHORT $LN199@Render
	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN199@Render:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
$LN187@Render:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

	movdqa	xmm0, XMMWORD PTR __xmm@000000000000000f0000000000000000
	movdqu	XMMWORD PTR $T8[rbp-153], xmm0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;
; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T8[rbp-169], 0

; 4832 :         if (_My_data._Large_string_engaged()) {

	mov	rdx, QWORD PTR $T10[rbp-145]
	cmp	rdx, 16
	jb	SHORT $LN217@Render

; 4833 :             _ASAN_STRING_REMOVE(*this);
; 4834 :             const pointer _Ptr = _My_data._Bx._Ptr;
; 4835 :             auto& _Al          = _Getal();
; 4836 :             _Destroy_in_place(_My_data._Bx._Ptr);
; 4837 :             _My_data._Activate_SSO_buffer();
; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rcx, QWORD PTR $T10[rbp-169]
	mov	rax, rcx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN229@Render

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rcx-8]
	sub	rax, rcx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	jbe	SHORT $LN229@Render
	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN229@Render:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1
$LN217@Render:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

	mov	rdx, QWORD PTR $T13[rbp-145]
	cmp	rdx, 16
	jb	SHORT $LN246@Render

; 4833 :             _ASAN_STRING_REMOVE(*this);
; 4834 :             const pointer _Ptr = _My_data._Bx._Ptr;
; 4835 :             auto& _Al          = _Getal();
; 4836 :             _Destroy_in_place(_My_data._Bx._Ptr);
; 4837 :             _My_data._Activate_SSO_buffer();
; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rcx, QWORD PTR $T13[rbp-169]
	mov	rax, rcx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN258@Render

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rcx-8]
	sub	rax, rcx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	jbe	SHORT $LN258@Render
	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN258@Render:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
$LN246@Render:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

	movdqa	xmm0, XMMWORD PTR __xmm@000000000000000f0000000000000000
	movdqu	XMMWORD PTR $T13[rbp-153], xmm0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;
; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T13[rbp-169], 0

; 4832 :         if (_My_data._Large_string_engaged()) {

	mov	rdx, QWORD PTR $T7[rbp-145]
	cmp	rdx, 16
	jb	SHORT $LN275@Render

; 4833 :             _ASAN_STRING_REMOVE(*this);
; 4834 :             const pointer _Ptr = _My_data._Bx._Ptr;
; 4835 :             auto& _Al          = _Getal();
; 4836 :             _Destroy_in_place(_My_data._Bx._Ptr);
; 4837 :             _My_data._Activate_SSO_buffer();
; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rcx, QWORD PTR $T7[rbp-169]
	mov	rax, rcx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN287@Render

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rcx-8]
	sub	rax, rcx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	jbe	SHORT $LN287@Render
	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN287@Render:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
$LN275@Render:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

	movdqa	xmm0, XMMWORD PTR __xmm@000000000000000f0000000000000000
	movdqu	XMMWORD PTR $T7[rbp-153], xmm0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;
; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T7[rbp-169], 0

; 2244 :         return _BUF_SIZE <= _Myres;

	mov	rdx, QWORD PTR $T9[rbp-145]
	cmp	rdx, 16

; 4832 :         if (_My_data._Large_string_engaged()) {

	jb	SHORT $LN304@Render

; 4833 :             _ASAN_STRING_REMOVE(*this);
; 4834 :             const pointer _Ptr = _My_data._Bx._Ptr;
; 4835 :             auto& _Al          = _Getal();
; 4836 :             _Destroy_in_place(_My_data._Bx._Ptr);
; 4837 :             _My_data._Activate_SSO_buffer();
; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rcx, QWORD PTR $T9[rbp-169]
	mov	rax, rcx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN316@Render

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rcx-8]
	sub	rax, rcx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	jbe	SHORT $LN316@Render
	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN316@Render:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
$LN304@Render:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp

; 47   : 		ImGui::EndPopup();

	call	?EndPopup@ImGui@@YAXXZ			; ImGui::EndPopup
$LN2@Render:

; 48   : 	}
; 49   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-169]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+256]
	mov	rbx, QWORD PTR [r11+16]
	mov	rsi, QWORD PTR [r11+24]
	mov	rdi, QWORD PTR [r11+32]
	movaps	xmm6, XMMWORD PTR [r11-16]
	mov	rsp, r11
	pop	rbp
	ret	0
$LN429@Render:
?Render@PopupGeneralInputString@@YAXXZ ENDP		; PopupGeneralInputString::Render
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T4 = 64
$T5 = 64
$T6 = 64
$T7 = 72
$T8 = 104
$T9 = 136
$T10 = 168
$T11 = 168
cb_user_data$12 = 200
$T13 = 200
__$ArrayPad$ = 232
?dtor$1@?0??Render@PopupGeneralInputString@@YAXXZ@4HA PROC ; `PopupGeneralInputString::Render'::`1'::dtor$1
	lea	rcx, QWORD PTR $T9[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$1@?0??Render@PopupGeneralInputString@@YAXXZ@4HA ENDP ; `PopupGeneralInputString::Render'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T4 = 64
$T5 = 64
$T6 = 64
$T7 = 72
$T8 = 104
$T9 = 136
$T10 = 168
$T11 = 168
cb_user_data$12 = 200
$T13 = 200
__$ArrayPad$ = 232
?dtor$2@?0??Render@PopupGeneralInputString@@YAXXZ@4HA PROC ; `PopupGeneralInputString::Render'::`1'::dtor$2
	lea	rcx, QWORD PTR $T7[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$2@?0??Render@PopupGeneralInputString@@YAXXZ@4HA ENDP ; `PopupGeneralInputString::Render'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T4 = 64
$T5 = 64
$T6 = 64
$T7 = 72
$T8 = 104
$T9 = 136
$T10 = 168
$T11 = 168
cb_user_data$12 = 200
$T13 = 200
__$ArrayPad$ = 232
?dtor$3@?0??Render@PopupGeneralInputString@@YAXXZ@4HA PROC ; `PopupGeneralInputString::Render'::`1'::dtor$3
	lea	rcx, QWORD PTR $T13[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$3@?0??Render@PopupGeneralInputString@@YAXXZ@4HA ENDP ; `PopupGeneralInputString::Render'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T4 = 64
$T5 = 64
$T6 = 64
$T7 = 72
$T8 = 104
$T9 = 136
$T10 = 168
$T11 = 168
cb_user_data$12 = 200
$T13 = 200
__$ArrayPad$ = 232
?dtor$4@?0??Render@PopupGeneralInputString@@YAXXZ@4HA PROC ; `PopupGeneralInputString::Render'::`1'::dtor$4
	lea	rcx, QWORD PTR $T10[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$4@?0??Render@PopupGeneralInputString@@YAXXZ@4HA ENDP ; `PopupGeneralInputString::Render'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T4 = 64
$T5 = 64
$T6 = 64
$T7 = 72
$T8 = 104
$T9 = 136
$T10 = 168
$T11 = 168
cb_user_data$12 = 200
$T13 = 200
__$ArrayPad$ = 232
?dtor$5@?0??Render@PopupGeneralInputString@@YAXXZ@4HA PROC ; `PopupGeneralInputString::Render'::`1'::dtor$5
	lea	rcx, QWORD PTR $T8[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$5@?0??Render@PopupGeneralInputString@@YAXXZ@4HA ENDP ; `PopupGeneralInputString::Render'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp
;	COMDAT ?Open@PopupGeneralInputString@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00P6AX0@Z@Z
_TEXT	SEGMENT
Title$GSCopy$ = 32
TextFieldName$GSCopy$ = 40
ButtonText$GSCopy$ = 48
__$ArrayPad$ = 56
Title$ = 96
TextFieldName$ = 104
ButtonText$ = 112
Callback$ = 120
?Open@PopupGeneralInputString@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00P6AX0@Z@Z PROC ; PopupGeneralInputString::Open, COMDAT

; 52   : {

$LN47:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rbx, r8
	mov	rsi, rdx
	mov	rdi, rcx

; 51   : void PopupGeneralInputString::Open(std::string Title, std::string TextFieldName, std::string ButtonText, void (*Callback)(std::string))

	mov	QWORD PTR Title$GSCopy$[rsp], rcx
	mov	QWORD PTR TextFieldName$GSCopy$[rsp], rdx
	mov	QWORD PTR ButtonText$GSCopy$[rsp], rbx

; 53   : 	Func = Callback;

	mov	QWORD PTR ?Func@PopupGeneralInputString@@3P6AXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ZEA, r9 ; PopupGeneralInputString::Func
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3156 :         if (this == _STD addressof(_Right)) {

	lea	rcx, OFFSET FLAT:?Key@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; PopupGeneralInputString::Key
	cmp	rcx, rdx
	je	SHORT $LN6@Open

; 2236 :         if (_Large_string_engaged()) {

	cmp	QWORD PTR [rdx+24], 16
	jb	SHORT $LN10@Open

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

	mov	rdx, QWORD PTR [rdx]
$LN10@Open:

; 3192 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

	mov	r8, QWORD PTR [rsi+16]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN6@Open:

; 3395 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:??_C@_00CNPNBAHC@@
	lea	rcx, OFFSET FLAT:?Value@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; PopupGeneralInputString::Value
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp

; 56   : 	IsOpen = true;

	mov	BYTE PTR ?IsOpen@PopupGeneralInputString@@3_NA, 1 ; PopupGeneralInputString::IsOpen
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3156 :         if (this == _STD addressof(_Right)) {

	lea	rcx, OFFSET FLAT:?PopupTitle@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; PopupGeneralInputString::PopupTitle
	cmp	rcx, rdi
	je	SHORT $LN20@Open

; 2235 :         const value_type* _Result = _Bx._Buf;

	mov	rdx, rdi

; 2236 :         if (_Large_string_engaged()) {

	cmp	QWORD PTR [rdi+24], 16
	jb	SHORT $LN24@Open

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

	mov	rdx, QWORD PTR [rdi]
$LN24@Open:

; 3192 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

	mov	r8, QWORD PTR [rdi+16]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN20@Open:

; 3156 :         if (this == _STD addressof(_Right)) {

	lea	rcx, OFFSET FLAT:?ConfirmButtonText@PopupGeneralInputString@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; PopupGeneralInputString::ConfirmButtonText
	cmp	rcx, rbx
	je	SHORT $LN28@Open

; 2235 :         const value_type* _Result = _Bx._Buf;

	mov	rdx, rbx

; 2236 :         if (_Large_string_engaged()) {

	cmp	QWORD PTR [rbx+24], 16
	jb	SHORT $LN32@Open

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

	mov	rdx, QWORD PTR [rbx]
$LN32@Open:

; 3192 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

	mov	r8, QWORD PTR [rbx+16]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	npad	1
$LN28@Open:

; 3119 :         _Tidy_deallocate();

	mov	rcx, rdi
	call	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
	npad	1
	mov	rcx, rsi
	call	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
	npad	1
	mov	rcx, rbx
	call	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PopupGeneralInputString.cpp

; 59   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 64					; 00000040H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?Open@PopupGeneralInputString@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00P6AX0@Z@Z ENDP ; PopupGeneralInputString::Open
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
Title$GSCopy$ = 32
TextFieldName$GSCopy$ = 40
ButtonText$GSCopy$ = 48
__$ArrayPad$ = 56
Title$ = 96
TextFieldName$ = 104
ButtonText$ = 112
Callback$ = 120
?dtor$0@?0??Open@PopupGeneralInputString@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00P6AX0@Z@Z@4HA PROC ; `PopupGeneralInputString::Open'::`1'::dtor$0
	mov	rcx, QWORD PTR ButtonText$GSCopy$[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??Open@PopupGeneralInputString@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00P6AX0@Z@Z@4HA ENDP ; `PopupGeneralInputString::Open'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
Title$GSCopy$ = 32
TextFieldName$GSCopy$ = 40
ButtonText$GSCopy$ = 48
__$ArrayPad$ = 56
Title$ = 96
TextFieldName$ = 104
ButtonText$ = 112
Callback$ = 120
?dtor$1@?0??Open@PopupGeneralInputString@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00P6AX0@Z@Z@4HA PROC ; `PopupGeneralInputString::Open'::`1'::dtor$1
	mov	rcx, QWORD PTR TextFieldName$GSCopy$[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$1@?0??Open@PopupGeneralInputString@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00P6AX0@Z@Z@4HA ENDP ; `PopupGeneralInputString::Open'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
Title$GSCopy$ = 32
TextFieldName$GSCopy$ = 40
ButtonText$GSCopy$ = 48
__$ArrayPad$ = 56
Title$ = 96
TextFieldName$ = 104
ButtonText$ = 112
Callback$ = 120
?dtor$2@?0??Open@PopupGeneralInputString@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00P6AX0@Z@Z@4HA PROC ; `PopupGeneralInputString::Open'::`1'::dtor$2
	mov	rcx, QWORD PTR Title$GSCopy$[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$2@?0??Open@PopupGeneralInputString@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@00P6AX0@Z@Z@4HA ENDP ; `PopupGeneralInputString::Open'::`1'::dtor$2
text$x	ENDS
END
