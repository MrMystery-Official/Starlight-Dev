; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?dtPointInPolygon@@YA_NPEBM0H@Z			; dtPointInPolygon
PUBLIC	?dtClosestHeightPointTriangle@@YA_NPEBM000AEAM@Z ; dtClosestHeightPointTriangle
PUBLIC	?dtDistancePtSegSqr2D@@YAMPEBM00AEAM@Z		; dtDistancePtSegSqr2D
PUBLIC	?dtVcopy@@YAXPEAMPEBM@Z				; dtVcopy
PUBLIC	?dtVsub@@YAXPEAMPEBM1@Z				; dtVsub
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtPointInPolygon@@YA_NPEBM0H@Z DD imagerel $LN38
	DD	imagerel $LN38+55
	DD	imagerel $unwind$?dtPointInPolygon@@YA_NPEBM0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?dtPointInPolygon@@YA_NPEBM0H@Z DD imagerel $LN38+55
	DD	imagerel $LN38+424
	DD	imagerel $chain$1$?dtPointInPolygon@@YA_NPEBM0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?dtPointInPolygon@@YA_NPEBM0H@Z DD imagerel $LN38+424
	DD	imagerel $LN38+594
	DD	imagerel $chain$2$?dtPointInPolygon@@YA_NPEBM0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtClosestHeightPointTriangle@@YA_NPEBM000AEAM@Z DD imagerel $LN21
	DD	imagerel $LN21+315
	DD	imagerel $unwind$?dtClosestHeightPointTriangle@@YA_NPEBM000AEAM@Z
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtClosestHeightPointTriangle@@YA_NPEBM000AEAM@Z DD 0b6d01H
	DD	0a86dH
	DD	019859H
	DD	028849H
	DD	03783eH
	DD	04682eH
	DD	0a204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?dtPointInPolygon@@YA_NPEBM0H@Z DD 021H
	DD	imagerel $LN38
	DD	imagerel $LN38+55
	DD	imagerel $unwind$?dtPointInPolygon@@YA_NPEBM0H@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?dtPointInPolygon@@YA_NPEBM0H@Z DD 041221H
	DD	037412H
	DD	025405H
	DD	imagerel $LN38
	DD	imagerel $LN38+55
	DD	imagerel $unwind$?dtPointInPolygon@@YA_NPEBM0H@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtPointInPolygon@@YA_NPEBM0H@Z DD 050c01H
	DD	05640cH
	DD	04340cH
	DD	0e00cH
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\recastnavigation\detour\DetourCommon.h
;	COMDAT ?dtVsub@@YAXPEAMPEBM1@Z
_TEXT	SEGMENT
dest$ = 8
v1$ = 16
v2$ = 24
?dtVsub@@YAXPEAMPEBM1@Z PROC				; dtVsub, COMDAT

; 141  : 	dest[0] = v1[0]-v2[0];

	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, DWORD PTR [r8]

; 142  : 	dest[1] = v1[1]-v2[1];

	movss	xmm1, DWORD PTR [rdx+4]
	subss	xmm1, DWORD PTR [r8+4]
	movss	DWORD PTR [rcx], xmm0

; 143  : 	dest[2] = v1[2]-v2[2];

	movss	xmm0, DWORD PTR [rdx+8]
	subss	xmm0, DWORD PTR [r8+8]
	movss	DWORD PTR [rcx+4], xmm1
	movss	DWORD PTR [rcx+8], xmm0

; 144  : }

	ret	0
?dtVsub@@YAXPEAMPEBM1@Z ENDP				; dtVsub
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\recastnavigation\detour\DetourCommon.h
;	COMDAT ?dtVcopy@@YAXPEAMPEBM@Z
_TEXT	SEGMENT
dest$ = 8
a$ = 16
?dtVcopy@@YAXPEAMPEBM@Z PROC				; dtVcopy, COMDAT

; 192  : 	dest[0] = a[0];

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax

; 193  : 	dest[1] = a[1];

	mov	eax, DWORD PTR [rdx+4]
	mov	DWORD PTR [rcx+4], eax

; 194  : 	dest[2] = a[2];

	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+8], eax

; 195  : }

	ret	0
?dtVcopy@@YAXPEAMPEBM@Z ENDP				; dtVcopy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\recastnavigation\detour\DetourCommon.cpp
;	COMDAT ?dtDistancePtSegSqr2D@@YAMPEBM00AEAM@Z
_TEXT	SEGMENT
pt$ = 8
p$ = 16
q$ = 24
t$ = 32
?dtDistancePtSegSqr2D@@YAMPEBM00AEAM@Z PROC		; dtDistancePtSegSqr2D, COMDAT

; 172  : 	float pqx = q[0] - p[0];

	movss	xmm5, DWORD PTR [rdx]
	movss	xmm3, DWORD PTR [r8]

; 173  : 	float pqz = q[2] - p[2];

	movss	xmm4, DWORD PTR [r8+8]
	subss	xmm3, xmm5
	subss	xmm4, DWORD PTR [rdx+8]

; 174  : 	float dx = pt[0] - p[0];
; 175  : 	float dz = pt[2] - p[2];

	movss	xmm1, DWORD PTR [rcx+8]
	subss	xmm1, DWORD PTR [rdx+8]

; 176  : 	float d = pqx*pqx + pqz*pqz;

	movaps	xmm0, xmm3
	mulss	xmm0, xmm3
	movaps	xmm2, xmm4
	mulss	xmm2, xmm4

; 177  : 	t = pqx*dx + pqz*dz;

	mulss	xmm1, xmm4
	addss	xmm2, xmm0
	movss	xmm0, DWORD PTR [rcx]
	subss	xmm0, xmm5
	mulss	xmm0, xmm3
	addss	xmm1, xmm0
	xorps	xmm0, xmm0

; 178  : 	if (d > 0) t /= d;

	comiss	xmm2, xmm0
	movss	DWORD PTR [r9], xmm1
	jbe	SHORT $LN2@dtDistance
	divss	xmm1, xmm2
	movss	DWORD PTR [r9], xmm1
$LN2@dtDistance:

; 179  : 	if (t < 0) t = 0;

	comiss	xmm0, xmm1
	jbe	SHORT $LN3@dtDistance
	mov	DWORD PTR [r9], 0
	jmp	SHORT $LN5@dtDistance
$LN3@dtDistance:

; 180  : 	else if (t > 1) t = 1;

	movss	xmm2, DWORD PTR __real@3f800000
	movaps	xmm0, xmm1
	comiss	xmm1, xmm2
	jbe	SHORT $LN5@dtDistance
	mov	DWORD PTR [r9], 1065353216		; 3f800000H
	movaps	xmm0, xmm2
$LN5@dtDistance:

; 181  : 	dx = p[0] + t*pqx - pt[0];

	movaps	xmm1, xmm0

; 182  : 	dz = p[2] + t*pqz - pt[2];

	mulss	xmm0, xmm4
	mulss	xmm1, xmm3
	addss	xmm0, DWORD PTR [rdx+8]
	addss	xmm1, xmm5
	subss	xmm0, DWORD PTR [rcx+8]
	subss	xmm1, DWORD PTR [rcx]

; 183  : 	return dx*dx + dz*dz;

	mulss	xmm0, xmm0
	mulss	xmm1, xmm1
	addss	xmm0, xmm1

; 184  : }

	ret	0
?dtDistancePtSegSqr2D@@YAMPEBM00AEAM@Z ENDP		; dtDistancePtSegSqr2D
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\recastnavigation\detour\DetourCommon.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\recastnavigation\detour\DetourCommon.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\recastnavigation\detour\DetourCommon.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\recastnavigation\detour\DetourCommon.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\recastnavigation\detour\DetourCommon.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\recastnavigation\detour\DetourCommon.cpp
;	COMDAT ?dtClosestHeightPointTriangle@@YA_NPEBM000AEAM@Z
_TEXT	SEGMENT
p$ = 96
a$ = 104
b$ = 112
c$ = 120
h$ = 128
?dtClosestHeightPointTriangle@@YA_NPEBM000AEAM@Z PROC	; dtClosestHeightPointTriangle, COMDAT

; 205  : {

$LN21:
	sub	rsp, 88					; 00000058H
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\recastnavigation\detour\DetourCommon.h

; 141  : 	dest[0] = v1[0]-v2[0];

	movss	xmm1, DWORD PTR [rdx]

; 143  : 	dest[2] = v1[2]-v2[2];

	movss	xmm0, DWORD PTR [rdx+8]
	movss	xmm2, DWORD PTR [rcx+8]
	movss	xmm5, DWORD PTR [rcx]
	subss	xmm2, xmm0

; 142  : 	dest[1] = v1[1]-v2[1];

	movss	xmm3, DWORD PTR [r8+4]

; 141  : 	dest[0] = v1[0]-v2[0];

	subss	xmm5, xmm1

; 142  : 	dest[1] = v1[1]-v2[1];

	subss	xmm3, DWORD PTR [rdx+4]
	movaps	XMMWORD PTR [rsp+64], xmm6
	movss	xmm6, DWORD PTR [r9+4]
	subss	xmm6, DWORD PTR [rdx+4]
	movaps	XMMWORD PTR [rsp+48], xmm7

; 141  : 	dest[0] = v1[0]-v2[0];

	movss	xmm7, DWORD PTR [r9]
	movaps	XMMWORD PTR [rsp+32], xmm8
	subss	xmm7, xmm1

; 143  : 	dest[2] = v1[2]-v2[2];

	movss	xmm8, DWORD PTR [r9+8]
	movaps	XMMWORD PTR [rsp+16], xmm9
	subss	xmm8, xmm0

; 141  : 	dest[0] = v1[0]-v2[0];

	movss	xmm9, DWORD PTR [r8]
	subss	xmm9, xmm1
	movaps	XMMWORD PTR [rsp], xmm10

; 143  : 	dest[2] = v1[2]-v2[2];

	movss	xmm10, DWORD PTR [r8+8]
	subss	xmm10, xmm0
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\recastnavigation\detour\DetourCommon.cpp

; 214  : 	float denom = v0[0] * v1[2] - v0[2] * v1[0];

	movaps	xmm0, xmm9
	mulss	xmm0, xmm8
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\recastnavigation\detour\DetourCommon.h

; 143  : 	dest[2] = v1[2]-v2[2];

	movaps	xmm4, xmm10
	mulss	xmm4, xmm7
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\recastnavigation\detour\DetourCommon.cpp

; 214  : 	float denom = v0[0] * v1[2] - v0[2] * v1[0];

	subss	xmm4, xmm0

; 215  : 	if (fabsf(denom) < EPS)

	movss	xmm0, DWORD PTR __real@358637bd
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 680  :             return (float)fabs(_X);

	movaps	xmm1, xmm4
	andps	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\recastnavigation\detour\DetourCommon.cpp

; 215  : 	if (fabsf(denom) < EPS)

	comiss	xmm0, xmm1
	ja	SHORT $LN4@dtClosestH

; 216  : 		return false;
; 217  : 
; 218  : 	float u = v1[2] * v2[0] - v1[0] * v2[2];

	movaps	xmm1, xmm5
	movaps	xmm0, xmm2

; 219  : 	float v = v0[0] * v2[2] - v0[2] * v2[0];

	mulss	xmm5, xmm8
	mulss	xmm2, xmm7
	mulss	xmm1, xmm10
	mulss	xmm0, xmm9
	subss	xmm2, xmm5
	xorps	xmm5, xmm5

; 220  : 
; 221  : 	if (denom < 0) {

	comiss	xmm5, xmm4
	subss	xmm1, xmm0
	jbe	SHORT $LN3@dtClosestH

; 222  : 		denom = -denom;

	movss	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	xorps	xmm4, xmm0

; 223  : 		u = -u;

	xorps	xmm1, xmm0

; 224  : 		v = -v;

	xorps	xmm2, xmm0
$LN3@dtClosestH:

; 225  : 	}
; 226  : 
; 227  : 	// If point lies inside the triangle, return interpolated ycoord.
; 228  : 	if (u >= 0.0f && v >= 0.0f && (u + v) <= denom) {

	comiss	xmm1, xmm5
	jb	SHORT $LN4@dtClosestH
	comiss	xmm2, xmm5
	jb	SHORT $LN4@dtClosestH
	movaps	xmm0, xmm2
	addss	xmm0, xmm1
	comiss	xmm4, xmm0
	jb	SHORT $LN4@dtClosestH

; 229  : 		h = a[1] + (v0[1] * u + v1[1] * v) / denom;

	mov	rax, QWORD PTR h$[rsp]
	mulss	xmm3, xmm2
	mulss	xmm6, xmm1
	addss	xmm3, xmm6
	divss	xmm3, xmm4
	addss	xmm3, DWORD PTR [rdx+4]
	movss	DWORD PTR [rax], xmm3

; 230  : 		return true;

	mov	al, 1
	jmp	SHORT $LN1@dtClosestH
$LN4@dtClosestH:

; 231  : 	}
; 232  : 	return false;

	xor	al, al
$LN1@dtClosestH:

; 233  : }

	movaps	xmm6, XMMWORD PTR [rsp+64]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm8, XMMWORD PTR [rsp+32]
	movaps	xmm9, XMMWORD PTR [rsp+16]
	movaps	xmm10, XMMWORD PTR [rsp]
	add	rsp, 88					; 00000058H
	ret	0
?dtClosestHeightPointTriangle@@YA_NPEBM000AEAM@Z ENDP	; dtClosestHeightPointTriangle
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\recastnavigation\detour\DetourCommon.cpp
;	COMDAT ?dtPointInPolygon@@YA_NPEBM0H@Z
_TEXT	SEGMENT
pt$ = 16
verts$ = 24
nverts$ = 32
?dtPointInPolygon@@YA_NPEBM0H@Z PROC			; dtPointInPolygon, COMDAT

; 239  : {

$LN38:
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rsi
	push	r14

; 240  : 	// TODO: Replace pnpoly with triArea2D tests?
; 241  : 	int i, j;
; 242  : 	bool c = false;

	xor	r9b, r9b

; 243  : 	for (i = 0, j = nverts-1; i < nverts; j = i++)

	lea	eax, DWORD PTR [r8-1]
	xor	r14d, r14d
	mov	esi, r8d
	mov	r10, rdx
	mov	rbx, rcx
	cmp	r8d, 4
	jl	$LC11@dtPointInP

; 244  : 	{
; 245  : 		const float* vi = &verts[i*3];
; 246  : 		const float* vj = &verts[j*3];
; 247  : 		if (((vi[2] > pt[2]) != (vj[2] > pt[2])) &&

	movss	xmm3, DWORD PTR [rcx+8]
	xor	r11d, r11d
	cdqe
	lea	rcx, QWORD PTR [r10+20]
	mov	QWORD PTR [rsp+16], rbp
	mov	ebp, 16
	sub	rbp, r10
	mov	QWORD PTR [rsp+24], rdi
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	eax, DWORD PTR [r8-4]
	shl	rdx, 2
	shr	eax, 2
	inc	eax
	mov	edi, eax
	lea	r14d, DWORD PTR [rax*4]
	npad	12
$LL16@dtPointInP:
	movss	xmm4, DWORD PTR [rcx-12]
	xor	r8d, r8d
	movss	xmm5, DWORD PTR [rdx+r10+8]
	comiss	xmm4, xmm3
	seta	r8b
	xor	eax, eax
	comiss	xmm5, xmm3
	seta	al
	cmp	r8d, eax
	je	SHORT $LN12@dtPointInP
	movss	xmm2, DWORD PTR [rdx+r10]
	subss	xmm5, xmm4
	subss	xmm2, DWORD PTR [rcx-20]
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	mulss	xmm2, xmm0
	divss	xmm2, xmm5
	addss	xmm2, DWORD PTR [rcx-20]
	comiss	xmm2, DWORD PTR [rbx]
	jbe	SHORT $LN12@dtPointInP

; 248  : 			(pt[0] < (vj[0]-vi[0]) * (pt[2]-vi[2]) / (vj[2]-vi[2]) + vi[0]) )
; 249  : 			c = !c;

	test	r9b, r9b
	sete	r9b
$LN12@dtPointInP:

; 244  : 	{
; 245  : 		const float* vi = &verts[i*3];
; 246  : 		const float* vj = &verts[j*3];
; 247  : 		if (((vi[2] > pt[2]) != (vj[2] > pt[2])) &&

	movss	xmm5, DWORD PTR [rcx]
	xor	eax, eax
	comiss	xmm5, xmm3
	seta	al
	cmp	eax, r8d
	je	SHORT $LN13@dtPointInP
	movss	xmm2, DWORD PTR [rcx-20]
	subss	xmm4, xmm5
	subss	xmm2, DWORD PTR [rcx-8]
	movaps	xmm0, xmm3
	subss	xmm0, xmm5
	mulss	xmm2, xmm0
	divss	xmm2, xmm4
	addss	xmm2, DWORD PTR [rcx-8]
	comiss	xmm2, DWORD PTR [rbx]
	jbe	SHORT $LN13@dtPointInP

; 248  : 			(pt[0] < (vj[0]-vi[0]) * (pt[2]-vi[2]) / (vj[2]-vi[2]) + vi[0]) )
; 249  : 			c = !c;

	test	r9b, r9b
	sete	r9b
$LN13@dtPointInP:

; 244  : 	{
; 245  : 		const float* vi = &verts[i*3];
; 246  : 		const float* vj = &verts[j*3];
; 247  : 		if (((vi[2] > pt[2]) != (vj[2] > pt[2])) &&

	movss	xmm4, DWORD PTR [rcx+12]
	xor	edx, edx
	comiss	xmm4, xmm3
	seta	dl
	cmp	edx, eax
	je	SHORT $LN14@dtPointInP
	movss	xmm2, DWORD PTR [rcx-8]
	subss	xmm5, xmm4
	subss	xmm2, DWORD PTR [rcx+4]
	movaps	xmm0, xmm3
	subss	xmm0, xmm4
	mulss	xmm2, xmm0
	divss	xmm2, xmm5
	addss	xmm2, DWORD PTR [rcx+4]
	comiss	xmm2, DWORD PTR [rbx]
	jbe	SHORT $LN14@dtPointInP

; 248  : 			(pt[0] < (vj[0]-vi[0]) * (pt[2]-vi[2]) / (vj[2]-vi[2]) + vi[0]) )
; 249  : 			c = !c;

	test	r9b, r9b
	sete	r9b
$LN14@dtPointInP:

; 244  : 	{
; 245  : 		const float* vi = &verts[i*3];
; 246  : 		const float* vj = &verts[j*3];
; 247  : 		if (((vi[2] > pt[2]) != (vj[2] > pt[2])) &&

	movss	xmm5, DWORD PTR [rcx+24]
	xor	eax, eax
	comiss	xmm5, xmm3
	seta	al
	cmp	eax, edx
	je	SHORT $LN15@dtPointInP
	movss	xmm2, DWORD PTR [rcx+4]
	subss	xmm4, xmm5
	subss	xmm2, DWORD PTR [rcx+16]
	movaps	xmm0, xmm3
	subss	xmm0, xmm5
	mulss	xmm2, xmm0
	divss	xmm2, xmm4
	addss	xmm2, DWORD PTR [rcx+16]
	comiss	xmm2, DWORD PTR [rbx]
	jbe	SHORT $LN15@dtPointInP

; 248  : 			(pt[0] < (vj[0]-vi[0]) * (pt[2]-vi[2]) / (vj[2]-vi[2]) + vi[0]) )
; 249  : 			c = !c;

	test	r9b, r9b
	sete	r9b
$LN15@dtPointInP:

; 243  : 	for (i = 0, j = nverts-1; i < nverts; j = i++)

	lea	rax, QWORD PTR [r11+3]
	add	r11, 4
	lea	rdx, QWORD PTR [rcx+rbp]
	add	rcx, 48					; 00000030H
	sub	rdi, 1
	jne	$LL16@dtPointInP
	mov	rdi, QWORD PTR [rsp+24]
	mov	rbp, QWORD PTR [rsp+16]
	cmp	r14d, esi
	jl	SHORT $LN20@dtPointInP

; 250  : 	}
; 251  : 	return c;
; 252  : }

	movzx	eax, r9b
	mov	rbx, QWORD PTR [rsp+32]
	mov	rsi, QWORD PTR [rsp+40]
	pop	r14
	ret	0
$LC11@dtPointInP:

; 243  : 	for (i = 0, j = nverts-1; i < nverts; j = i++)

	test	esi, esi
	jle	$LN21@dtPointInP

; 244  : 	{
; 245  : 		const float* vi = &verts[i*3];
; 246  : 		const float* vj = &verts[j*3];
; 247  : 		if (((vi[2] > pt[2]) != (vj[2] > pt[2])) &&

	movss	xmm3, DWORD PTR [rcx+8]
	xor	r11d, r11d
	cdqe
$LN20@dtPointInP:
	lea	rdx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [r11+r11*2]
	shl	rdx, 2
	sub	esi, r14d
	lea	r8, QWORD PTR [r10+rax*4]
	mov	r11d, esi
$LC17@dtPointInP:
	movss	xmm4, DWORD PTR [rdx+r10+8]
	xor	ecx, ecx
	movss	xmm5, DWORD PTR [r8+8]
	comiss	xmm4, xmm3
	seta	cl
	xor	eax, eax
	comiss	xmm5, xmm3
	seta	al
	cmp	eax, ecx
	je	SHORT $LN2@dtPointInP
	movss	xmm0, DWORD PTR [rdx+r10]
	subss	xmm4, xmm5
	subss	xmm0, DWORD PTR [r8]
	movaps	xmm2, xmm3
	subss	xmm2, xmm5
	mulss	xmm2, xmm0
	divss	xmm2, xmm4
	addss	xmm2, DWORD PTR [r8]
	comiss	xmm2, DWORD PTR [rbx]
	jbe	SHORT $LN2@dtPointInP

; 248  : 			(pt[0] < (vj[0]-vi[0]) * (pt[2]-vi[2]) / (vj[2]-vi[2]) + vi[0]) )
; 249  : 			c = !c;

	test	r9b, r9b
	sete	r9b
$LN2@dtPointInP:

; 243  : 	for (i = 0, j = nverts-1; i < nverts; j = i++)

	mov	rdx, r8
	add	r8, 12
	sub	rdx, r10
	sub	r11, 1
	jne	SHORT $LC17@dtPointInP
$LN21@dtPointInP:

; 250  : 	}
; 251  : 	return c;
; 252  : }

	mov	rbx, QWORD PTR [rsp+32]
	movzx	eax, r9b
	mov	rsi, QWORD PTR [rsp+40]
	pop	r14
	ret	0
?dtPointInPolygon@@YA_NPEBM0H@Z ENDP			; dtPointInPolygon
_TEXT	ENDS
END
