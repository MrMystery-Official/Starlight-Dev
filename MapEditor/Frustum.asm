; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?FrustumValues@Frustum@@3PAY03MA		; Frustum::FrustumValues
?FrustumValues@Frustum@@3PAY03MA DD 018H DUP (?)	; Frustum::FrustumValues
_BSS	ENDS
PUBLIC	?SphereInFrustum@Frustum@@YA_NMMMM@Z		; Frustum::SphereInFrustum
PUBLIC	?CalculateFrustum@Frustum@@YAXPEAVCamera@@@Z	; Frustum::CalculateFrustum
PUBLIC	?NormalizePlane@Frustum@@YAXQEAY03MH@Z		; Frustum::NormalizePlane
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SphereInFrustum@Frustum@@YA_NMMMM@Z DD imagerel $LN15
	DD	imagerel $LN15+120
	DD	imagerel $unwind$?SphereInFrustum@Frustum@@YA_NMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CalculateFrustum@Frustum@@YAXPEAVCamera@@@Z DD imagerel $LN155
	DD	imagerel $LN155+2604
	DD	imagerel $unwind$?CalculateFrustum@Frustum@@YAXPEAVCamera@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?NormalizePlane@Frustum@@YAXQEAY03MH@Z DD imagerel $LN20
	DD	imagerel $LN20+120
	DD	imagerel $unwind$?NormalizePlane@Frustum@@YAXQEAY03MH@Z
;	COMDAT xdata
xdata	SEGMENT
$unwind$?NormalizePlane@Frustum@@YAXQEAY03MH@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CalculateFrustum@Frustum@@YAXPEAVCamera@@@Z DD 0168b01H
	DD	05f88bH
	DD	06e885H
	DD	07d87fH
	DD	08c879H
	DD	09b874H
	DD	0aa86fH
	DD	0b986aH
	DD	0c8854H
	DD	0d7843H
	DD	0e6832H
	DD	01f010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SphereInFrustum@Frustum@@YA_NMMMM@Z DD 031601H
	DD	06816H
	DD	02204H
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp
;	COMDAT ?NormalizePlane@Frustum@@YAXQEAY03MH@Z
_TEXT	SEGMENT
FurstumArr$dead$ = 48
Side$ = 56
?NormalizePlane@Frustum@@YAXQEAY03MH@Z PROC		; Frustum::NormalizePlane, COMDAT

; 26   : {

$LN20:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	lea	rdi, OFFSET FLAT:?FrustumValues@Frustum@@3PAY03MA ; Frustum::FrustumValues
	movsxd	rbx, edx
	mov	rax, rbx
	add	rax, rax
	movss	xmm0, DWORD PTR [rdi+rax*8+8]
	movss	xmm1, DWORD PTR [rdi+rax*8]
	movss	xmm2, DWORD PTR [rdi+rax*8+4]
	mulss	xmm2, xmm2
	mulss	xmm0, xmm0
	mulss	xmm1, xmm1
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath

; 266  :     return _CSTD sqrtf(_Xx);

	ucomiss	xmm0, xmm2
	ja	SHORT $LN15@NormalizeP
	xorps	xmm3, xmm3
	sqrtss	xmm3, xmm2
	jmp	SHORT $LN16@NormalizeP
$LN15@NormalizeP:
	movaps	xmm0, xmm2
	call	sqrtf
	movaps	xmm3, xmm0
$LN16@NormalizeP:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	add	rbx, rbx
	shufps	xmm3, xmm3, 0
	movups	xmm1, XMMWORD PTR [rdi+rbx*8]
	divps	xmm1, xmm3
	movups	XMMWORD PTR [rdi+rbx*8], xmm1

; 34   : 	FurstumArr[Side][B] /= Magnitude;
; 35   : 	FurstumArr[Side][C] /= Magnitude;
; 36   : 	FurstumArr[Side][D] /= Magnitude;
; 37   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?NormalizePlane@Frustum@@YAXQEAY03MH@Z ENDP		; Frustum::NormalizePlane
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp
;	COMDAT ?CalculateFrustum@Frustum@@YAXPEAVCamera@@@Z
_TEXT	SEGMENT
tv3714 = 32
tv3713 = 36
clip$4$ = 40
clip$5$ = 44
clip$12$ = 48
clip$11$ = 48
clip$6$ = 52
clip$10$ = 56
clip$3$ = 60
tv3716 = 64
clip$1$ = 68
clip$2$ = 72
clip$7$ = 256
CameraView$ = 256
clip$8$ = 264
tv3727 = 272
tv3715 = 272
clip$9$ = 280
tv3726 = 280
?CalculateFrustum@Frustum@@YAXPEAVCamera@@@Z PROC	; Frustum::CalculateFrustum, COMDAT

; 40   : {

$LN155:
	mov	rax, rsp
	sub	rsp, 248				; 000000f8H

; 41   : 	const float* proj = glm::value_ptr(CameraView->GetProjectionMatrix());
; 42   : 	const float* modl = glm::value_ptr(CameraView->GetViewMatrix());
; 43   : 	float clip[16];
; 44   : 
; 45   : 	clip[0] = modl[0] * proj[0] + modl[1] * proj[4] + modl[2] * proj[8] + modl[3] * proj[12];

	movss	xmm4, DWORD PTR [rcx+40]
	movss	xmm2, DWORD PTR [rcx+36]
	movss	xmm3, DWORD PTR [rcx+44]
	movss	xmm5, DWORD PTR [rcx+48]
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR [rcx+132]
	movss	xmm0, DWORD PTR [rcx+116]
	movaps	XMMWORD PTR [rax-24], xmm6
	movss	xmm6, DWORD PTR [rcx+100]
	mulss	xmm6, xmm2
	mulss	xmm0, xmm4
	movaps	XMMWORD PTR [rax-40], xmm7

; 46   : 	clip[1] = modl[0] * proj[1] + modl[1] * proj[5] + modl[2] * proj[9] + modl[3] * proj[13];
; 47   : 	clip[2] = modl[0] * proj[2] + modl[1] * proj[6] + modl[2] * proj[10] + modl[3] * proj[14];
; 48   : 	clip[3] = modl[0] * proj[3] + modl[1] * proj[7] + modl[2] * proj[11] + modl[3] * proj[15];

	movss	xmm7, DWORD PTR [rcx+128]
	addss	xmm6, xmm0
	movaps	XMMWORD PTR [rax-56], xmm8
	movss	xmm8, DWORD PTR [rcx+108]
	movaps	xmm0, xmm5
	mulss	xmm0, DWORD PTR [rcx+148]
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rax-120], xmm12
	movaps	XMMWORD PTR [rsp+112], xmm13
	movaps	XMMWORD PTR [rsp+96], xmm14
	movaps	XMMWORD PTR [rsp+80], xmm15
	addss	xmm6, xmm1
	movss	xmm9, DWORD PTR [rcx+144]
	movss	xmm1, DWORD PTR [rcx+136]
	movss	xmm14, DWORD PTR [rcx+120]
	movss	xmm11, DWORD PTR [rcx+104]
	movss	xmm10, DWORD PTR [rcx+124]
	addss	xmm6, xmm0
	movss	xmm13, DWORD PTR [rcx+140]
	movaps	xmm0, xmm14
	movss	xmm15, DWORD PTR [rcx+156]
	movss	xmm12, DWORD PTR [rcx+160]
	mulss	xmm0, xmm4
	movss	DWORD PTR tv3716[rsp], xmm6
	movaps	xmm6, xmm11
	mulss	xmm6, xmm2
	mulss	xmm1, xmm3
	addss	xmm6, xmm0
	movss	xmm0, DWORD PTR [rcx+152]
	mulss	xmm0, xmm5
	addss	xmm6, xmm1
	movaps	xmm1, xmm13
	mulss	xmm1, xmm3
	addss	xmm6, xmm0
	movaps	xmm0, xmm10
	mulss	xmm0, xmm4
	movss	DWORD PTR clip$1$[rsp], xmm6
	movaps	xmm6, xmm8
	mulss	xmm6, xmm2
	addss	xmm6, xmm0
	movaps	xmm0, xmm15
	mulss	xmm0, xmm5
	addss	xmm6, xmm1
	addss	xmm6, xmm0
	movaps	xmm0, xmm7
	mulss	xmm0, xmm4

; 49   : 
; 50   : 	clip[4] = modl[4] * proj[0] + modl[5] * proj[4] + modl[6] * proj[8] + modl[7] * proj[12];

	movss	xmm4, DWORD PTR [rcx+64]
	movss	DWORD PTR clip$2$[rsp], xmm6
	movss	xmm6, DWORD PTR [rcx+112]
	movaps	xmm1, xmm6
	mulss	xmm1, xmm2
	addss	xmm1, xmm0
	movaps	xmm0, xmm12
	mulss	xmm0, xmm5
	movss	xmm5, DWORD PTR [rcx+52]
	movss	DWORD PTR clip$6$[rsp], xmm5
	movss	DWORD PTR clip$3$[rsp], xmm1
	movaps	xmm1, xmm9
	movss	xmm2, DWORD PTR clip$3$[rsp]
	mulss	xmm1, xmm3
	movss	xmm3, DWORD PTR [rcx+60]
	addss	xmm2, xmm1
	movaps	xmm1, xmm5
	mulss	xmm1, DWORD PTR [rcx+100]
	addss	xmm2, xmm0
	movss	DWORD PTR clip$3$[rsp], xmm2
	movss	xmm2, DWORD PTR [rcx+56]
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+116]
	addss	xmm1, xmm0
	movss	DWORD PTR tv3715[rsp], xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR [rcx+132]
	movss	xmm0, DWORD PTR tv3715[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv3715[rsp], xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR [rcx+148]
	movss	xmm1, DWORD PTR tv3715[rsp]
	addss	xmm1, xmm0

; 51   : 	clip[5] = modl[4] * proj[1] + modl[5] * proj[5] + modl[6] * proj[9] + modl[7] * proj[13];

	movaps	xmm0, xmm2
	mulss	xmm0, xmm14
	movss	DWORD PTR tv3715[rsp], xmm1
	movaps	xmm1, xmm5
	movss	xmm5, DWORD PTR [rcx+136]
	mulss	xmm1, xmm11
	addss	xmm1, xmm0
	movss	DWORD PTR clip$4$[rsp], xmm1
	movaps	xmm1, xmm3
	movss	xmm0, DWORD PTR clip$4$[rsp]
	mulss	xmm1, xmm5
	addss	xmm0, xmm1
	movss	DWORD PTR clip$4$[rsp], xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR [rcx+152]
	movss	xmm1, DWORD PTR clip$4$[rsp]
	addss	xmm1, xmm0

; 52   : 	clip[6] = modl[4] * proj[2] + modl[5] * proj[6] + modl[6] * proj[10] + modl[7] * proj[14];

	movaps	xmm0, xmm2
	mulss	xmm0, xmm10

; 53   : 	clip[7] = modl[4] * proj[3] + modl[5] * proj[7] + modl[6] * proj[11] + modl[7] * proj[15];

	mulss	xmm2, xmm7
	movss	DWORD PTR clip$4$[rsp], xmm1
	movss	xmm1, DWORD PTR clip$6$[rsp]
	mulss	xmm1, xmm8
	addss	xmm1, xmm0
	movss	DWORD PTR clip$5$[rsp], xmm1
	movaps	xmm1, xmm3
	movss	xmm0, DWORD PTR clip$5$[rsp]
	mulss	xmm1, xmm13
	mulss	xmm3, xmm9
	addss	xmm0, xmm1
	movss	DWORD PTR clip$5$[rsp], xmm0
	movaps	xmm0, xmm4
	movss	xmm1, DWORD PTR clip$5$[rsp]
	mulss	xmm0, xmm15
	mulss	xmm4, xmm12
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR clip$6$[rsp]
	mulss	xmm0, xmm6
	addss	xmm0, xmm2
	movss	DWORD PTR clip$5$[rsp], xmm1

; 54   : 
; 55   : 	clip[8] = modl[8] * proj[0] + modl[9] * proj[4] + modl[10] * proj[8] + modl[11] * proj[12];

	movss	xmm2, DWORD PTR [rcx+72]
	addss	xmm0, xmm3
	movss	xmm3, DWORD PTR [rcx+76]
	addss	xmm0, xmm4
	movss	xmm4, DWORD PTR [rcx+80]
	movss	DWORD PTR clip$6$[rsp], xmm0
	movss	xmm0, DWORD PTR [rcx+68]
	movaps	xmm1, xmm0
	movss	DWORD PTR clip$9$[rsp], xmm0
	mulss	xmm1, DWORD PTR [rcx+100]
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+116]
	addss	xmm1, xmm0
	movss	DWORD PTR tv3714[rsp], xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR [rcx+132]
	movss	xmm0, DWORD PTR tv3714[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv3714[rsp], xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR [rcx+148]
	movss	xmm1, DWORD PTR tv3714[rsp]
	addss	xmm1, xmm0

; 56   : 	clip[9] = modl[8] * proj[1] + modl[9] * proj[5] + modl[10] * proj[9] + modl[11] * proj[13];

	movaps	xmm0, xmm2
	mulss	xmm0, xmm14
	movss	DWORD PTR tv3714[rsp], xmm1
	movss	xmm1, DWORD PTR clip$9$[rsp]
	mulss	xmm1, xmm11
	addss	xmm1, xmm0
	movss	DWORD PTR clip$7$[rsp], xmm1
	movaps	xmm1, xmm3
	movss	xmm0, DWORD PTR clip$7$[rsp]
	mulss	xmm1, xmm5
	addss	xmm0, xmm1
	movss	DWORD PTR clip$7$[rsp], xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR [rcx+152]
	movss	xmm1, DWORD PTR clip$7$[rsp]
	addss	xmm1, xmm0

; 57   : 	clip[10] = modl[8] * proj[2] + modl[9] * proj[6] + modl[10] * proj[10] + modl[11] * proj[14];

	movaps	xmm0, xmm2
	mulss	xmm0, xmm10

; 58   : 	clip[11] = modl[8] * proj[3] + modl[9] * proj[7] + modl[10] * proj[11] + modl[11] * proj[15];

	mulss	xmm2, xmm7
	movss	DWORD PTR clip$7$[rsp], xmm1
	movss	xmm1, DWORD PTR clip$9$[rsp]
	mulss	xmm1, xmm8
	addss	xmm1, xmm0
	movss	DWORD PTR clip$8$[rsp], xmm1
	movaps	xmm1, xmm3
	movss	xmm0, DWORD PTR clip$8$[rsp]
	mulss	xmm1, xmm13
	mulss	xmm3, xmm9
	addss	xmm0, xmm1
	movss	DWORD PTR clip$8$[rsp], xmm0
	movaps	xmm0, xmm4
	movss	xmm1, DWORD PTR clip$8$[rsp]
	mulss	xmm0, xmm15
	mulss	xmm4, xmm12
	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR clip$9$[rsp]
	mulss	xmm0, xmm6
	addss	xmm0, xmm2
	movss	DWORD PTR clip$8$[rsp], xmm1

; 59   : 
; 60   : 	clip[12] = modl[12] * proj[0] + modl[13] * proj[4] + modl[14] * proj[8] + modl[15] * proj[12];

	movss	xmm2, DWORD PTR [rcx+88]
	addss	xmm0, xmm3
	movss	xmm3, DWORD PTR [rcx+92]
	addss	xmm0, xmm4
	movss	xmm4, DWORD PTR [rcx+96]
	movss	DWORD PTR clip$9$[rsp], xmm0
	movss	xmm0, DWORD PTR [rcx+84]
	movss	DWORD PTR clip$12$[rsp], xmm0
	movaps	xmm1, xmm0
	mulss	xmm1, DWORD PTR [rcx+100]
	movaps	xmm0, xmm2
	mulss	xmm0, DWORD PTR [rcx+116]
	addss	xmm1, xmm0
	movss	DWORD PTR tv3713[rsp], xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, DWORD PTR [rcx+132]
	movss	xmm0, DWORD PTR tv3713[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv3713[rsp], xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR [rcx+148]
	movss	xmm1, DWORD PTR tv3713[rsp]
	addss	xmm1, xmm0

; 61   : 	clip[13] = modl[12] * proj[1] + modl[13] * proj[5] + modl[14] * proj[9] + modl[15] * proj[13];

	movaps	xmm0, xmm2
	mulss	xmm0, xmm14
	movss	DWORD PTR tv3713[rsp], xmm1
	movss	xmm1, DWORD PTR clip$12$[rsp]
	mulss	xmm1, xmm11

; 62   : 	clip[14] = modl[12] * proj[2] + modl[13] * proj[6] + modl[14] * proj[10] + modl[15] * proj[14];

	movss	xmm11, DWORD PTR clip$12$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR [rcx+152]
	movss	DWORD PTR clip$10$[rsp], xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, xmm5
	movss	xmm5, DWORD PTR clip$10$[rsp]
	addss	xmm5, xmm1
	movaps	xmm1, xmm3
	mulss	xmm1, xmm13
	addss	xmm5, xmm0
	movaps	xmm0, xmm2
	mulss	xmm0, xmm10
	movss	DWORD PTR clip$10$[rsp], xmm5
	movaps	xmm5, xmm11
	mulss	xmm5, xmm8
	addss	xmm5, xmm0
	addss	xmm5, xmm1

; 64   : 
; 65   : 	FrustumValues[RIGHT][A] = clip[3] - clip[0];

	movss	xmm10, DWORD PTR tv3715[rsp]
	movaps	xmm0, xmm4
	movss	xmm8, DWORD PTR clip$3$[rsp]
	movss	xmm13, DWORD PTR tv3713[rsp]
	movaps	xmm14, xmm8
	mulss	xmm0, xmm15
	mulss	xmm4, xmm12
	movss	xmm12, DWORD PTR tv3714[rsp]
	addss	xmm5, xmm0
	mulss	xmm11, xmm6
	movss	xmm6, DWORD PTR clip$6$[rsp]
	mulss	xmm2, xmm7
	movaps	xmm15, xmm6
	movss	xmm7, DWORD PTR clip$9$[rsp]
	subss	xmm15, xmm10
	mulss	xmm3, xmm9
	movss	xmm9, DWORD PTR tv3716[rsp]
	addss	xmm11, xmm2
	subss	xmm14, xmm9
	movss	DWORD PTR clip$11$[rsp], xmm5
	movaps	xmm2, xmm7
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+4, xmm15
	subss	xmm2, xmm12

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	movaps	xmm0, xmm15
	mulss	xmm0, xmm15

; 63   : 	clip[15] = modl[12] * proj[3] + modl[13] * proj[7] + modl[14] * proj[11] + modl[15] * proj[15];

	addss	xmm11, xmm3

; 64   : 
; 65   : 	FrustumValues[RIGHT][A] = clip[3] - clip[0];

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA, xmm14

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	movaps	xmm1, xmm2

; 64   : 
; 65   : 	FrustumValues[RIGHT][A] = clip[3] - clip[0];

	movss	DWORD PTR tv3727[rsp], xmm2

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	mulss	xmm1, xmm2

; 63   : 	clip[15] = modl[12] * proj[3] + modl[13] * proj[7] + modl[14] * proj[11] + modl[15] * proj[15];

	addss	xmm11, xmm4

; 64   : 
; 65   : 	FrustumValues[RIGHT][A] = clip[3] - clip[0];

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+8, xmm2
	movaps	xmm4, xmm14
	mulss	xmm4, xmm14
	movaps	xmm3, xmm11

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	addss	xmm4, xmm0
	xorps	xmm0, xmm0

; 64   : 
; 65   : 	FrustumValues[RIGHT][A] = clip[3] - clip[0];

	subss	xmm3, xmm13

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	addss	xmm4, xmm1

; 64   : 
; 65   : 	FrustumValues[RIGHT][A] = clip[3] - clip[0];

	movss	DWORD PTR tv3726[rsp], xmm3
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+12, xmm3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath

; 266  :     return _CSTD sqrtf(_Xx);

	ucomiss	xmm0, xmm4
	ja	SHORT $LN145@CalculateF
	xorps	xmm0, xmm0
	sqrtss	xmm0, xmm4
	jmp	SHORT $LN146@CalculateF
$LN145@CalculateF:
	movaps	xmm0, xmm4
	call	sqrtf
	movss	xmm2, DWORD PTR tv3727[rsp]
	movss	xmm3, DWORD PTR tv3726[rsp]
$LN146@CalculateF:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	divss	xmm2, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath

; 266  :     return _CSTD sqrtf(_Xx);

	divss	xmm14, xmm0
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	divss	xmm15, xmm0
	divss	xmm3, xmm0
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+8, xmm2
	addss	xmm9, xmm8

; 66   : 	FrustumValues[RIGHT][B] = clip[7] - clip[4];
; 67   : 	FrustumValues[RIGHT][C] = clip[11] - clip[8];
; 68   : 	FrustumValues[RIGHT][D] = clip[15] - clip[12];
; 69   : 	NormalizePlane(FrustumValues, RIGHT);
; 70   : 
; 71   : 	FrustumValues[LEFT][A] = clip[3] + clip[0];

	addss	xmm10, xmm6

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA, xmm14

; 66   : 	FrustumValues[RIGHT][B] = clip[7] - clip[4];
; 67   : 	FrustumValues[RIGHT][C] = clip[11] - clip[8];
; 68   : 	FrustumValues[RIGHT][D] = clip[15] - clip[12];
; 69   : 	NormalizePlane(FrustumValues, RIGHT);
; 70   : 
; 71   : 	FrustumValues[LEFT][A] = clip[3] + clip[0];

	addss	xmm12, xmm7

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+4, xmm15

; 66   : 	FrustumValues[RIGHT][B] = clip[7] - clip[4];
; 67   : 	FrustumValues[RIGHT][C] = clip[11] - clip[8];
; 68   : 	FrustumValues[RIGHT][D] = clip[15] - clip[12];
; 69   : 	NormalizePlane(FrustumValues, RIGHT);
; 70   : 
; 71   : 	FrustumValues[LEFT][A] = clip[3] + clip[0];

	addss	xmm13, xmm11

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+12, xmm3

; 66   : 	FrustumValues[RIGHT][B] = clip[7] - clip[4];
; 67   : 	FrustumValues[RIGHT][C] = clip[11] - clip[8];
; 68   : 	FrustumValues[RIGHT][D] = clip[15] - clip[12];
; 69   : 	NormalizePlane(FrustumValues, RIGHT);
; 70   : 
; 71   : 	FrustumValues[LEFT][A] = clip[3] + clip[0];

	movaps	xmm2, xmm9
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+16, xmm9

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	movaps	xmm0, xmm10

; 66   : 	FrustumValues[RIGHT][B] = clip[7] - clip[4];
; 67   : 	FrustumValues[RIGHT][C] = clip[11] - clip[8];
; 68   : 	FrustumValues[RIGHT][D] = clip[15] - clip[12];
; 69   : 	NormalizePlane(FrustumValues, RIGHT);
; 70   : 
; 71   : 	FrustumValues[LEFT][A] = clip[3] + clip[0];

	mulss	xmm2, xmm9

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	mulss	xmm0, xmm10
	movaps	xmm1, xmm12
	mulss	xmm1, xmm12
	addss	xmm2, xmm0

; 66   : 	FrustumValues[RIGHT][B] = clip[7] - clip[4];
; 67   : 	FrustumValues[RIGHT][C] = clip[11] - clip[8];
; 68   : 	FrustumValues[RIGHT][D] = clip[15] - clip[12];
; 69   : 	NormalizePlane(FrustumValues, RIGHT);
; 70   : 
; 71   : 	FrustumValues[LEFT][A] = clip[3] + clip[0];

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+20, xmm10
	xorps	xmm0, xmm0
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+24, xmm12
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+28, xmm13

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	addss	xmm2, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath

; 266  :     return _CSTD sqrtf(_Xx);

	ucomiss	xmm0, xmm2
	ja	SHORT $LN143@CalculateF
	xorps	xmm0, xmm0
	sqrtss	xmm0, xmm2
	jmp	SHORT $LN144@CalculateF
$LN143@CalculateF:
	movaps	xmm0, xmm2
	call	sqrtf
$LN144@CalculateF:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp

; 77   : 	FrustumValues[BOTTOM][A] = clip[3] + clip[1];

	movss	xmm14, DWORD PTR clip$1$[rsp]
	movss	xmm15, DWORD PTR clip$4$[rsp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath

; 266  :     return _CSTD sqrtf(_Xx);

	divss	xmm9, xmm0
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	divss	xmm10, xmm0
	divss	xmm12, xmm0
	divss	xmm13, xmm0
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+16, xmm9

; 77   : 	FrustumValues[BOTTOM][A] = clip[3] + clip[1];

	movaps	xmm9, xmm8
	addss	xmm9, xmm14

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+20, xmm10

; 77   : 	FrustumValues[BOTTOM][A] = clip[3] + clip[1];

	movaps	xmm10, xmm6

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+24, xmm12

; 77   : 	FrustumValues[BOTTOM][A] = clip[3] + clip[1];

	addss	xmm10, xmm15

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+28, xmm13

; 77   : 	FrustumValues[BOTTOM][A] = clip[3] + clip[1];

	movaps	xmm12, xmm7
	movaps	xmm13, xmm11
	addss	xmm12, DWORD PTR clip$7$[rsp]
	addss	xmm13, DWORD PTR clip$10$[rsp]
	movaps	xmm2, xmm9
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+32, xmm9

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	movaps	xmm0, xmm10

; 77   : 	FrustumValues[BOTTOM][A] = clip[3] + clip[1];

	mulss	xmm2, xmm9

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	mulss	xmm0, xmm10
	movaps	xmm1, xmm12
	mulss	xmm1, xmm12
	addss	xmm2, xmm0

; 77   : 	FrustumValues[BOTTOM][A] = clip[3] + clip[1];

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+36, xmm10
	xorps	xmm0, xmm0
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+40, xmm12
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+44, xmm13

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	addss	xmm2, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath

; 266  :     return _CSTD sqrtf(_Xx);

	ucomiss	xmm0, xmm2
	ja	SHORT $LN141@CalculateF
	xorps	xmm0, xmm0
	sqrtss	xmm0, xmm2
	jmp	SHORT $LN142@CalculateF
$LN141@CalculateF:
	movaps	xmm0, xmm2
	call	sqrtf
$LN142@CalculateF:
	divss	xmm9, xmm0
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	divss	xmm10, xmm0
	divss	xmm12, xmm0
	divss	xmm13, xmm0
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+32, xmm9

; 78   : 	FrustumValues[BOTTOM][B] = clip[7] + clip[5];
; 79   : 	FrustumValues[BOTTOM][C] = clip[11] + clip[9];
; 80   : 	FrustumValues[BOTTOM][D] = clip[15] + clip[13];
; 81   : 	NormalizePlane(FrustumValues, BOTTOM);
; 82   : 
; 83   : 	FrustumValues[TOP][A] = clip[3] - clip[1];

	movaps	xmm9, xmm8
	subss	xmm9, xmm14

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+36, xmm10

; 78   : 	FrustumValues[BOTTOM][B] = clip[7] + clip[5];
; 79   : 	FrustumValues[BOTTOM][C] = clip[11] + clip[9];
; 80   : 	FrustumValues[BOTTOM][D] = clip[15] + clip[13];
; 81   : 	NormalizePlane(FrustumValues, BOTTOM);
; 82   : 
; 83   : 	FrustumValues[TOP][A] = clip[3] - clip[1];

	movaps	xmm10, xmm6

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+40, xmm12

; 78   : 	FrustumValues[BOTTOM][B] = clip[7] + clip[5];
; 79   : 	FrustumValues[BOTTOM][C] = clip[11] + clip[9];
; 80   : 	FrustumValues[BOTTOM][D] = clip[15] + clip[13];
; 81   : 	NormalizePlane(FrustumValues, BOTTOM);
; 82   : 
; 83   : 	FrustumValues[TOP][A] = clip[3] - clip[1];

	subss	xmm10, xmm15

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+44, xmm13

; 78   : 	FrustumValues[BOTTOM][B] = clip[7] + clip[5];
; 79   : 	FrustumValues[BOTTOM][C] = clip[11] + clip[9];
; 80   : 	FrustumValues[BOTTOM][D] = clip[15] + clip[13];
; 81   : 	NormalizePlane(FrustumValues, BOTTOM);
; 82   : 
; 83   : 	FrustumValues[TOP][A] = clip[3] - clip[1];

	movaps	xmm12, xmm7
	movaps	xmm13, xmm11
	subss	xmm12, DWORD PTR clip$7$[rsp]
	subss	xmm13, DWORD PTR clip$10$[rsp]
	movaps	xmm2, xmm9
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+48, xmm9

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	movaps	xmm0, xmm10

; 78   : 	FrustumValues[BOTTOM][B] = clip[7] + clip[5];
; 79   : 	FrustumValues[BOTTOM][C] = clip[11] + clip[9];
; 80   : 	FrustumValues[BOTTOM][D] = clip[15] + clip[13];
; 81   : 	NormalizePlane(FrustumValues, BOTTOM);
; 82   : 
; 83   : 	FrustumValues[TOP][A] = clip[3] - clip[1];

	mulss	xmm2, xmm9

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	mulss	xmm0, xmm10
	movaps	xmm1, xmm12
	mulss	xmm1, xmm12
	addss	xmm2, xmm0

; 78   : 	FrustumValues[BOTTOM][B] = clip[7] + clip[5];
; 79   : 	FrustumValues[BOTTOM][C] = clip[11] + clip[9];
; 80   : 	FrustumValues[BOTTOM][D] = clip[15] + clip[13];
; 81   : 	NormalizePlane(FrustumValues, BOTTOM);
; 82   : 
; 83   : 	FrustumValues[TOP][A] = clip[3] - clip[1];

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+52, xmm10
	xorps	xmm0, xmm0
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+56, xmm12
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+60, xmm13

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	addss	xmm2, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath

; 266  :     return _CSTD sqrtf(_Xx);

	ucomiss	xmm0, xmm2
	ja	SHORT $LN139@CalculateF
	xorps	xmm0, xmm0
	sqrtss	xmm0, xmm2
	jmp	SHORT $LN140@CalculateF
$LN139@CalculateF:
	movaps	xmm0, xmm2
	call	sqrtf
$LN140@CalculateF:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp

; 89   : 	FrustumValues[BACK][A] = clip[3] - clip[2];

	movss	xmm14, DWORD PTR clip$2$[rsp]
	movss	xmm15, DWORD PTR clip$5$[rsp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath

; 266  :     return _CSTD sqrtf(_Xx);

	divss	xmm9, xmm0
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	divss	xmm10, xmm0
	divss	xmm12, xmm0
	divss	xmm13, xmm0
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+48, xmm9

; 89   : 	FrustumValues[BACK][A] = clip[3] - clip[2];

	movaps	xmm9, xmm8
	subss	xmm9, xmm14

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+52, xmm10

; 89   : 	FrustumValues[BACK][A] = clip[3] - clip[2];

	movaps	xmm10, xmm6

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+56, xmm12

; 89   : 	FrustumValues[BACK][A] = clip[3] - clip[2];

	subss	xmm10, xmm15

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+60, xmm13

; 89   : 	FrustumValues[BACK][A] = clip[3] - clip[2];

	movaps	xmm12, xmm7
	movaps	xmm13, xmm11
	subss	xmm12, DWORD PTR clip$8$[rsp]
	subss	xmm13, DWORD PTR clip$11$[rsp]
	movaps	xmm2, xmm9
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+64, xmm9

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	movaps	xmm0, xmm10

; 89   : 	FrustumValues[BACK][A] = clip[3] - clip[2];

	mulss	xmm2, xmm9

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	mulss	xmm0, xmm10
	movaps	xmm1, xmm12
	mulss	xmm1, xmm12
	addss	xmm2, xmm0

; 89   : 	FrustumValues[BACK][A] = clip[3] - clip[2];

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+68, xmm10
	xorps	xmm0, xmm0
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+72, xmm12
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+76, xmm13

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	addss	xmm2, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath

; 266  :     return _CSTD sqrtf(_Xx);

	ucomiss	xmm0, xmm2
	ja	SHORT $LN137@CalculateF
	xorps	xmm0, xmm0
	sqrtss	xmm0, xmm2
	jmp	SHORT $LN138@CalculateF
$LN137@CalculateF:
	movaps	xmm0, xmm2
	call	sqrtf
$LN138@CalculateF:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp

; 95   : 	FrustumValues[FRONT][A] = clip[3] + clip[2];

	addss	xmm7, DWORD PTR clip$8$[rsp]
	addss	xmm11, DWORD PTR clip$11$[rsp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath

; 266  :     return _CSTD sqrtf(_Xx);

	divss	xmm9, xmm0
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	divss	xmm10, xmm0
	divss	xmm12, xmm0
	divss	xmm13, xmm0

; 95   : 	FrustumValues[FRONT][A] = clip[3] + clip[2];

	addss	xmm8, xmm14

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+64, xmm9

; 95   : 	FrustumValues[FRONT][A] = clip[3] + clip[2];

	addss	xmm6, xmm15

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+68, xmm10

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	movaps	xmm1, xmm7

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+72, xmm12

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	mulss	xmm1, xmm7

; 95   : 	FrustumValues[FRONT][A] = clip[3] + clip[2];

	movaps	xmm2, xmm8

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+76, xmm13

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	movaps	xmm0, xmm6

; 95   : 	FrustumValues[FRONT][A] = clip[3] + clip[2];

	mulss	xmm2, xmm8

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	mulss	xmm0, xmm6

; 95   : 	FrustumValues[FRONT][A] = clip[3] + clip[2];

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+80, xmm8
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+84, xmm6

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	addss	xmm2, xmm0

; 95   : 	FrustumValues[FRONT][A] = clip[3] + clip[2];

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+88, xmm7
	xorps	xmm0, xmm0
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+92, xmm11

; 27   : 	float Magnitude = (float)sqrt(FurstumArr[Side][A] * FurstumArr[Side][A] +

	addss	xmm2, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath

; 266  :     return _CSTD sqrtf(_Xx);

	ucomiss	xmm0, xmm2
	ja	SHORT $LN135@CalculateF
	xorps	xmm0, xmm0
	sqrtss	xmm0, xmm2
	jmp	SHORT $LN136@CalculateF
$LN135@CalculateF:
	movaps	xmm0, xmm2
	call	sqrtf
$LN136@CalculateF:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp

; 100  : }

	movaps	xmm13, XMMWORD PTR [rsp+112]
	lea	r11, QWORD PTR [rsp+248]
	movaps	xmm9, XMMWORD PTR [r11-72]
	movaps	xmm10, XMMWORD PTR [r11-88]
	movaps	xmm12, XMMWORD PTR [r11-120]
	movaps	xmm14, XMMWORD PTR [rsp+96]
	movaps	xmm15, XMMWORD PTR [rsp+80]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\cmath

; 266  :     return _CSTD sqrtf(_Xx);

	divss	xmm8, xmm0
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	divss	xmm6, xmm0
	divss	xmm7, xmm0
	divss	xmm11, xmm0
	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+80, xmm8

; 100  : }

	movaps	xmm8, XMMWORD PTR [r11-56]

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+84, xmm6

; 100  : }

	movaps	xmm6, XMMWORD PTR [r11-24]

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+88, xmm7

; 100  : }

	movaps	xmm7, XMMWORD PTR [r11-40]

; 33   : 	FurstumArr[Side][A] /= Magnitude;

	movss	DWORD PTR ?FrustumValues@Frustum@@3PAY03MA+92, xmm11

; 100  : }

	movaps	xmm11, XMMWORD PTR [r11-104]
	mov	rsp, r11
	ret	0
?CalculateFrustum@Frustum@@YAXPEAVCamera@@@Z ENDP	; Frustum::CalculateFrustum
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\Frustum.cpp
;	COMDAT ?SphereInFrustum@Frustum@@YA_NMMMM@Z
_TEXT	SEGMENT
X$ = 32
Y$ = 40
Z$ = 48
Radius$ = 56
?SphereInFrustum@Frustum@@YA_NMMMM@Z PROC		; Frustum::SphereInFrustum, COMDAT

; 103  : {

$LN15:
	sub	rsp, 24
	xorps	xmm3, DWORD PTR __xmm@80000000800000008000000080000000
	lea	rax, OFFSET FLAT:?FrustumValues@Frustum@@3PAY03MA+4
	movaps	XMMWORD PTR [rsp], xmm6
	lea	rcx, OFFSET FLAT:?FrustumValues@Frustum@@3PAY03MA+100
	movaps	xmm6, xmm0
	movaps	xmm5, xmm2
	npad	13
$LL4@SphereInFr:

; 105  : 	{
; 106  : 		if (FrustumValues[i][A] * X + FrustumValues[i][B] * Y + FrustumValues[i][C] * Z + FrustumValues[i][D] <= -Radius)

	movaps	xmm4, xmm6
	movaps	xmm2, xmm1
	mulss	xmm4, DWORD PTR [rax-4]
	movaps	xmm0, xmm5
	mulss	xmm2, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rax+4]
	addss	xmm4, xmm2
	addss	xmm4, xmm0
	addss	xmm4, DWORD PTR [rax+8]
	comiss	xmm3, xmm4
	jae	SHORT $LN8@SphereInFr

; 104  : 	for (int i = 0; i < 6; i++)

	add	rax, 16
	cmp	rax, rcx
	jl	SHORT $LL4@SphereInFr

; 107  : 		{
; 108  : 			return false;
; 109  : 		}
; 110  : 	}
; 111  : 
; 112  : 	return true;

	mov	al, 1

; 113  : }

	movaps	xmm6, XMMWORD PTR [rsp]
	add	rsp, 24
	ret	0
$LN8@SphereInFr:
	movaps	xmm6, XMMWORD PTR [rsp]
	xor	al, al
	add	rsp, 24
	ret	0
?SphereInFrustum@Frustum@@YA_NMMMM@Z ENDP		; Frustum::SphereInFrustum
_TEXT	ENDS
END
