; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BI@CAGHNOEM@Could?5not?5create?5socket@	; `string'
PUBLIC	??_C@_0BF@ICNBJMNH@PhiveSocketConnector@	; `string'
PUBLIC	??_C@_0BM@NOKKOMHD@Could?5not?5connect?5to?5socket@ ; `string'
PUBLIC	??_C@_0BE@EFBFLEPL@Connected?5to?5socket@	; `string'
PUBLIC	??_C@_0P@KJIAJMMM@Socket?5created@		; `string'
PUBLIC	??_C@_09PFCHIMEP@127?40?40?41@			; `string'
PUBLIC	??_C@_06LCIDCBMH@?5bytes@			; `string'
PUBLIC	??_C@_05IIHALICG@Sent?5@			; `string'
PUBLIC	??_C@_0BO@OELALHBF@Could?5not?5get?5response?5header@ ; `string'
PUBLIC	??_C@_0BJ@NMILMLK@Error?5while?5sending?5data@	; `string'
PUBLIC	?ClientService@PhiveSocketConnector@@3Usockaddr_in@@A ; PhiveSocketConnector::ClientService
PUBLIC	?ClientSocket@PhiveSocketConnector@@3_KA	; PhiveSocketConnector::ClientSocket
PUBLIC	?IsConnected@PhiveSocketConnector@@3_NA		; PhiveSocketConnector::IsConnected
PUBLIC	?WsaData@PhiveSocketConnector@@3UWSAData@@A	; PhiveSocketConnector::WsaData
EXTRN	__imp_WSACleanup:PROC
EXTRN	__imp_WSAStartup:PROC
EXTRN	__imp_inet_addr:PROC
EXTRN	__imp_socket:PROC
EXTRN	__imp_send:PROC
EXTRN	__imp_connect:PROC
EXTRN	__imp_recv:PROC
EXTRN	__imp_htons:PROC
?ClientService@PhiveSocketConnector@@3Usockaddr_in@@A DB 010H DUP (?) ; PhiveSocketConnector::ClientService
?IsConnected@PhiveSocketConnector@@3_NA DB 01H DUP (?)	; PhiveSocketConnector::IsConnected
	ALIGN	4

?WsaData@PhiveSocketConnector@@3UWSAData@@A DB 0198H DUP (?) ; PhiveSocketConnector::WsaData
_BSS	ENDS
?ClientSocket@PhiveSocketConnector@@3_KA DQ ffffffffffffffffH ; PhiveSocketConnector::ClientSocket
_DATA	ENDS
;	COMDAT ??_C@_0BJ@NMILMLK@Error?5while?5sending?5data@
CONST	SEGMENT
??_C@_0BJ@NMILMLK@Error?5while?5sending?5data@ DB 'Error while sending da'
	DB	'ta', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OELALHBF@Could?5not?5get?5response?5header@
CONST	SEGMENT
??_C@_0BO@OELALHBF@Could?5not?5get?5response?5header@ DB 'Could not get r'
	DB	'esponse header', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IIHALICG@Sent?5@
CONST	SEGMENT
??_C@_05IIHALICG@Sent?5@ DB 'Sent ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LCIDCBMH@?5bytes@
CONST	SEGMENT
??_C@_06LCIDCBMH@?5bytes@ DB ' bytes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PFCHIMEP@127?40?40?41@
CONST	SEGMENT
??_C@_09PFCHIMEP@127?40?40?41@ DB '127.0.0.1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KJIAJMMM@Socket?5created@
CONST	SEGMENT
??_C@_0P@KJIAJMMM@Socket?5created@ DB 'Socket created', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EFBFLEPL@Connected?5to?5socket@
CONST	SEGMENT
??_C@_0BE@EFBFLEPL@Connected?5to?5socket@ DB 'Connected to socket', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NOKKOMHD@Could?5not?5connect?5to?5socket@
CONST	SEGMENT
??_C@_0BM@NOKKOMHD@Could?5not?5connect?5to?5socket@ DB 'Could not connect'
	DB	' to socket', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ICNBJMNH@PhiveSocketConnector@
CONST	SEGMENT
??_C@_0BF@ICNBJMNH@PhiveSocketConnector@ DB 'PhiveSocketConnector', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CAGHNOEM@Could?5not?5create?5socket@
CONST	SEGMENT
??_C@_0BI@CAGHNOEM@Could?5not?5create?5socket@ DB 'Could not create socke'
	DB	't', 00H					; `string'
PUBLIC	??$_Copy_backward_memmove@PEAEPEAE@std@@YAPEAEPEAE00@Z ; std::_Copy_backward_memmove<unsigned char *,unsigned char *>
PUBLIC	??$_Move_unchecked@PEAEPEAE@std@@YAPEAEPEAE00@Z	; std::_Move_unchecked<unsigned char *,unsigned char *>
PUBLIC	??$_Move_backward_unchecked@PEAEPEAE@std@@YAPEAEPEAE00@Z ; std::_Move_backward_unchecked<unsigned char *,unsigned char *>
PUBLIC	??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Insert_counted_range<unsigned char *>
PUBLIC	??$distance@PEAE@std@@YA_JPEAE0@Z		; std::distance<unsigned char *>
PUBLIC	??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > > >
PUBLIC	?_Make_iterator_offset@?$vector@EV?$allocator@E@std@@@std@@AEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Make_iterator_offset
PUBLIC	?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QEBAPEAEXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::_Unwrapped
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@E@std@@@0@AEAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<unsigned char> > >
PUBLIC	??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@@std@@YA?A_TAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > > &>
PUBLIC	??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@$0A@@?$vector@EV?$allocator@E@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@V21@1@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::insert<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >,0>
PUBLIC	?begin@?$vector@EV?$allocator@E@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::begin
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QEAA@PEAEPEBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >
PUBLIC	?end@?$vector@EV?$allocator@E@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::end
PUBLIC	?SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z ; PhiveSocketConnector::SendData
PUBLIC	?GetData@PhiveSocketConnector@@YA?AV?$vector@EV?$allocator@E@std@@@std@@XZ ; PhiveSocketConnector::GetData
PUBLIC	?Connect@PhiveSocketConnector@@YA_NXZ		; PhiveSocketConnector::Connect
PUBLIC	?Initialize@PhiveSocketConnector@@YAXXZ		; PhiveSocketConnector::Initialize
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Move_unchecked@PEAEPEAE@std@@YAPEAEPEAE00@Z DD imagerel $LN16
	DD	imagerel $LN16+48
	DD	imagerel $unwind$??$_Move_unchecked@PEAEPEAE@std@@YAPEAEPEAE00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z DD imagerel $LN236
	DD	imagerel $LN236+45
	DD	imagerel $unwind$??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z DD imagerel $LN236+45
	DD	imagerel $LN236+408
	DD	imagerel $chain$1$??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z DD imagerel $LN236+408
	DD	imagerel $LN236+409
	DD	imagerel $chain$2$??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z DD imagerel $LN236+409
	DD	imagerel $LN236+415
	DD	imagerel $chain$3$??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@$0A@@?$vector@EV?$allocator@E@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@V21@1@Z DD imagerel $LN13
	DD	imagerel $LN13+80
	DD	imagerel $unwind$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@$0A@@?$vector@EV?$allocator@E@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@V21@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z DD imagerel $LN518
	DD	imagerel $LN518+1634
	DD	imagerel $unwind$?SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetData@PhiveSocketConnector@@YA?AV?$vector@EV?$allocator@E@std@@@std@@XZ DD imagerel $LN271
	DD	imagerel $LN271+683
	DD	imagerel $unwind$?GetData@PhiveSocketConnector@@YA?AV?$vector@EV?$allocator@E@std@@@std@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Connect@PhiveSocketConnector@@YA_NXZ DD imagerel $LN58
	DD	imagerel $LN58+272
	DD	imagerel $unwind$?Connect@PhiveSocketConnector@@YA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Initialize@PhiveSocketConnector@@YAXXZ DD imagerel $LN59
	DD	imagerel $LN59+346
	DD	imagerel $unwind$?Initialize@PhiveSocketConnector@@YAXXZ
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Initialize@PhiveSocketConnector@@YAXXZ DB 0aH
	DB	0deH
	DB	00H
	DB	'H'
	DB	02H
	DB	01cH
	DB	00H
	DB	090H
	DB	02H
	DB	'L'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Initialize@PhiveSocketConnector@@YAXXZ DB 02H
	DB	0cH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	0e0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?Initialize@PhiveSocketConnector@@YAXXZ DB 028H
	DD	imagerel $stateUnwindMap$?Initialize@PhiveSocketConnector@@YAXXZ
	DD	imagerel $ip2state$?Initialize@PhiveSocketConnector@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Initialize@PhiveSocketConnector@@YAXXZ DD 061211H
	DD	0117412H
	DD	0103412H
	DD	0500bb212H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?Initialize@PhiveSocketConnector@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Connect@PhiveSocketConnector@@YA_NXZ DB 0aH
	DB	0a8H
	DB	00H
	DB	'H'
	DB	02H
	DB	01cH
	DB	00H
	DB	080H
	DB	02H
	DB	'L'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Connect@PhiveSocketConnector@@YA_NXZ DB 02H
	DB	0cH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	0e0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?Connect@PhiveSocketConnector@@YA_NXZ DB 028H
	DD	imagerel $stateUnwindMap$?Connect@PhiveSocketConnector@@YA_NXZ
	DD	imagerel $ip2state$?Connect@PhiveSocketConnector@@YA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Connect@PhiveSocketConnector@@YA_NXZ DD 040d11H
	DD	010340dH
	DD	05006b20dH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?Connect@PhiveSocketConnector@@YA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?GetData@PhiveSocketConnector@@YA?AV?$vector@EV?$allocator@E@std@@@std@@XZ DB 0cH
	DB	0fcH
	DB	00H
	DB	'H'
	DB	02H
	DB	01cH
	DB	00H
	DB	0aaH
	DB	04H
	DB	091H, 02H
	DB	06H
	DB	')', 02H
	DB	04H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?GetData@PhiveSocketConnector@@YA?AV?$vector@EV?$allocator@E@std@@@std@@XZ DB 06H
	DB	0cH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	050H
	DB	03aH
	DD	imagerel ??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ
	DB	0c0H
	DB	032H
	DD	imagerel ??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ
	DB	070H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?GetData@PhiveSocketConnector@@YA?AV?$vector@EV?$allocator@E@std@@@std@@XZ DB 028H
	DD	imagerel $stateUnwindMap$?GetData@PhiveSocketConnector@@YA?AV?$vector@EV?$allocator@E@std@@@std@@XZ
	DD	imagerel $ip2state$?GetData@PhiveSocketConnector@@YA?AV?$vector@EV?$allocator@E@std@@@std@@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetData@PhiveSocketConnector@@YA?AV?$vector@EV?$allocator@E@std@@@std@@XZ DD 0b2e19H
	DD	0197420H
	DD	0186420H
	DD	0173420H
	DD	0120120H
	DD	0e012f014H
	DD	05010H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?GetData@PhiveSocketConnector@@YA?AV?$vector@EV?$allocator@E@std@@@std@@XZ
	DD	082H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z DB 018H
	DB	0aeH
	DB	04H
	DB	']', 08H
	DB	06H
	DB	0c6H
	DB	0aH
	DB	08eH
	DB	0cH
	DB	019H, 02H
	DB	06H
	DB	'T'
	DB	08H
	DB	' '
	DB	06H
	DB	0edH, 02H
	DB	0cH
	DB	0aeH
	DB	0eH
	DB	01eH
	DB	0cH
	DB	0edH, 04H
	DB	00H
	DB	'D'
	DB	04H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z DB 0eH
	DB	0cH
	DD	imagerel ??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ
	DB	01H
	DB	03H
	DB	03aH
	DD	imagerel ??1BinaryVectorWriter@@QEAA@XZ
	DB	021H
	DB	03H
	DB	03aH
	DD	imagerel ??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ
	DB	0a1H
	DB	03H
	DB	03cH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	0a0H
	DB	06aH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	081H
	DB	02H
	DB	03aH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	060H
	DB	034H
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	0f0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z DB 028H
	DD	imagerel $stateUnwindMap$?SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z
	DD	imagerel $ip2state$?SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z DD 0b2e19H
	DD	0297420H
	DD	0286420H
	DD	0263420H
	DD	0220120H
	DD	0e012f014H
	DD	05010H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z
	DD	0102H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@$0A@@?$vector@EV?$allocator@E@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@V21@1@Z DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z DD 040021H
	DD	08e400H
	DD	0117400H
	DD	imagerel $LN236
	DD	imagerel $LN236+45
	DD	imagerel $unwind$??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z DD 021H
	DD	imagerel $LN236
	DD	imagerel $LN236+45
	DD	imagerel $unwind$??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z DD 041021H
	DD	08e410H
	DD	0117408H
	DD	imagerel $LN236
	DD	imagerel $LN236+45
	DD	imagerel $unwind$??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z DD 071601H
	DD	0f0128216H
	DD	0c00ed010H
	DD	0500b600cH
	DD	0300aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Move_unchecked@PEAEPEAE@std@@YAPEAEPEAE00@Z DD 040a01H
	DD	09340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
;	COMDAT ?Initialize@PhiveSocketConnector@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 64
$T4 = 64
$T5 = 112
$T6 = 112
?Initialize@PhiveSocketConnector@@YAXXZ PROC		; PhiveSocketConnector::Initialize, COMDAT

; 13   : {

$LN59:
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rdi
	push	rbp
	mov	rbp, rsp
	sub	rsp, 96					; 00000060H

; 14   : 	WORD wVersionRequested = MAKEWORD(2, 2);
; 15   : 	WsErr = WSAStartup(wVersionRequested, &WsaData);

	mov	ecx, 514				; 00000202H
	lea	rdx, OFFSET FLAT:?WsaData@PhiveSocketConnector@@3UWSAData@@A ; PhiveSocketConnector::WsaData
	call	QWORD PTR __imp_WSAStartup

; 16   : 
; 17   : 	ClientSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

	mov	edx, 1
	mov	edi, 2
	lea	r8d, QWORD PTR [rdx+5]
	mov	ecx, edi
	call	QWORD PTR __imp_socket
	mov	QWORD PTR ?ClientSocket@PhiveSocketConnector@@3_KA, rax ; PhiveSocketConnector::ClientSocket

; 18   : 
; 19   : 	// Check for socket creation success
; 20   : 	if (ClientSocket == INVALID_SOCKET)

	xorps	xmm0, xmm0
	xor	ebx, ebx

; 16   : 
; 17   : 	ClientSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

	cmp	rax, -1

; 18   : 
; 19   : 	// Check for socket creation success
; 20   : 	if (ClientSocket == INVALID_SOCKET)

	jne	SHORT $LN2@Initialize

; 22   : 		Logger::Error("PhiveSocketConnector", "Could not create socket");

	lea	rax, QWORD PTR $T2[rbp-96]
	mov	QWORD PTR $T6[rbp-96], rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T2[rbp-96], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T2[rbp-80], rbx

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T2[rbp-72], rbx

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	lea	r8d, QWORD PTR [rdi+21]
	lea	rdx, OFFSET FLAT:??_C@_0BI@CAGHNOEM@Could?5not?5create?5socket@
	lea	rcx, QWORD PTR $T2[rbp-96]
	call	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	npad	1
	xorps	xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T4[rbp-96], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T4[rbp-80], rbx

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T4[rbp-72], rbx

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	lea	r8d, QWORD PTR [rdi+18]
	lea	rdx, OFFSET FLAT:??_C@_0BF@ICNBJMNH@PhiveSocketConnector@
	lea	rcx, QWORD PTR $T4[rbp-96]
	call	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	npad	1
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp

; 22   : 		Logger::Error("PhiveSocketConnector", "Could not create socket");

	lea	rdx, QWORD PTR $T2[rbp-96]
	lea	rcx, QWORD PTR $T4[rbp-96]
	call	?Error@Logger@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; Logger::Error

; 34   : }

	lea	r11, QWORD PTR [rsp+96]
	mov	rbx, QWORD PTR [r11+32]
	mov	rdi, QWORD PTR [r11+40]
	mov	rsp, r11
	pop	rbp

; 23   : 		WSACleanup();

	rex_jmp	QWORD PTR __imp_WSACleanup
$LN2@Initialize:

; 28   : 		Logger::Info("PhiveSocketConnector", "Socket created");

	lea	rax, QWORD PTR $T3[rbp-96]
	mov	QWORD PTR $T5[rbp-96], rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T3[rbp-96], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T3[rbp-80], rbx

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T3[rbp-72], rbx

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	r8d, 14
	lea	rdx, OFFSET FLAT:??_C@_0P@KJIAJMMM@Socket?5created@
	lea	rcx, QWORD PTR $T3[rbp-96]
	call	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	npad	1
	xorps	xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T1[rbp-96], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T1[rbp-80], rbx

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T1[rbp-72], rbx

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	r8d, 20
	lea	rdx, OFFSET FLAT:??_C@_0BF@ICNBJMNH@PhiveSocketConnector@
	lea	rcx, QWORD PTR $T1[rbp-96]
	call	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	npad	1
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp

; 28   : 		Logger::Info("PhiveSocketConnector", "Socket created");

	lea	rdx, QWORD PTR $T3[rbp-96]
	lea	rcx, QWORD PTR $T1[rbp-96]
	call	?Info@Logger@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; Logger::Info

; 29   : 	}
; 30   : 
; 31   : 	ClientService.sin_family = AF_INET;

	mov	WORD PTR ?ClientService@PhiveSocketConnector@@3Usockaddr_in@@A, di

; 32   : 	ClientService.sin_addr.s_addr = inet_addr("127.0.0.1");

	lea	rcx, OFFSET FLAT:??_C@_09PFCHIMEP@127?40?40?41@
	call	QWORD PTR __imp_inet_addr
	mov	DWORD PTR ?ClientService@PhiveSocketConnector@@3Usockaddr_in@@A+4, eax

; 33   : 	ClientService.sin_port = htons(8778);

	mov	ecx, 8778				; 0000224aH
	call	QWORD PTR __imp_htons
	mov	WORD PTR ?ClientService@PhiveSocketConnector@@3Usockaddr_in@@A+2, ax

; 34   : }

	lea	r11, QWORD PTR [rsp+96]
	mov	rbx, QWORD PTR [r11+32]
	mov	rdi, QWORD PTR [r11+40]
	mov	rsp, r11
	pop	rbp
	ret	0
?Initialize@PhiveSocketConnector@@YAXXZ ENDP		; PhiveSocketConnector::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 64
$T4 = 64
$T5 = 112
$T6 = 112
?dtor$0@?0??Initialize@PhiveSocketConnector@@YAXXZ@4HA PROC ; `PhiveSocketConnector::Initialize'::`1'::dtor$0
	mov	rcx, QWORD PTR $T6[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??Initialize@PhiveSocketConnector@@YAXXZ@4HA ENDP ; `PhiveSocketConnector::Initialize'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 64
$T4 = 64
$T5 = 112
$T6 = 112
?dtor$2@?0??Initialize@PhiveSocketConnector@@YAXXZ@4HA PROC ; `PhiveSocketConnector::Initialize'::`1'::dtor$2
	mov	rcx, QWORD PTR $T5[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$2@?0??Initialize@PhiveSocketConnector@@YAXXZ@4HA ENDP ; `PhiveSocketConnector::Initialize'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
;	COMDAT ?Connect@PhiveSocketConnector@@YA_NXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 64
$T4 = 64
$T5 = 112
$T6 = 112
?Connect@PhiveSocketConnector@@YA_NXZ PROC		; PhiveSocketConnector::Connect, COMDAT

; 37   : {

$LN58:
	mov	QWORD PTR [rsp+24], rbx
	push	rbp
	mov	rbp, rsp
	sub	rsp, 96					; 00000060H

; 38   : 	if (connect(ClientSocket, reinterpret_cast<SOCKADDR*>(&ClientService), sizeof(ClientService)) == SOCKET_ERROR)

	mov	r8d, 16
	lea	rdx, OFFSET FLAT:?ClientService@PhiveSocketConnector@@3Usockaddr_in@@A ; PhiveSocketConnector::ClientService
	mov	rcx, QWORD PTR ?ClientSocket@PhiveSocketConnector@@3_KA ; PhiveSocketConnector::ClientSocket
	call	QWORD PTR __imp_connect
	xorps	xmm0, xmm0
	xor	ebx, ebx
	cmp	eax, -1
	jne	SHORT $LN2@Connect

; 40   : 		Logger::Warning("PhiveSocketConnector", "Could not connect to socket");

	lea	rax, QWORD PTR $T2[rbp-96]
	mov	QWORD PTR $T6[rbp-96], rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T2[rbp-96], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T2[rbp-80], rbx

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T2[rbp-72], rbx

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	lea	r8d, QWORD PTR [rbx+27]
	lea	rdx, OFFSET FLAT:??_C@_0BM@NOKKOMHD@Could?5not?5connect?5to?5socket@
	lea	rcx, QWORD PTR $T2[rbp-96]
	call	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	npad	1
	xorps	xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T4[rbp-96], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T4[rbp-80], rbx

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T4[rbp-72], rbx

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	lea	r8d, QWORD PTR [rbx+20]
	lea	rdx, OFFSET FLAT:??_C@_0BF@ICNBJMNH@PhiveSocketConnector@
	lea	rcx, QWORD PTR $T4[rbp-96]
	call	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	npad	1
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp

; 40   : 		Logger::Warning("PhiveSocketConnector", "Could not connect to socket");

	lea	rdx, QWORD PTR $T2[rbp-96]
	lea	rcx, QWORD PTR $T4[rbp-96]
	call	?Warning@Logger@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; Logger::Warning

; 41   : 		return false;

	xor	al, al

; 48   : }

	mov	rbx, QWORD PTR [rsp+128]
	add	rsp, 96					; 00000060H
	pop	rbp
	ret	0
$LN2@Connect:

; 44   : 	Logger::Info("PhiveSocketConnector", "Connected to socket");

	lea	rax, QWORD PTR $T3[rbp-96]
	mov	QWORD PTR $T5[rbp-96], rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T3[rbp-96], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T3[rbp-80], rbx

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T3[rbp-72], rbx

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	r8d, 19
	lea	rdx, OFFSET FLAT:??_C@_0BE@EFBFLEPL@Connected?5to?5socket@
	lea	rcx, QWORD PTR $T3[rbp-96]
	call	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	npad	1
	xorps	xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T1[rbp-96], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T1[rbp-80], rbx

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T1[rbp-72], rbx

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	r8d, 20
	lea	rdx, OFFSET FLAT:??_C@_0BF@ICNBJMNH@PhiveSocketConnector@
	lea	rcx, QWORD PTR $T1[rbp-96]
	call	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	npad	1
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp

; 44   : 	Logger::Info("PhiveSocketConnector", "Connected to socket");

	lea	rdx, QWORD PTR $T3[rbp-96]
	lea	rcx, QWORD PTR $T1[rbp-96]
	call	?Info@Logger@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; Logger::Info

; 45   : 	IsConnected = true;

	mov	BYTE PTR ?IsConnected@PhiveSocketConnector@@3_NA, 1 ; PhiveSocketConnector::IsConnected

; 46   : 
; 47   : 	return true;

	mov	al, 1

; 48   : }

	mov	rbx, QWORD PTR [rsp+128]
	add	rsp, 96					; 00000060H
	pop	rbp
	ret	0
?Connect@PhiveSocketConnector@@YA_NXZ ENDP		; PhiveSocketConnector::Connect
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 64
$T4 = 64
$T5 = 112
$T6 = 112
?dtor$0@?0??Connect@PhiveSocketConnector@@YA_NXZ@4HA PROC ; `PhiveSocketConnector::Connect'::`1'::dtor$0
	mov	rcx, QWORD PTR $T6[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??Connect@PhiveSocketConnector@@YA_NXZ@4HA ENDP ; `PhiveSocketConnector::Connect'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 64
$T4 = 64
$T5 = 112
$T6 = 112
?dtor$2@?0??Connect@PhiveSocketConnector@@YA_NXZ@4HA PROC ; `PhiveSocketConnector::Connect'::`1'::dtor$2
	mov	rcx, QWORD PTR $T5[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$2@?0??Connect@PhiveSocketConnector@@YA_NXZ@4HA ENDP ; `PhiveSocketConnector::Connect'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
;	COMDAT ?GetData@PhiveSocketConnector@@YA?AV?$vector@EV?$allocator@E@std@@@std@@XZ
_TEXT	SEGMENT
$T3 = 40
Data$4 = 56
$T5 = 56
__$ReturnUdt$GSCopy$ = 88
Header$ = 88
Bytes$6 = 96
$T7 = 96
__$ArrayPad$ = 128
__$ReturnUdt$ = 176
?GetData@PhiveSocketConnector@@YA?AV?$vector@EV?$allocator@E@std@@@std@@XZ PROC ; PhiveSocketConnector::GetData, COMDAT

; 51   : {

$LN271:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	rbp
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-71]
	sub	rsp, 144				; 00000090H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-73], rax
	mov	rsi, rcx
	mov	QWORD PTR __$ReturnUdt$GSCopy$[rbp-73], rcx
	xor	r14d, r14d

; 52   : 	InHeader Header;
; 53   : 	int RByteCount = recv(ClientSocket, reinterpret_cast<char*>(&Header), sizeof(Header), 0);

	xor	r9d, r9d
	lea	r8d, QWORD PTR [r14+8]
	lea	rdx, QWORD PTR Header$[rbp-73]
	mov	rcx, QWORD PTR ?ClientSocket@PhiveSocketConnector@@3_KA ; PhiveSocketConnector::ClientSocket
	call	QWORD PTR __imp_recv

; 54   : 	if (RByteCount < 0)

	test	eax, eax
	jns	$LN4@GetData

; 56   : 		Logger::Error("PhiveSocketConnector", "Could not get response header");

	lea	rax, QWORD PTR $T7[rbp-73]
	mov	QWORD PTR $T3[rbp-73], rax
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T7[rbp-73], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T7[rbp-57], r14

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T7[rbp-49], r14

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	lea	r8d, QWORD PTR [r14+29]
	lea	rdx, OFFSET FLAT:??_C@_0BO@OELALHBF@Could?5not?5get?5response?5header@
	lea	rcx, QWORD PTR $T7[rbp-73]
	call	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	npad	1
	xorps	xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T5[rbp-73], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T5[rbp-57], r14

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T5[rbp-49], r14

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	lea	r8d, QWORD PTR [r14+20]
	lea	rdx, OFFSET FLAT:??_C@_0BF@ICNBJMNH@PhiveSocketConnector@
	lea	rcx, QWORD PTR $T5[rbp-73]
	call	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	npad	1
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp

; 56   : 		Logger::Error("PhiveSocketConnector", "Could not get response header");

	lea	rdx, QWORD PTR $T7[rbp-73]
	lea	rcx, QWORD PTR $T5[rbp-73]
	call	?Error@Logger@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; Logger::Error
$LN5@GetData:

; 74   : }

	mov	QWORD PTR [rsi+16], r14
	mov	QWORD PTR [rsi+8], r14
	mov	QWORD PTR [rsi], r14
$LN268@GetData:
	mov	rax, rsi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp-73]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+144]
	mov	rbx, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	mov	rdi, QWORD PTR [r11+56]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	rbp
	ret	0
$LN4@GetData:

; 57   : 		return std::vector<unsigned char>();
; 58   : 	}
; 59   : 
; 60   : 	if (Header.mResponseType == RespType::Phive)

	cmp	DWORD PTR Header$[rbp-73], 3
	jne	SHORT $LN5@GetData
	xorps	xmm0, xmm0
	movups	XMMWORD PTR Bytes$6[rbp-73], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	r9, r14
	mov	QWORD PTR Bytes$6[rbp-73], r14
	movdqu	XMMWORD PTR Bytes$6[rbp-65], xmm0
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp

; 63   : 		while (Bytes.size() < Header.mMessageSize)

	mov	r8d, DWORD PTR Header$[rbp-69]
	mov	rdx, QWORD PTR Bytes$6[rbp-65]
	test	r8d, r8d
	je	$LN264@GetData
	mov	r15, 9223372036854775807		; 7fffffffffffffffH
$LL2@GetData:
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, rdx
	sub	rax, r9
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp

; 65   : 			std::vector<unsigned char> Data(Header.mMessageSize - Bytes.size());

	mov	ebx, r8d
	sub	rbx, rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	movdqu	XMMWORD PTR Data$4[rbp-73], xmm0
	mov	QWORD PTR Data$4[rbp-57], r14

; 2065 :         if (_Count != 0) {

	je	SHORT $LN82@GetData

; 2006 :         if (_Newcapacity > max_size()) {

	cmp	rbx, r15
	ja	$LN254@GetData
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rbx, 4096				; 00001000H
	jb	SHORT $LN38@GetData

; 139  :     const size_t _Block_size = _Non_user_size + _Bytes;

	lea	rcx, QWORD PTR [rbx+39]

; 140  :     if (_Block_size <= _Bytes) {

	cmp	rcx, rbx
	jbe	$LN255@GetData

; 87   :         return ::operator new(_Bytes);

	call	??2@YAPEAX_K@Z				; operator new
	mov	rcx, rax

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	test	rax, rax
	je	$LN161@GetData

; 146  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	add	rax, 39					; 00000027H
	and	rax, -32				; ffffffffffffffe0H

; 147  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	QWORD PTR [rax-8], rcx

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	jmp	SHORT $LN36@GetData
$LN38@GetData:

; 87   :         return ::operator new(_Bytes);

	mov	rcx, rbx
	call	??2@YAPEAX_K@Z				; operator new
$LN36@GetData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1990 :         _Myfirst           = _Newvec;

	mov	QWORD PTR Data$4[rbp-73], rax

; 1991 :         _Mylast            = _Newvec;
; 1992 :         _Myend             = _Newvec + _Newcapacity;

	lea	rdi, QWORD PTR [rax+rbx]
	mov	QWORD PTR Data$4[rbp-57], rdi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2020 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	r8, rbx
	xor	edx, edx
	mov	rcx, rax
	call	memset
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2069 :                 _My_data._Mylast = _Uninitialized_value_construct_n(_My_data._Myfirst, _Count, _Al);

	mov	QWORD PTR Data$4[rbp-65], rdi
	mov	r8d, DWORD PTR Header$[rbp-69]
	mov	rdx, QWORD PTR Bytes$6[rbp-65]
	mov	r9, QWORD PTR Bytes$6[rbp-73]
$LN82@GetData:

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	rdx, r9
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp

; 66   : 			RByteCount = recv(ClientSocket, reinterpret_cast<char*>(Data.data()), Header.mMessageSize - Bytes.size(), 0);

	sub	r8d, edx
	xor	r9d, r9d
	mov	rdx, QWORD PTR Data$4[rbp-73]
	mov	rcx, QWORD PTR ?ClientSocket@PhiveSocketConnector@@3_KA ; PhiveSocketConnector::ClientSocket
	call	QWORD PTR __imp_recv

; 67   : 			Data.resize(RByteCount);

	movsxd	r8, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1557 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	r9, QWORD PTR Data$4[rbp-65]
	mov	rdx, r9
	mov	rcx, QWORD PTR Data$4[rbp-73]
	sub	rdx, rcx

; 1558 :         if (_Newsize < _Oldsize) { // trim

	cmp	r8, rdx
	jae	SHORT $LN91@GetData

; 1559 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	r9, QWORD PTR [r8+rcx]
	mov	QWORD PTR Data$4[rbp-65], r9

; 1560 :             _Orphan_range(_Newlast, _Mylast);
; 1561 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1562 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1563 :             _Mylast = _Newlast;
; 1564 :             return;

	jmp	SHORT $LN92@GetData
$LN91@GetData:

; 1565 :         }
; 1566 : 
; 1567 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN92@GetData

; 1568 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	rax, QWORD PTR Data$4[rbp-57]
	sub	rax, rcx

; 1569 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	r8, rax
	jbe	SHORT $LN93@GetData

; 1570 :                 _Resize_reallocate(_Newsize, _Val);

	mov	rdx, r8
	lea	rcx, QWORD PTR Data$4[rbp-73]
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Resize_reallocate<std::_Value_init_tag>

; 1571 :                 return;

	mov	r9, QWORD PTR Data$4[rbp-65]
	jmp	SHORT $LN267@GetData
$LN93@GetData:

; 1580 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

	sub	r8, rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2035 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	rbx, QWORD PTR [r9+r8]

; 2020 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	xor	edx, edx
	mov	rcx, r9
	call	memset
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1580 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

	mov	r9, rbx
	mov	QWORD PTR Data$4[rbp-65], rbx
$LN267@GetData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 1422 :         return _Last - _First; // assume the iterator will do debug checking

	mov	rcx, QWORD PTR Data$4[rbp-73]
$LN92@GetData:
	sub	r9, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1243 :             _Insert_counted_range(_Where, _UFirst, _Count);

	mov	r8, rcx
	mov	rdx, QWORD PTR Bytes$6[rbp-65]
	lea	rcx, QWORD PTR Bytes$6[rbp-73]
	call	??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Insert_counted_range<unsigned char *>
	npad	1

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR Data$4[rbp-73]
	test	rcx, rcx
	je	SHORT $LN152@GetData

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rdx, QWORD PTR Data$4[rbp-57]
	sub	rdx, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, rcx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN164@GetData

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rcx-8]
	sub	rax, rcx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	ja	SHORT $LN161@GetData
$LN164@GetData:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
$LN152@GetData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rdx, QWORD PTR Bytes$6[rbp-65]
	mov	rcx, rdx
	mov	r9, QWORD PTR Bytes$6[rbp-73]
	sub	rcx, r9
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp

; 63   : 		while (Bytes.size() < Header.mMessageSize)

	mov	r8d, DWORD PTR Header$[rbp-69]
	cmp	rcx, r8
	jb	$LL2@GetData
$LN264@GetData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rax, QWORD PTR Bytes$6[rbp-57]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 401  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

	mov	QWORD PTR [rsi], r9
	mov	QWORD PTR [rsi+8], rdx
	mov	QWORD PTR [rsi+16], rax
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp

; 70   : 		return Bytes;

	jmp	$LN268@GetData
$LN161@GetData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN254@GetData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2007 :             _Xlength();

	call	?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
	int	3
$LN255@GetData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 141  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
	int	3
$LN266@GetData:
?GetData@PhiveSocketConnector@@YA?AV?$vector@EV?$allocator@E@std@@@std@@XZ ENDP ; PhiveSocketConnector::GetData
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 40
Data$4 = 56
$T5 = 56
__$ReturnUdt$GSCopy$ = 88
Header$ = 88
Bytes$6 = 96
$T7 = 96
__$ArrayPad$ = 128
__$ReturnUdt$ = 176
?dtor$0@?0??GetData@PhiveSocketConnector@@YA?AV?$vector@EV?$allocator@E@std@@@std@@XZ@4HA PROC ; `PhiveSocketConnector::GetData'::`1'::dtor$0
	mov	rcx, QWORD PTR $T3[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??GetData@PhiveSocketConnector@@YA?AV?$vector@EV?$allocator@E@std@@@std@@XZ@4HA ENDP ; `PhiveSocketConnector::GetData'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 40
Data$4 = 56
$T5 = 56
__$ReturnUdt$GSCopy$ = 88
Header$ = 88
Bytes$6 = 96
$T7 = 96
__$ArrayPad$ = 128
__$ReturnUdt$ = 176
?dtor$3@?0??GetData@PhiveSocketConnector@@YA?AV?$vector@EV?$allocator@E@std@@@std@@XZ@4HA PROC ; `PhiveSocketConnector::GetData'::`1'::dtor$3
	lea	rcx, QWORD PTR Bytes$6[rdx]
	jmp	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
?dtor$3@?0??GetData@PhiveSocketConnector@@YA?AV?$vector@EV?$allocator@E@std@@@std@@XZ@4HA ENDP ; `PhiveSocketConnector::GetData'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 40
Data$4 = 56
$T5 = 56
__$ReturnUdt$GSCopy$ = 88
Header$ = 88
Bytes$6 = 96
$T7 = 96
__$ArrayPad$ = 128
__$ReturnUdt$ = 176
?dtor$4@?0??GetData@PhiveSocketConnector@@YA?AV?$vector@EV?$allocator@E@std@@@std@@XZ@4HA PROC ; `PhiveSocketConnector::GetData'::`1'::dtor$4
	lea	rcx, QWORD PTR Data$4[rdx]
	jmp	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
?dtor$4@?0??GetData@PhiveSocketConnector@@YA?AV?$vector@EV?$allocator@E@std@@@std@@XZ@4HA ENDP ; `PhiveSocketConnector::GetData'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp
;	COMDAT ?SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z
_TEXT	SEGMENT
$T2 = 48
$T3 = 48
$T4 = 80
$T5 = 88
$T6 = 88
$T7 = 120
$T8 = 128
$T9 = 160
Data$GSCopy$ = 192
Writer$ = 200
FormattedData$ = 232
__$ArrayPad$ = 256
Op$dead$ = 304
Data$ = 312
?SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z PROC ; PhiveSocketConnector::SendData, COMDAT

; 77   : {

$LN518:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	rbp
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-16]
	sub	rsp, 272				; 00000110H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-256], rax
	mov	r14, rdx
	mov	QWORD PTR Data$GSCopy$[rbp-256], rdx
	xor	r15d, r15d
	xorps	xmm0, xmm0
	movups	XMMWORD PTR Writer$[rbp-240], xmm0
	xorps	xmm1, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	movdqu	XMMWORD PTR Writer$[rbp-256], xmm1
	mov	QWORD PTR Writer$[rbp-240], r15
	mov	DWORD PTR Writer$[rbp-232], r15d
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp

; 85   : 		this->m_Data.resize(this->m_Data.size() + Size);

	lea	edx, QWORD PTR [r15+4]
	lea	rcx, QWORD PTR Writer$[rbp-256]
	call	?resize@?$vector@EV?$allocator@E@std@@@std@@QEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize

; 86   : 	}
; 87   : 
; 88   : 	char* Bytes = new char[sizeof(int64_t)];

	lea	ecx, QWORD PTR [r15+8]
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	r9, rax

; 89   : 
; 90   : 	std::memcpy(Bytes, &Data, sizeof(Bytes));

	mov	QWORD PTR [rax], 3

; 91   : 
; 92   : 	for (int i = 0; i < Size; i++) {
; 93   : 		this->m_Data[this->m_Offset + i] = Bytes[i];

	movsxd	rdx, DWORD PTR Writer$[rbp-232]
	mov	rcx, QWORD PTR Writer$[rbp-256]
	mov	BYTE PTR [rdx+rcx], 3
	mov	ecx, DWORD PTR Writer$[rbp-232]
	inc	ecx
	movsxd	r8, ecx
	movzx	edx, BYTE PTR [rax+1]
	mov	rcx, QWORD PTR Writer$[rbp-256]
	mov	BYTE PTR [r8+rcx], dl
	mov	ecx, DWORD PTR Writer$[rbp-232]
	add	ecx, 2
	movsxd	rdx, ecx
	movzx	ecx, BYTE PTR [rax+2]
	mov	rax, QWORD PTR Writer$[rbp-256]
	mov	BYTE PTR [rdx+rax], cl
	movzx	edx, BYTE PTR [r9+3]
	mov	eax, DWORD PTR Writer$[rbp-232]
	add	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR Writer$[rbp-256]
	mov	BYTE PTR [rcx+rax], dl

; 94   : 	}
; 95   : 
; 96   : 	delete[] Bytes;

	mov	rcx, r9
	call	??_V@YAXPEAX@Z				; operator delete[]

; 97   : 
; 98   : 	this->m_Offset += Size;

	mov	eax, DWORD PTR Writer$[rbp-232]
	add	eax, 4
	mov	DWORD PTR Writer$[rbp-232], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rbx, QWORD PTR [r14+8]
	sub	rbx, QWORD PTR [r14]
	mov	rdx, QWORD PTR Writer$[rbp-248]
	sub	rdx, QWORD PTR Writer$[rbp-256]
	add	eax, 4
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp

; 83   : 	if (this->m_Offset + Size > this->m_Data.size())

	movsxd	rcx, eax
	cmp	rcx, rdx
	jbe	SHORT $LN50@SendData

; 85   : 		this->m_Data.resize(this->m_Data.size() + Size);

	add	rdx, 4
	lea	rcx, QWORD PTR Writer$[rbp-256]
	call	?resize@?$vector@EV?$allocator@E@std@@@std@@QEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize
$LN50@SendData:

; 86   : 	}
; 87   : 
; 88   : 	char* Bytes = new char[sizeof(int64_t)];

	mov	ecx, 8
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	r9, rax

; 89   : 
; 90   : 	std::memcpy(Bytes, &Data, sizeof(Bytes));

	mov	QWORD PTR [rax], rbx

; 91   : 
; 92   : 	for (int i = 0; i < Size; i++) {
; 93   : 		this->m_Data[this->m_Offset + i] = Bytes[i];

	movsxd	rdx, DWORD PTR Writer$[rbp-232]
	mov	rcx, QWORD PTR Writer$[rbp-256]
	mov	BYTE PTR [rdx+rcx], bl
	mov	ecx, DWORD PTR Writer$[rbp-232]
	inc	ecx
	movsxd	r8, ecx
	movzx	edx, BYTE PTR [rax+1]
	mov	rcx, QWORD PTR Writer$[rbp-256]
	mov	BYTE PTR [r8+rcx], dl
	mov	ecx, DWORD PTR Writer$[rbp-232]
	add	ecx, 2
	movsxd	rdx, ecx
	movzx	ecx, BYTE PTR [rax+2]
	mov	rax, QWORD PTR Writer$[rbp-256]
	mov	BYTE PTR [rdx+rax], cl
	movzx	edx, BYTE PTR [r9+3]
	mov	eax, DWORD PTR Writer$[rbp-232]
	add	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR Writer$[rbp-256]
	mov	BYTE PTR [rcx+rax], dl

; 94   : 	}
; 95   : 
; 96   : 	delete[] Bytes;

	mov	rcx, r9
	call	??_V@YAXPEAX@Z				; operator delete[]

; 97   : 
; 98   : 	this->m_Offset += Size;

	mov	r9d, DWORD PTR Writer$[rbp-232]
	add	r9d, 4
	mov	DWORD PTR Writer$[rbp-232], r9d
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rdi, QWORD PTR [r14]
	mov	rsi, QWORD PTR [r14+8]
	sub	rsi, rdi
	mov	rdx, QWORD PTR Writer$[rbp-248]
	sub	rdx, QWORD PTR Writer$[rbp-256]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp

; 70   : 	if (this->m_Offset + Size > this->m_Data.size())

	movsxd	rbx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	lea	eax, DWORD PTR [r9+rsi]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\BinaryVectorWriter.cpp

; 70   : 	if (this->m_Offset + Size > this->m_Data.size())

	movsxd	rcx, eax
	cmp	rcx, rdx
	jbe	SHORT $LN506@SendData

; 71   : 	{
; 72   : 		this->m_Data.resize(this->m_Data.size() + Size);

	add	rdx, rbx
	lea	rcx, QWORD PTR Writer$[rbp-256]
	call	?resize@?$vector@EV?$allocator@E@std@@@std@@QEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize
	mov	r9d, DWORD PTR Writer$[rbp-232]
$LN506@SendData:

; 73   : 	}
; 74   : 	for (int i = 0; i < Size; i++)

	mov	r10d, r15d
	mov	r8, r15
	test	esi, esi
	jle	SHORT $LN64@SendData
	npad	9
$LL65@SendData:

; 75   : 	{
; 76   : 		this->m_Data[this->m_Offset + i] = Bytes[i];

	movzx	edx, BYTE PTR [r8+rdi]
	lea	eax, DWORD PTR [r9+r10]
	movsxd	rcx, eax
	mov	rax, QWORD PTR Writer$[rbp-256]
	mov	BYTE PTR [rcx+rax], dl

; 73   : 	}
; 74   : 	for (int i = 0; i < Size; i++)

	lea	r10d, DWORD PTR [r10+1]
	inc	r8
	mov	r9d, DWORD PTR Writer$[rbp-232]
	cmp	r8, rbx
	jl	SHORT $LL65@SendData
$LN64@SendData:

; 77   : 	}
; 78   : 	this->m_Offset += Size;

	add	r9d, esi
	mov	DWORD PTR Writer$[rbp-232], r9d
	xorps	xmm1, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	movdqu	XMMWORD PTR FormattedData$[rbp-256], xmm1
	mov	QWORD PTR FormattedData$[rbp-240], r15

; 685  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

	mov	rbx, QWORD PTR Writer$[rbp-248]
	sub	rbx, QWORD PTR Writer$[rbp-256]

; 2065 :         if (_Count != 0) {

	je	$LN508@SendData

; 2006 :         if (_Newcapacity > max_size()) {

	mov	rax, 9223372036854775807		; 7fffffffffffffffH
	cmp	rbx, rax
	ja	$LN515@SendData
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rbx, 4096				; 00001000H
	jb	SHORT $LN95@SendData

; 139  :     const size_t _Block_size = _Non_user_size + _Bytes;

	lea	rcx, QWORD PTR [rbx+39]

; 140  :     if (_Block_size <= _Bytes) {

	cmp	rcx, rbx
	jbe	$LN516@SendData

; 87   :         return ::operator new(_Bytes);

	call	??2@YAPEAX_K@Z				; operator new

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	test	rax, rax
	je	$LN406@SendData

; 146  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	lea	rsi, QWORD PTR [rax+39]
	and	rsi, -32				; ffffffffffffffe0H

; 147  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	QWORD PTR [rsi-8], rax

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	jmp	SHORT $LN93@SendData
$LN95@SendData:

; 87   :         return ::operator new(_Bytes);

	mov	rcx, rbx
	call	??2@YAPEAX_K@Z				; operator new
	mov	rsi, rax
$LN93@SendData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1990 :         _Myfirst           = _Newvec;

	mov	QWORD PTR FormattedData$[rbp-256], rsi

; 1991 :         _Mylast            = _Newvec;

	mov	QWORD PTR FormattedData$[rbp-248], rsi

; 1992 :         _Myend             = _Newvec + _Newcapacity;

	lea	rcx, QWORD PTR [rsi+rbx]
	mov	QWORD PTR FormattedData$[rbp-240], rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1825 :     auto _UFirst = _RANGES _Unwrap_iter<_Se>(_STD move(_First));

	mov	rdi, QWORD PTR Writer$[rbp-256]

; 1826 :     auto _ULast  = _RANGES _Unwrap_sent<_InIt>(_STD move(_Last));

	mov	rbx, QWORD PTR Writer$[rbp-248]
	mov	r8, rbx
	sub	r8, rdi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rdx, rdi
	mov	rcx, rsi
	call	memmove
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1844 :                 _Dest += _ULast - _UFirst;

	sub	rbx, rdi
	lea	rcx, QWORD PTR [rbx+rsi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2074 :                 _My_data._Mylast = _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

	mov	QWORD PTR FormattedData$[rbp-248], rcx

; 2052 :         }
; 2053 :     }
; 2054 : 
; 2055 :     template <class... _Valty>
; 2056 :     _CONSTEXPR20 void _Construct_n(_CRT_GUARDOVERFLOW const size_type _Count, _Valty&&... _Val) {
; 2057 :         // Dispatches between the three sized constructions.
; 2058 :         // 1-arg -> value-construction, e.g. vector(5)
; 2059 :         // 2-arg -> fill, e.g. vector(5, "meow")
; 2060 :         // 3-arg -> sized range construction, e.g. vector{"Hello", "Fluffy", "World"}
; 2061 :         auto& _Al       = _Getal();
; 2062 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2063 :         auto& _My_data  = _Mypair._Myval2;
; 2064 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2065 :         if (_Count != 0) {

	jmp	SHORT $LN135@SendData
$LN508@SendData:
	mov	rcx, QWORD PTR FormattedData$[rbp-248]
$LN135@SendData:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp

; 84   : 	uint32_t SentSize = 0;

	mov	ebx, r15d
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rdx, QWORD PTR FormattedData$[rbp-256]
	cmp	rcx, rdx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp

; 86   : 	while (SentSize < FormattedData.size())

	je	SHORT $LN3@SendData
	mov	r8, r15
	npad	3
$LL2@SendData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	sub	rcx, rdx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp

; 88   : 		int Size = send(ClientSocket, reinterpret_cast<const char*>(FormattedData.data() + SentSize), FormattedData.size() - SentSize, 0);

	sub	ecx, ebx
	add	rdx, r8
	xor	r9d, r9d
	mov	r8d, ecx
	mov	rcx, QWORD PTR ?ClientSocket@PhiveSocketConnector@@3_KA ; PhiveSocketConnector::ClientSocket
	call	QWORD PTR __imp_send

; 89   : 		if (Size < 0)

	test	eax, eax
	js	$LN454@SendData

; 93   : 		}
; 94   : 		SentSize += Size;

	add	ebx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rcx, QWORD PTR FormattedData$[rbp-248]
	mov	rax, rcx
	mov	rdx, QWORD PTR FormattedData$[rbp-256]
	sub	rax, rdx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp

; 86   : 	while (SentSize < FormattedData.size())

	mov	r8d, ebx
	cmp	r8, rax
	jb	SHORT $LL2@SendData
$LN3@SendData:

; 97   : 	Logger::Info("PhiveSocketConnector", "Sent " + std::to_string(SentSize) + " bytes");

	lea	rax, QWORD PTR $T5[rsp]
	mov	QWORD PTR $T7[rsp], rax
	mov	edx, ebx
	lea	rcx, QWORD PTR $T9[rbp-256]
	call	?to_string@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z ; std::to_string
	npad	1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3537 :         return insert(_Off, _Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	r9d, 5
	lea	r8, OFFSET FLAT:??_C@_05IIHALICG@Sent?5@
	mov	rcx, rax
	call	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KQEBD0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
	xorps	xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T2[rsp], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T2[rsp+16], r15

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T2[rsp+24], r15

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR $T2[rsp], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR $T2[rsp+16], xmm1

; 4821 :         _My_data._Mysize = 0;

	mov	QWORD PTR [rax+16], r15

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

	mov	QWORD PTR [rax+24], 15

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR [rax], 0

; 3270 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

	mov	rcx, QWORD PTR $T2[rsp+16]
	mov	rdx, QWORD PTR $T2[rsp+24]
	mov	rax, rdx
	sub	rax, rcx

; 3271 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

	cmp	rax, 6
	jb	$LN266@SendData

; 3272 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 3273 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

	lea	rax, QWORD PTR [rcx+6]
	mov	QWORD PTR $T2[rsp+16], rax

; 2226 :         value_type* _Result = _Bx._Buf;

	lea	rbx, QWORD PTR $T2[rsp]

; 2227 :         if (_Large_string_engaged()) {

	cmp	rdx, 16
	cmovae	rbx, QWORD PTR $T2[rsp]

; 3275 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

	add	rbx, rcx

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

	mov	r8d, 6
	lea	rdx, OFFSET FLAT:??_C@_06LCIDCBMH@?5bytes@
	mov	rcx, rbx
	call	memmove

; 3276 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

	mov	BYTE PTR [rbx+6], 0

; 3277 :             return *this;

	lea	rax, QWORD PTR $T2[rsp]
	jmp	$LN265@SendData
$LN454@SendData:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp

; 91   : 			Logger::Error("PhiveSocketConnector", "Error while sending data");

	lea	rax, QWORD PTR $T6[rsp]
	mov	QWORD PTR $T4[rsp], rax
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T6[rsp], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T6[rsp+16], r15

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T6[rsp+24], r15

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	r8d, 24
	lea	rdx, OFFSET FLAT:??_C@_0BJ@NMILMLK@Error?5while?5sending?5data@
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	npad	1
	xorps	xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T3[rsp], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T3[rsp+16], r15

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T3[rsp+24], r15

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	r8d, 20
	lea	rdx, OFFSET FLAT:??_C@_0BF@ICNBJMNH@PhiveSocketConnector@
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	npad	1
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp

; 91   : 			Logger::Error("PhiveSocketConnector", "Error while sending data");

	lea	rdx, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	?Error@Logger@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; Logger::Error
	npad	1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR FormattedData$[rbp-256]
	test	rcx, rcx
	je	SHORT $LN166@SendData

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rdx, QWORD PTR FormattedData$[rbp-240]
	sub	rdx, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, rcx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN184@SendData

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rcx-8]
	sub	rax, rcx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	ja	$LN406@SendData
$LN184@SendData:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

	movdqu	XMMWORD PTR FormattedData$[rbp-256], xmm0

; 2050 :             _Mylast  = nullptr;
; 2051 :             _Myend   = nullptr;

	mov	QWORD PTR FormattedData$[rbp-240], r15
$LN166@SendData:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR Writer$[rbp-256]
	test	rcx, rcx
	je	SHORT $LN195@SendData

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rdx, QWORD PTR Writer$[rbp-240]
	sub	rdx, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, rcx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN213@SendData

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rcx-8]
	sub	rax, rcx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	ja	$LN435@SendData
$LN213@SendData:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

	movdqu	XMMWORD PTR Writer$[rbp-256], xmm0

; 2050 :             _Mylast  = nullptr;
; 2051 :             _Myend   = nullptr;

	mov	QWORD PTR Writer$[rbp-240], r15
$LN195@SendData:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp

; 92   : 			return false;

	mov	rcx, r14
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	xor	al, al
	jmp	$LN1@SendData
$LN266@SendData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3280 :         return _Reallocate_grow_by(

	mov	QWORD PTR [rsp+32], 6
	lea	r9, OFFSET FLAT:??_C@_06LCIDCBMH@?5bytes@
	mov	edx, 6
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$_Reallocate_grow_by@V<lambda_1>@?1??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append'::`2'::<lambda_1>,char const *,unsigned __int64>
$LN265@SendData:
	xorps	xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T5[rsp], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T5[rsp+16], r15

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T5[rsp+24], r15

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR $T5[rsp], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR $T5[rsp+16], xmm1

; 4821 :         _My_data._Mysize = 0;

	mov	QWORD PTR [rax+16], r15

; 4822 :         _My_data._Myres  = _BUF_SIZE - 1;

	mov	QWORD PTR [rax+24], 15

; 4823 :         _My_data._Activate_SSO_buffer();
; 4824 : 
; 4825 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4826 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR [rax], 0
	xorps	xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T8[rbp-256], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T8[rbp-240], r15

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T8[rbp-232], r15

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	r8d, 20
	lea	rdx, OFFSET FLAT:??_C@_0BF@ICNBJMNH@PhiveSocketConnector@
	lea	rcx, QWORD PTR $T8[rbp-256]
	call	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	npad	1
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp

; 97   : 	Logger::Info("PhiveSocketConnector", "Sent " + std::to_string(SentSize) + " bytes");

	lea	rdx, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T8[rbp-256]
	call	?Info@Logger@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; Logger::Info
	npad	1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

	mov	rdx, QWORD PTR $T2[rsp+24]
	cmp	rdx, 16
	jb	SHORT $LN342@SendData

; 4833 :             _ASAN_STRING_REMOVE(*this);
; 4834 :             const pointer _Ptr = _My_data._Bx._Ptr;
; 4835 :             auto& _Al          = _Getal();
; 4836 :             _Destroy_in_place(_My_data._Bx._Ptr);
; 4837 :             _My_data._Activate_SSO_buffer();
; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rcx, QWORD PTR $T2[rsp]
	mov	rax, rcx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN354@SendData

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rcx-8]
	sub	rax, rcx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	jbe	SHORT $LN354@SendData
	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN354@SendData:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
$LN342@SendData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

	mov	QWORD PTR $T2[rsp+16], r15

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

	mov	QWORD PTR $T2[rsp+24], 15

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T2[rsp], 0

; 4832 :         if (_My_data._Large_string_engaged()) {

	mov	rdx, QWORD PTR $T9[rbp-232]
	cmp	rdx, 16
	jb	SHORT $LN371@SendData

; 4833 :             _ASAN_STRING_REMOVE(*this);
; 4834 :             const pointer _Ptr = _My_data._Bx._Ptr;
; 4835 :             auto& _Al          = _Getal();
; 4836 :             _Destroy_in_place(_My_data._Bx._Ptr);
; 4837 :             _My_data._Activate_SSO_buffer();
; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rcx, QWORD PTR $T9[rbp-256]
	mov	rax, rcx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN383@SendData

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rcx-8]
	sub	rax, rcx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	jbe	SHORT $LN383@SendData
	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN383@SendData:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1
$LN371@SendData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR FormattedData$[rbp-256]
	test	rcx, rcx
	je	SHORT $LN391@SendData

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rdx, QWORD PTR FormattedData$[rbp-240]
	sub	rdx, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, rcx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN409@SendData

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rcx-8]
	sub	rax, rcx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	jbe	SHORT $LN409@SendData
$LN406@SendData:
	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN409@SendData:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

	movdqu	XMMWORD PTR FormattedData$[rbp-256], xmm0

; 2050 :             _Mylast  = nullptr;
; 2051 :             _Myend   = nullptr;

	mov	QWORD PTR FormattedData$[rbp-240], r15
$LN391@SendData:

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR Writer$[rbp-256]
	test	rcx, rcx
	je	SHORT $LN420@SendData

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rdx, QWORD PTR Writer$[rbp-240]
	sub	rdx, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, rcx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN438@SendData

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rcx-8]
	sub	rax, rcx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	jbe	SHORT $LN438@SendData
$LN435@SendData:
	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN438@SendData:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

	movdqu	XMMWORD PTR Writer$[rbp-256], xmm0

; 2050 :             _Mylast  = nullptr;
; 2051 :             _Myend   = nullptr;

	mov	QWORD PTR Writer$[rbp-240], r15
$LN420@SendData:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\PhiveSocketConnector.cpp

; 99   : 	return true;

	mov	rcx, r14
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	mov	al, 1
$LN1@SendData:

; 100  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-256]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+272]
	mov	rbx, QWORD PTR [r11+32]
	mov	rsi, QWORD PTR [r11+48]
	mov	rdi, QWORD PTR [r11+56]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	rbp
	ret	0
$LN516@SendData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 141  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
	npad	1
$LN515@SendData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2007 :             _Xlength();

	call	?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
	int	3
$LN513@SendData:
?SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z ENDP ; PhiveSocketConnector::SendData
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T2 = 48
$T3 = 48
$T4 = 80
$T5 = 88
$T6 = 88
$T7 = 120
$T8 = 128
$T9 = 160
Data$GSCopy$ = 192
Writer$ = 200
FormattedData$ = 232
__$ArrayPad$ = 256
Op$dead$ = 304
Data$ = 312
?dtor$0@?0??SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z@4HA PROC ; `PhiveSocketConnector::SendData'::`1'::dtor$0
	mov	rcx, QWORD PTR Data$GSCopy$[rdx]
	jmp	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
?dtor$0@?0??SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z@4HA ENDP ; `PhiveSocketConnector::SendData'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T2 = 48
$T3 = 48
$T4 = 80
$T5 = 88
$T6 = 88
$T7 = 120
$T8 = 128
$T9 = 160
Data$GSCopy$ = 192
Writer$ = 200
FormattedData$ = 232
__$ArrayPad$ = 256
Op$dead$ = 304
Data$ = 312
?dtor$1@?0??SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z@4HA PROC ; `PhiveSocketConnector::SendData'::`1'::dtor$1
	lea	rcx, QWORD PTR Writer$[rdx]
	jmp	??1BinaryVectorWriter@@QEAA@XZ
?dtor$1@?0??SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z@4HA ENDP ; `PhiveSocketConnector::SendData'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T2 = 48
$T3 = 48
$T4 = 80
$T5 = 88
$T6 = 88
$T7 = 120
$T8 = 128
$T9 = 160
Data$GSCopy$ = 192
Writer$ = 200
FormattedData$ = 232
__$ArrayPad$ = 256
Op$dead$ = 304
Data$ = 312
?dtor$2@?0??SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z@4HA PROC ; `PhiveSocketConnector::SendData'::`1'::dtor$2
	lea	rcx, QWORD PTR FormattedData$[rdx]
	jmp	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
?dtor$2@?0??SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z@4HA ENDP ; `PhiveSocketConnector::SendData'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T2 = 48
$T3 = 48
$T4 = 80
$T5 = 88
$T6 = 88
$T7 = 120
$T8 = 128
$T9 = 160
Data$GSCopy$ = 192
Writer$ = 200
FormattedData$ = 232
__$ArrayPad$ = 256
Op$dead$ = 304
Data$ = 312
?dtor$3@?0??SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z@4HA PROC ; `PhiveSocketConnector::SendData'::`1'::dtor$3
	mov	rcx, QWORD PTR $T4[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$3@?0??SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z@4HA ENDP ; `PhiveSocketConnector::SendData'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T2 = 48
$T3 = 48
$T4 = 80
$T5 = 88
$T6 = 88
$T7 = 120
$T8 = 128
$T9 = 160
Data$GSCopy$ = 192
Writer$ = 200
FormattedData$ = 232
__$ArrayPad$ = 256
Op$dead$ = 304
Data$ = 312
?dtor$5@?0??SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z@4HA PROC ; `PhiveSocketConnector::SendData'::`1'::dtor$5
	lea	rcx, QWORD PTR $T9[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$5@?0??SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z@4HA ENDP ; `PhiveSocketConnector::SendData'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T2 = 48
$T3 = 48
$T4 = 80
$T5 = 88
$T6 = 88
$T7 = 120
$T8 = 128
$T9 = 160
Data$GSCopy$ = 192
Writer$ = 200
FormattedData$ = 232
__$ArrayPad$ = 256
Op$dead$ = 304
Data$ = 312
?dtor$6@?0??SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z@4HA PROC ; `PhiveSocketConnector::SendData'::`1'::dtor$6
	lea	rcx, QWORD PTR $T2[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$6@?0??SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z@4HA ENDP ; `PhiveSocketConnector::SendData'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T2 = 48
$T3 = 48
$T4 = 80
$T5 = 88
$T6 = 88
$T7 = 120
$T8 = 128
$T9 = 160
Data$GSCopy$ = 192
Writer$ = 200
FormattedData$ = 232
__$ArrayPad$ = 256
Op$dead$ = 304
Data$ = 312
?dtor$7@?0??SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z@4HA PROC ; `PhiveSocketConnector::SendData'::`1'::dtor$7
	mov	rcx, QWORD PTR $T7[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$7@?0??SendData@PhiveSocketConnector@@YA_NW4OperationType@1@V?$vector@EV?$allocator@E@std@@@std@@@Z@4HA ENDP ; `PhiveSocketConnector::SendData'::`1'::dtor$7
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?end@?$vector@EV?$allocator@E@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?end@?$vector@EV?$allocator@E@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::end, COMDAT

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR [rdx], rax

; 1805 :         auto& _My_data = _Mypair._Myval2;
; 1806 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

	mov	rax, rdx

; 1807 :     }

	ret	0
?end@?$vector@EV?$allocator@E@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QEAA@PEAEPEBU_Container_base0@1@@Z
_TEXT	SEGMENT
this$ = 8
__param0$ = 16
__param1$dead$ = 24
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QEAA@PEAEPEBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >, COMDAT

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	QWORD PTR [rcx], rdx
	mov	rax, rcx
	ret	0
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QEAA@PEAEPEBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?begin@?$vector@EV?$allocator@E@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?begin@?$vector@EV?$allocator@E@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::begin, COMDAT

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 1795 :         auto& _My_data = _Mypair._Myval2;
; 1796 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

	mov	rax, rdx

; 1797 :     }

	ret	0
?begin@?$vector@EV?$allocator@E@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@$0A@@?$vector@EV?$allocator@E@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@V21@1@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
_Where$ = 64
_First$ = 72
_Last$ = 80
??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@$0A@@?$vector@EV?$allocator@E@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@V21@1@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::insert<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >,0>, COMDAT

; 1226 :     _CONSTEXPR20 iterator insert(const_iterator _Where, _Iter _First, _Iter _Last) {

$LN13:
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	r10, r9
	mov	r11, r8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 1422 :         return _Last - _First; // assume the iterator will do debug checking

	mov	r9, QWORD PTR _Last$[rsp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1239 :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Oldfirst);

	mov	rbx, r8
	sub	rbx, QWORD PTR [rcx]
	mov	rsi, rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 1422 :         return _Last - _First; // assume the iterator will do debug checking

	sub	r9, r10
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1243 :             _Insert_counted_range(_Where, _UFirst, _Count);

	mov	r8, r10
	mov	rdx, r11
	mov	rdi, rcx
	call	??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Insert_counted_range<unsigned char *>

; 2195 :         return iterator(_My_data._Myfirst + _Offset, _STD addressof(_My_data));

	mov	rdx, QWORD PTR [rdi]

; 1244 : #ifdef __cpp_lib_concepts
; 1245 :         } else if constexpr (forward_iterator<_Iter>) {
; 1246 :             const auto _Length = _To_unsigned_like(_RANGES distance(_UFirst, _ULast));
; 1247 :             const auto _Count  = _Convert_size<size_type>(_Length);
; 1248 :             _Insert_counted_range(_Where, _UFirst, _Count);
; 1249 : #endif // __cpp_lib_concepts
; 1250 :         } else {
; 1251 :             _Insert_uncounted_range(_Where, _UFirst, _ULast);
; 1252 :         }
; 1253 :         return _Make_iterator_offset(_Whereoff);

	mov	rax, rsi

; 2195 :         return iterator(_My_data._Myfirst + _Offset, _STD addressof(_My_data));

	add	rdx, rbx

; 1254 :     }

	mov	rbx, QWORD PTR [rsp+64]

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	QWORD PTR [rsi], rdx

; 1254 :     }

	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@$0A@@?$vector@EV?$allocator@E@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@V21@1@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::insert<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@@std@@YA?A_TAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@0@@Z
_TEXT	SEGMENT
_It$ = 8
??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@@std@@YA?A_TAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > > &>, COMDAT

; 1156 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1157 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1158 :         return _It + 0;
; 1159 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1160 :         return static_cast<_Iter&&>(_It)._Unwrapped();

	mov	rax, QWORD PTR [rcx]

; 1161 :     } else {
; 1162 :         return static_cast<_Iter&&>(_It);
; 1163 :     }
; 1164 : }

	ret	0
??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@@std@@YA?A_TAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > > &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@E@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@E@std@@@0@AEAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<unsigned char> > >, COMDAT

; 1607 :     return __builtin_addressof(_Val);

	mov	rax, rcx

; 1608 : }

	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@E@std@@@0@AEAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QEBAPEAEXZ
_TEXT	SEGMENT
this$ = 8
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QEBAPEAEXZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::_Unwrapped, COMDAT

; 342  :         return _Unfancy(this->_Ptr);

	mov	rax, QWORD PTR [rcx]

; 343  :     }

	ret	0
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QEBAPEAEXZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Make_iterator_offset@?$vector@EV?$allocator@E@std@@@std@@AEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@_K@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
_Offset$ = 24
?_Make_iterator_offset@?$vector@EV?$allocator@E@std@@@std@@AEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@_K@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Make_iterator_offset, COMDAT

; 2193 :         // return the iterator begin() + _Offset without a debugging check
; 2194 :         auto& _My_data = _Mypair._Myval2;
; 2195 :         return iterator(_My_data._Myfirst + _Offset, _STD addressof(_My_data));

	mov	rcx, QWORD PTR [rcx]
	mov	rax, rdx
	add	rcx, r8

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	QWORD PTR [rdx], rcx

; 2196 :     }

	ret	0
?_Make_iterator_offset@?$vector@EV?$allocator@E@std@@@std@@AEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@_K@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Make_iterator_offset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@0@0@Z
_TEXT	SEGMENT
_First$dead$ = 8
_Last$dead$ = 16
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > > >, COMDAT

; 1133 :     // check that [_First, _Last) forms an iterator range
; 1134 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1135 :         _Verify_range(_First, _Last);
; 1136 :     }
; 1137 : }

	ret	0
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$distance@PEAE@std@@YA_JPEAE0@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
??$distance@PEAE@std@@YA_JPEAE0@Z PROC			; std::distance<unsigned char *>, COMDAT

; 1421 :     if constexpr (_Is_ranges_random_iter_v<_InIt>) {
; 1422 :         return _Last - _First; // assume the iterator will do debug checking

	sub	rdx, rcx
	mov	rax, rdx

; 1423 :     } else {
; 1424 :         _Adl_verify_range(_First, _Last);
; 1425 :         auto _UFirst             = _Get_unwrapped(_First);
; 1426 :         const auto _ULast        = _Get_unwrapped(_Last);
; 1427 :         _Iter_diff_t<_InIt> _Off = 0;
; 1428 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1429 :             ++_Off;
; 1430 :         }
; 1431 : 
; 1432 :         return _Off;
; 1433 :     }
; 1434 : }

	ret	0
??$distance@PEAE@std@@YA_JPEAE0@Z ENDP			; std::distance<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z
_TEXT	SEGMENT
_First$GSCopy$1$ = 32
_Whereoff$1$ = 40
_Newsize$1$ = 48
this$ = 128
_Where$ = 136
_First$ = 144
_Count$ = 152
??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Insert_counted_range<unsigned char *>, COMDAT

; 1111 :     _CONSTEXPR20 void _Insert_counted_range(const_iterator _Where, _Iter _First, const size_type _Count) {

$LN236:

; 1122 : 
; 1123 :         if (_Count == 0) { // nothing to do, avoid invalidating iterators

	test	r9, r9
	je	$LN231@Insert_cou
	push	rbx
	push	rbp
	push	rsi
	push	r12
	push	r13
	push	r15
	sub	rsp, 72					; 00000048H

; 1112 :         // insert counted range _First + [0, _Count) at _Where
; 1113 :         const pointer _Whereptr = _Where._Ptr;
; 1114 : 
; 1115 :         auto& _Al        = _Getal();
; 1116 :         auto& _My_data   = _Mypair._Myval2;
; 1117 :         pointer& _Mylast = _My_data._Mylast;
; 1118 : 
; 1119 :         const pointer _Oldfirst     = _My_data._Myfirst;
; 1120 :         const pointer _Oldlast      = _Mylast;

	mov	rbp, QWORD PTR [rcx+8]
	mov	r12, rcx
	mov	r13, QWORD PTR [rcx]
	mov	rsi, r9

; 1121 :         const auto _Unused_capacity = static_cast<size_type>(_My_data._Myend - _Oldlast);

	mov	rcx, QWORD PTR [rcx+16]
	mov	r15, r8
	mov	rax, rcx
	mov	QWORD PTR [rsp+136], rdi
	sub	rax, rbp
	mov	QWORD PTR [rsp+64], r14
	mov	QWORD PTR _First$GSCopy$1$[rsp], r8
	mov	rbx, rdx

; 1124 :         } else if (_Count > _Unused_capacity) { // reallocate

	mov	r14, rbp
	cmp	r9, rax
	jbe	$LN4@Insert_cou

; 1125 :             const auto _Oldsize = static_cast<size_type>(_Oldlast - _Oldfirst);

	sub	r14, r13

; 1126 : 
; 1127 :             if (_Count > max_size() - _Oldsize) {

	mov	rdi, 9223372036854775807		; 7fffffffffffffffH
	mov	rax, rdi
	sub	rax, r14
	cmp	r9, rax
	ja	$LN234@Insert_cou

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	sub	rcx, r13

; 1129 :             }
; 1130 : 
; 1131 :             const size_type _Newsize     = _Oldsize + _Count;

	lea	r8, QWORD PTR [r9+r14]

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	rdx, rcx

; 1129 :             }
; 1130 : 
; 1131 :             const size_type _Newsize     = _Oldsize + _Count;

	mov	QWORD PTR _Newsize$1$[rsp], r8

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	shr	rdx, 1
	mov	rax, rdi
	sub	rax, rdx
	cmp	rcx, rax
	ja	SHORT $LN39@Insert_cou

; 1967 :             return _Max; // geometric growth would overflow
; 1968 :         }
; 1969 : 
; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	rdi, QWORD PTR [rdx+rcx]

; 1971 : 
; 1972 :         if (_Geometric < _Newsize) {

	cmp	rdi, r8
	cmovb	rdi, r8
$LN39@Insert_cou:

; 1134 :             const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	rdx, rdi
	call	?allocate@?$allocator@E@std@@QEAAPEAE_K@Z ; std::allocator<unsigned char>::allocate
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rdx, QWORD PTR _First$GSCopy$1$[rsp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1134 :             const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	r15, rax

; 1135 :             const auto _Whereoff            = static_cast<size_type>(_Whereptr - _Oldfirst);

	mov	rax, rbx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, rsi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1135 :             const auto _Whereoff            = static_cast<size_type>(_Whereptr - _Oldfirst);

	sub	rax, r13
	mov	QWORD PTR _Whereoff$1$[rsp], rax

; 1136 :             const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
; 1137 :             pointer _Constructed_first      = _Constructed_last;
; 1138 : 
; 1139 :             _TRY_BEGIN
; 1140 :             _Uninitialized_copy_n(_STD move(_First), _Count, _Newvec + _Whereoff, _Al);

	lea	rcx, QWORD PTR [rax+r15]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	call	memmove
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1143 :             if (_Count == 1 && _Whereptr == _Oldlast) { // one at back, provide strong guarantee

	cmp	rsi, 1
	jne	SHORT $LN8@Insert_cou
	cmp	rbx, rbp
	jne	SHORT $LN8@Insert_cou
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, r14
	mov	rdx, r13
	mov	rcx, r15
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1149 :             } else { // provide basic guarantee

	jmp	SHORT $LN232@Insert_cou
$LN8@Insert_cou:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r14, QWORD PTR _Whereoff$1$[rsp]
	mov	rdx, r13
	mov	r8, r14
	mov	rcx, r15
	call	memmove
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1152 :                 _Uninitialized_move(_Whereptr, _Oldlast, _Newvec + _Whereoff + _Count, _Al);

	lea	rcx, QWORD PTR [rsi+r14]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rdx, rbx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1152 :                 _Uninitialized_move(_Whereptr, _Oldlast, _Newvec + _Whereoff + _Count, _Al);

	add	rcx, r15
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	rbp, rbx

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, rbp
$LN232@Insert_cou:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1152 :                 _Uninitialized_move(_Whereptr, _Oldlast, _Newvec + _Whereoff + _Count, _Al);

	call	memmove

; 1153 :             }
; 1154 :             _CATCH_ALL
; 1155 :             _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 1156 :             _Al.deallocate(_Newvec, _Newcapacity);
; 1157 :             _RERAISE;
; 1158 :             _CATCH_END
; 1159 : 
; 1160 :             _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r8, QWORD PTR _Newsize$1$[rsp]
	mov	r9, rdi
	mov	rdx, r15
	mov	rcx, r12
	call	?_Change_array@?$vector@EV?$allocator@E@std@@@std@@AEAAXQEAE_K1@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Change_array

; 1161 :         } else { // Attempt to provide the strong guarantee for EmplaceConstructible failure.

	jmp	SHORT $LN229@Insert_cou
$LN4@Insert_cou:

; 1162 :                  // If we encounter copy/move construction/assignment failure, provide the basic guarantee.
; 1163 :                  // (For one-at-back, this provides the strong guarantee.)
; 1164 : 
; 1165 :             const auto _Affected_elements = static_cast<size_type>(_Oldlast - _Whereptr);

	sub	r14, rbx

; 1166 : 
; 1167 :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Oldlast - _Oldfirst) + _Count);
; 1168 :             if (_Count < _Affected_elements) { // some affected elements must be assigned

	cmp	rsi, r14
	jae	SHORT $LN10@Insert_cou

; 1169 :                 _Mylast = _Uninitialized_move(_Oldlast - _Count, _Oldlast, _Oldlast, _Al);

	mov	rdi, rbp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, rsi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1169 :                 _Mylast = _Uninitialized_move(_Oldlast - _Count, _Oldlast, _Oldlast, _Al);

	sub	rdi, rsi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rcx, rbp
	mov	rdx, rdi
	call	memmove
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1940 :             return _Dest + (_ULast - _UFirst);

	lea	rax, QWORD PTR [rsi+rbp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4841 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	rdi, rbx

; 4842 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	sub	rbp, rdi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1169 :                 _Mylast = _Uninitialized_move(_Oldlast - _Count, _Oldlast, _Oldlast, _Al);

	mov	QWORD PTR [r12+8], rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4842 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	mov	rcx, rbp
	mov	r8, rdi
	mov	rdx, rbx
	call	memmove

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, rsi
	mov	rdx, r15
	mov	rcx, rbx
	call	memmove
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1174 :                 _Uninitialized_copy_n(_STD move(_First), _Count, _Whereptr, _Al);

	jmp	SHORT $LN229@Insert_cou
$LN10@Insert_cou:

; 1175 :                 _CATCH_ALL
; 1176 :                 // glue the broken pieces back together
; 1177 : 
; 1178 :                 _TRY_BEGIN
; 1179 :                 _Uninitialized_move(_Whereptr + _Count, _Whereptr + 2 * _Count, _Whereptr, _Al);
; 1180 :                 _CATCH_ALL
; 1181 :                 // vaporize the detached piece
; 1182 :                 _Orphan_range(_Whereptr, _Oldlast);
; 1183 :                 _Destroy_range(_Whereptr + _Count, _Mylast, _Al);
; 1184 :                 _Mylast = _Whereptr;
; 1185 :                 _RERAISE;
; 1186 :                 _CATCH_END
; 1187 : 
; 1188 :                 _STD _Move_unchecked(_Whereptr + 2 * _Count, _Mylast, _Whereptr + _Count);
; 1189 :                 _Destroy_range(_Oldlast, _Mylast, _Al);
; 1190 :                 _Mylast = _Oldlast;
; 1191 :                 _RERAISE;
; 1192 :                 _CATCH_END
; 1193 :             } else { // affected elements don't overlap before/after
; 1194 :                 const pointer _Relocated = _Whereptr + _Count;

	lea	rdi, QWORD PTR [r9+rdx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, r14
	mov	rcx, rdi
	call	memmove
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1940 :             return _Dest + (_ULast - _UFirst);

	lea	rax, QWORD PTR [r14+rdi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, rsi
	mov	rdx, r15
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1195 :                 _Mylast                  = _Uninitialized_move(_Whereptr, _Oldlast, _Relocated, _Al);

	mov	QWORD PTR [r12+8], rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rcx, rbx
	call	memmove
$LN229@Insert_cou:
	mov	rdi, QWORD PTR [rsp+136]
	mov	r14, QWORD PTR [rsp+64]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1222 :     }

	add	rsp, 72					; 00000048H
	pop	r15
	pop	r13
	pop	r12
	pop	rsi
	pop	rbp
	pop	rbx
$LN231@Insert_cou:
	ret	0
$LN234@Insert_cou:

; 1128 :                 _Xlength();

	call	?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
	int	3
$LN230@Insert_cou:
??$_Insert_counted_range@PEAE@?$vector@EV?$allocator@E@std@@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PEAE_K@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Insert_counted_range<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Move_backward_unchecked@PEAEPEAE@std@@YAPEAEPEAE00@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
_Dest$ = 24
??$_Move_backward_unchecked@PEAEPEAE@std@@YAPEAEPEAE00@Z PROC ; std::_Move_backward_unchecked<unsigned char *,unsigned char *>, COMDAT

; 4841 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	rdx, rcx

; 4928 : _CONSTEXPR20 _BidIt2 _Move_backward_unchecked(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest) {

	mov	rax, r8

; 4842 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	sub	rax, rdx
	mov	r8, rdx
	mov	rdx, rcx
	mov	rcx, rax
	jmp	memmove
??$_Move_backward_unchecked@PEAEPEAE@std@@YAPEAEPEAE00@Z ENDP ; std::_Move_backward_unchecked<unsigned char *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Move_unchecked@PEAEPEAE@std@@YAPEAEPEAE00@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
??$_Move_unchecked@PEAEPEAE@std@@YAPEAEPEAE00@Z PROC	; std::_Move_unchecked<unsigned char *,unsigned char *>, COMDAT

; 4886 : _CONSTEXPR20 _OutIt _Move_unchecked(_InIt _First, _InIt _Last, _OutIt _Dest) {

$LN16:
	mov	QWORD PTR [rsp+32], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, r8

; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	rbx, rcx

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rdx, rcx
	mov	r8, rbx
	mov	rcx, rdi
	call	memmove

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	lea	rax, QWORD PTR [rdi+rbx]

; 4887 :     // move [_First, _Last) to [_Dest, ...)
; 4888 :     // note: _Move_unchecked has callers other than the move family
; 4889 :     if constexpr (_Iter_move_cat<_InIt, _OutIt>::_Bitcopy_assignable) {
; 4890 : #if _HAS_CXX20
; 4891 :         if (!_STD is_constant_evaluated())
; 4892 : #endif // _HAS_CXX20
; 4893 :         {
; 4894 :             return _Copy_memmove(_First, _Last, _Dest);
; 4895 :         }
; 4896 :     }
; 4897 : 
; 4898 :     for (; _First != _Last; ++_Dest, (void) ++_First) {
; 4899 :         *_Dest = _STD move(*_First);
; 4900 :     }
; 4901 : 
; 4902 :     return _Dest;
; 4903 : }

	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Move_unchecked@PEAEPEAE@std@@YAPEAEPEAE00@Z ENDP	; std::_Move_unchecked<unsigned char *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PEAEPEAE@std@@YAPEAEPEAE00@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
_Dest$ = 24
??$_Copy_backward_memmove@PEAEPEAE@std@@YAPEAEPEAE00@Z PROC ; std::_Copy_backward_memmove<unsigned char *,unsigned char *>, COMDAT

; 4834 :     // implement copy_backward-like function as memmove
; 4835 :     auto _FirstPtr              = _To_address(_First);
; 4836 :     auto _LastPtr               = _To_address(_Last);
; 4837 :     auto _DestPtr               = _To_address(_Dest);
; 4838 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4839 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4840 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4841 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	rdx, rcx
	mov	rax, r8

; 4842 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

	sub	rax, rdx
	mov	r8, rdx
	mov	rdx, rcx
	mov	rcx, rax
	jmp	memmove
??$_Copy_backward_memmove@PEAEPEAE@std@@YAPEAEPEAE00@Z ENDP ; std::_Copy_backward_memmove<unsigned char *,unsigned char *>
_TEXT	ENDS
END
