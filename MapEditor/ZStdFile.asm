; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0L@IKMLCMME@pack?4zsdic@			; `string'
PUBLIC	??_C@_0BB@JGCACFHG@bcett?4byml?4zsdic@		; `string'
PUBLIC	??_C@_08GIHPGKIP@zs?4zsdic@			; `string'
PUBLIC	??_C@_0BB@CJDMALJE@ZStdDecompressor@		; `string'
PUBLIC	?m_DecompressDictBcettByaml@@3PEAUZSTD_DDict_s@@EA ; m_DecompressDictBcettByaml
PUBLIC	?m_CompressDictBcettByaml@@3PEAUZSTD_CDict_s@@EA ; m_CompressDictBcettByaml
PUBLIC	?m_DecompressDictPack@@3PEAUZSTD_DDict_s@@EA	; m_DecompressDictPack
PUBLIC	?m_CompressDictBase@@3PEAUZSTD_CDict_s@@EA	; m_CompressDictBase
PUBLIC	?m_DecompressDictBase@@3PEAUZSTD_DDict_s@@EA	; m_DecompressDictBase
PUBLIC	?m_CompressDictPack@@3PEAUZSTD_CDict_s@@EA	; m_CompressDictPack
EXTRN	ZSTD_compress_usingCDict:PROC
EXTRN	ZSTD_getDictID_fromFrame:PROC
EXTRN	ZSTD_compressCCtx:PROC
EXTRN	ZSTD_getDictID_fromDDict:PROC
EXTRN	ZSTD_createCDict:PROC
EXTRN	ZSTD_CCtx_setParameter:PROC
EXTRN	ZSTD_compressBound:PROC
EXTRN	ZSTD_createDDict:PROC
EXTRN	ZSTD_decompress_usingDDict:PROC
EXTRN	ZSTD_freeCCtx:PROC
EXTRN	ZSTD_createCCtx:PROC
?m_DecompressDictBcettByaml@@3PEAUZSTD_DDict_s@@EA DQ 01H DUP (?) ; m_DecompressDictBcettByaml
?m_CompressDictBcettByaml@@3PEAUZSTD_CDict_s@@EA DQ 01H DUP (?) ; m_CompressDictBcettByaml
?m_DecompressDictPack@@3PEAUZSTD_DDict_s@@EA DQ 01H DUP (?) ; m_DecompressDictPack
?m_CompressDictBase@@3PEAUZSTD_CDict_s@@EA DQ 01H DUP (?) ; m_CompressDictBase
?m_DecompressDictBase@@3PEAUZSTD_DDict_s@@EA DQ 01H DUP (?) ; m_DecompressDictBase
?m_CompressDictPack@@3PEAUZSTD_CDict_s@@EA DQ 01H DUP (?) ; m_CompressDictPack
_BSS	ENDS
;	COMDAT ??_C@_0BB@CJDMALJE@ZStdDecompressor@
CONST	SEGMENT
??_C@_0BB@CJDMALJE@ZStdDecompressor@ DB 'ZStdDecompressor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GIHPGKIP@zs?4zsdic@
CONST	SEGMENT
??_C@_08GIHPGKIP@zs?4zsdic@ DB 'zs.zsdic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JGCACFHG@bcett?4byml?4zsdic@
CONST	SEGMENT
??_C@_0BB@JGCACFHG@bcett?4byml?4zsdic@ DB 'bcett.byml.zsdic', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IKMLCMME@pack?4zsdic@
CONST	SEGMENT
??_C@_0L@IKMLCMME@pack?4zsdic@ DB 'pack.zsdic', 00H	; `string'
PUBLIC	??0Result@ZStdFile@@QEAA@$$QEAU01@@Z		; ZStdFile::Result::Result
PUBLIC	??0Result@ZStdFile@@QEAA@XZ			; ZStdFile::Result::Result
PUBLIC	?Decompress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z ; ZStdFile::Decompress
PUBLIC	?GetDecompressedFileSize@ZStdFile@@YAHV?$vector@EV?$allocator@E@std@@@std@@@Z ; ZStdFile::GetDecompressedFileSize
PUBLIC	?GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ZStdFile::GetDecompressedFileSize
PUBLIC	?Initialize@ZStdFile@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ZStdFile::Initialize
PUBLIC	?WriteToFile@Result@ZStdFile@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; ZStdFile::Result::WriteToFile
PUBLIC	?Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z ; ZStdFile::Compress
PUBLIC	?Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z ; ZStdFile::Decompress
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Decompress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z DD imagerel $LN331
	DD	imagerel $LN331+792
	DD	imagerel $unwind$?Decompress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetDecompressedFileSize@ZStdFile@@YAHV?$vector@EV?$allocator@E@std@@@std@@@Z DD imagerel $LN9
	DD	imagerel $LN9+77
	DD	imagerel $unwind$?GetDecompressedFileSize@ZStdFile@@YAHV?$vector@EV?$allocator@E@std@@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD imagerel $LN367
	DD	imagerel $LN367+1381
	DD	imagerel $unwind$?GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Initialize@ZStdFile@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD imagerel $LN242
	DD	imagerel $LN242+880
	DD	imagerel $unwind$?Initialize@ZStdFile@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?WriteToFile@Result@ZStdFile@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD imagerel $LN66
	DD	imagerel $LN66+347
	DD	imagerel $unwind$?WriteToFile@Result@ZStdFile@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z DD imagerel $LN63
	DD	imagerel $LN63+407
	DD	imagerel $unwind$?Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z@4HA DD imagerel ?dtor$1@?0??Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z@4HA
	DD	imagerel ?dtor$1@?0??Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z@4HA+38
	DD	imagerel $unwind$?dtor$1@?0??Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z DD imagerel $LN263
	DD	imagerel $LN263+1113
	DD	imagerel $unwind$?Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z DB 014H
	DB	0dcH
	DB	02H
	DB	0deH
	DB	04H
	DB	0c9H, 02H
	DB	06H
	DB	'1', 04H
	DB	04H
	DB	'e', 03H
	DB	08H
	DB	'd'
	DB	04H
	DB	'F'
	DB	02H
	DB	0a4H
	DB	00H
	DB	'@'
	DB	04H
	DB	'$'
	DB	06H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z DB 08H
	DB	0cH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	0f0H
	DB	032H
	DD	imagerel ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
	DB	01H
	DB	02H
	DB	03aH
	DD	imagerel ??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ
	DB	041H
	DB	06H
	DB	074H
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	0d0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z DB 028H
	DD	imagerel $stateUnwindMap$?Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z
	DD	imagerel $ip2state$?Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z DD 0b3019H
	DD	045341fH
	DD	03a011fH
	DD	0e00ef010H
	DD	0c00ad00cH
	DD	060077008H
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z
	DD	01caH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z DB 04H
	DB	0c2H
	DB	04H
	DB	')', 03H
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$1@?0??Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z@4HA
	DB	02cH
	DD	imagerel ??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ
	DB	080H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z DB 028H
	DD	imagerel $stateUnwindMap$?Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z
	DD	imagerel $ip2state$?Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z DD 082119H
	DD	0115412H
	DD	0103412H
	DD	0e00e9212H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z
	DD	04aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?WriteToFile@Result@ZStdFile@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DB 08H
	DB	0bcH
	DB	02H
	DB	094H
	DB	04H
	DB	'v'
	DB	02H
	DB	0b4H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?WriteToFile@Result@ZStdFile@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DB 04H
	DB	0cH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	060H
	DB	032H
	DD	imagerel ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
	DB	080H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?WriteToFile@Result@ZStdFile@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DB 028H
	DD	imagerel $stateUnwindMap$?WriteToFile@Result@ZStdFile@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	imagerel $ip2state$?WriteToFile@Result@ZStdFile@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?WriteToFile@Result@ZStdFile@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 092919H
	DD	0316417H
	DD	0305417H
	DD	02e3417H
	DD	02c0117H
	DD	07010H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?WriteToFile@Result@ZStdFile@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	0152H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Initialize@ZStdFile@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DB 0aH
	DB	098H
	DB	02H
	DB	'0'
	DB	04H
	DB	'f'
	DB	08H
	DB	'e', 0aH
	DB	02H
	DB	'4'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Initialize@ZStdFile@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DB 08H
	DB	0cH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	081H
	DB	02H
	DB	03aH
	DD	imagerel ??1Result@ZStdFile@@QEAA@XZ
	DB	0d0H
	DB	032H
	DD	imagerel ??1SarcFile@@QEAA@XZ
	DB	0a1H
	DB	02H
	DB	0a2H
	DD	imagerel ??1SarcFile@@QEAA@XZ
	DB	0a1H
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?Initialize@ZStdFile@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DB 028H
	DD	imagerel $stateUnwindMap$?Initialize@ZStdFile@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	imagerel $ip2state$?Initialize@ZStdFile@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Initialize@ZStdFile@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0d3219H
	DD	0237424H
	DD	0226424H
	DD	0213424H
	DD	01a0124H
	DD	0e016f018H
	DD	0c012d014H
	DD	05010H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?Initialize@ZStdFile@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	0caH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DB 016H
	DB	0caH
	DB	02H
	DB	0deH
	DB	04H
	DB	0c9H, 02H
	DB	06H
	DB	0bdH, 04H
	DB	04H
	DB	0f1H, 03H
	DB	08H
	DB	'i', 02H
	DB	0aH
	DB	'd'
	DB	08H
	DB	' '
	DB	04H
	DB	'e', 02H
	DB	00H
	DB	'B'
	DB	04H
	DB	'$'
	DB	06H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DB 0aH
	DB	0cH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	0e0H
	DB	032H
	DD	imagerel ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
	DB	01H
	DB	02H
	DB	03aH
	DD	imagerel ??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ
	DB	041H
	DB	06H
	DB	072H
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	0c1H
	DB	06H
	DB	03cH
	DD	imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DB	0c0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DB 028H
	DD	imagerel $stateUnwindMap$?GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	imagerel $ip2state$?GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0b3219H
	DD	0446421H
	DD	0433421H
	DD	03c0121H
	DD	0e010f012H
	DD	0700cc00eH
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	01d2H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetDecompressedFileSize@ZStdFile@@YAHV?$vector@EV?$allocator@E@std@@@std@@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Decompress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z DB 08H
	DB	0bdH, 02H
	DB	04H
	DB	'1', 05H
	DB	02H
	DB	0dH, 03H
	DB	04H
	DB	't'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Decompress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z DB 04H
	DB	0cH
	DD	imagerel ??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ
	DB	0b0H
	DB	032H
	DD	imagerel ??1Result@ZStdFile@@QEAA@XZ
	DB	0c0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?Decompress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z DB 028H
	DD	imagerel $stateUnwindMap$?Decompress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z
	DD	imagerel $ip2state$?Decompress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Decompress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z DD 0a2819H
	DD	01a341aH
	DD	0f010f21aH
	DD	0d00ce00eH
	DD	07008c00aH
	DD	050066007H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?Decompress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z
	DD	07aH
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\fstream
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\iosfwd
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\iosfwd
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\iosfwd
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\fstream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\fstream
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\fstream
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
;	COMDAT ?Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z
_TEXT	SEGMENT
$T3 = 64
$T4 = 64
$T5 = 104
Path$GSCopy$ = 120
__$ReturnUdt$GSCopy$ = 120
File$ = 128
Bytes$6 = 400
$T7 = 424
FileSize$8 = 424
__$ArrayPad$ = 456
__$ReturnUdt$ = 528
Path$ = 536
Dictionary$ = 544
?Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z PROC ; ZStdFile::Decompress, COMDAT

; 147  : {

$LN263:
	mov	QWORD PTR [rsp+32], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-208]
	sub	rsp, 464				; 000001d0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-256], rax
	mov	r12d, r8d
	mov	rdi, rdx
	mov	r15, rcx
	mov	QWORD PTR __$ReturnUdt$GSCopy$[rsp], rcx
	mov	QWORD PTR Path$GSCopy$[rsp], rdx
	xor	r13d, r13d
	xor	edx, edx
	mov	r8d, 272				; 00000110H
	lea	rcx, QWORD PTR File$[rbp-256]
	call	memset
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

	mov	rdx, rdi

; 2236 :         if (_Large_string_engaged()) {

	cmp	QWORD PTR [rdi+24], 16
	jb	SHORT $LN253@Decompress

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

	mov	rdx, QWORD PTR [rdi]
$LN253@Decompress:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\fstream

; 43   :         : basic_ifstream(_Str.c_str(), _Mode, _Prot) {} // _Prot is an extension

	mov	r8d, 32					; 00000020H
	lea	rcx, QWORD PTR File$[rbp-256]
	call	??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
	mov	rax, QWORD PTR File$[rbp-256]
	movsxd	rcx, DWORD PTR [rax+4]
	lea	rbx, OFFSET FLAT:??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
	mov	QWORD PTR File$[rbp+rcx-256], rbx
	mov	rax, QWORD PTR File$[rbp-256]
	movsxd	rcx, DWORD PTR [rax+4]
	lea	edx, DWORD PTR [rcx-176]
	mov	DWORD PTR File$[rsp+rcx-4], edx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 150  : 	if (!File.eof() && !File.fail())

	mov	rax, QWORD PTR File$[rbp-256]
	movsxd	rcx, DWORD PTR [rax+4]
	lea	rax, QWORD PTR File$[rbp-256]
	add	rcx, rax
	call	QWORD PTR __imp_?eof@ios_base@std@@QEBA_NXZ
	test	al, al
	jne	$LN2@Decompress
	mov	rax, QWORD PTR File$[rbp-256]
	movsxd	rcx, DWORD PTR [rax+4]
	lea	rax, QWORD PTR File$[rbp-256]
	add	rcx, rax
	call	QWORD PTR __imp_?fail@ios_base@std@@QEBA_NXZ
	test	al, al
	jne	$LN2@Decompress

; 151  : 	{
; 152  : 		File.seekg(0, std::ios_base::end);

	xor	edx, edx
	lea	r8d, QWORD PTR [rdx+2]
	lea	rcx, QWORD PTR File$[rbp-256]
	call	QWORD PTR __imp_?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@_JH@Z

; 153  : 		std::streampos FileSize = File.tellg();

	lea	rdx, QWORD PTR FileSize$8[rbp-256]
	lea	rcx, QWORD PTR File$[rbp-256]
	call	QWORD PTR __imp_?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA?AV?$fpos@U_Mbstatet@@@2@XZ
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\iosfwd

; 68   :         return _Myoff + _Fpos;

	mov	rsi, QWORD PTR FileSize$8[rbp-248]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	movdqu	XMMWORD PTR Bytes$6[rbp-256], xmm0
	mov	QWORD PTR Bytes$6[rbp-240], r13

; 2065 :         if (_Count != 0) {

	mov	r14, 9223372036854775807		; 7fffffffffffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\iosfwd

; 68   :         return _Myoff + _Fpos;

	add	rsi, QWORD PTR FileSize$8[rbp-256]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2065 :         if (_Count != 0) {

	je	SHORT $LN136@Decompress

; 2006 :         if (_Newcapacity > max_size()) {

	cmp	rsi, r14
	ja	$LN257@Decompress
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rsi, 4096				; 00001000H
	jb	SHORT $LN92@Decompress

; 139  :     const size_t _Block_size = _Non_user_size + _Bytes;

	lea	rcx, QWORD PTR [rsi+39]

; 140  :     if (_Block_size <= _Bytes) {

	cmp	rcx, rsi
	jbe	$LN258@Decompress

; 87   :         return ::operator new(_Bytes);

	call	??2@YAPEAX_K@Z				; operator new
	mov	rcx, rax

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	test	rax, rax
	je	SHORT $LN101@Decompress

; 146  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	add	rax, 39					; 00000027H
	and	rax, -32				; ffffffffffffffe0H

; 147  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	QWORD PTR [rax-8], rcx

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	jmp	SHORT $LN90@Decompress
$LN101@Decompress:

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN92@Decompress:

; 87   :         return ::operator new(_Bytes);

	mov	rcx, rsi
	call	??2@YAPEAX_K@Z				; operator new
$LN90@Decompress:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1990 :         _Myfirst           = _Newvec;

	mov	QWORD PTR Bytes$6[rbp-256], rax

; 1992 :         _Myend             = _Newvec + _Newcapacity;

	lea	rbx, QWORD PTR [rax+rsi]
	mov	QWORD PTR Bytes$6[rbp-240], rbx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2020 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	r8, rsi
	xor	edx, edx
	mov	rcx, rax
	call	memset
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2069 :                 _My_data._Mylast = _Uninitialized_value_construct_n(_My_data._Myfirst, _Count, _Al);

	mov	QWORD PTR Bytes$6[rbp-248], rbx
$LN136@Decompress:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 157  : 		File.seekg(0, std::ios_base::beg);

	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR File$[rbp-256]
	call	QWORD PTR __imp_?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@_JH@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\iosfwd

; 68   :         return _Myoff + _Fpos;

	mov	r8, QWORD PTR FileSize$8[rbp-248]
	add	r8, QWORD PTR FileSize$8[rbp-256]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 158  : 		File.read(reinterpret_cast<char*>(Bytes.data()), FileSize);

	mov	rdx, QWORD PTR Bytes$6[rbp-256]
	lea	rcx, QWORD PTR File$[rbp-256]
	call	QWORD PTR __imp_?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@PEAD_J@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\fstream

; 193  :         if (!_Filebuffer.close()) {

	lea	rcx, QWORD PTR File$[rbp-240]
	call	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
	test	rax, rax
	jne	SHORT $LN142@Decompress

; 194  :             _Myios::setstate(ios_base::failbit);

	mov	rax, QWORD PTR File$[rbp-256]
	movsxd	rcx, DWORD PTR [rax+4]
	lea	rax, QWORD PTR File$[rbp-256]
	add	rcx, rax
	xor	r8d, r8d
	lea	edx, QWORD PTR [r8+2]
	call	QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
$LN142@Decompress:
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	movdqu	XMMWORD PTR $T4[rsp], xmm0
	mov	QWORD PTR $T4[rsp+16], r13

; 685  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

	mov	rbx, QWORD PTR Bytes$6[rbp-248]
	sub	rbx, QWORD PTR Bytes$6[rbp-256]

; 2065 :         if (_Count != 0) {

	je	$LN203@Decompress

; 2006 :         if (_Newcapacity > max_size()) {

	cmp	rbx, r14
	ja	$LN259@Decompress
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rbx, 4096				; 00001000H
	jb	SHORT $LN163@Decompress

; 139  :     const size_t _Block_size = _Non_user_size + _Bytes;

	lea	rcx, QWORD PTR [rbx+39]

; 140  :     if (_Block_size <= _Bytes) {

	cmp	rcx, rbx
	jbe	$LN260@Decompress

; 87   :         return ::operator new(_Bytes);

	call	??2@YAPEAX_K@Z				; operator new

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	test	rax, rax
	je	SHORT $LN172@Decompress

; 146  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	lea	rsi, QWORD PTR [rax+39]
	and	rsi, -32				; ffffffffffffffe0H

; 147  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	QWORD PTR [rsi-8], rax

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	jmp	SHORT $LN161@Decompress
$LN172@Decompress:

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN163@Decompress:

; 87   :         return ::operator new(_Bytes);

	mov	rcx, rbx
	call	??2@YAPEAX_K@Z				; operator new
	mov	rsi, rax
$LN161@Decompress:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1990 :         _Myfirst           = _Newvec;

	mov	QWORD PTR $T4[rsp], rsi

; 1991 :         _Mylast            = _Newvec;

	mov	QWORD PTR $T4[rsp+8], rsi

; 1992 :         _Myend             = _Newvec + _Newcapacity;

	lea	rcx, QWORD PTR [rsi+rbx]
	mov	QWORD PTR $T4[rsp+16], rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rbx, QWORD PTR Bytes$6[rbp-248]
	mov	rdx, QWORD PTR Bytes$6[rbp-256]
	sub	rbx, rdx

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, rbx
	mov	rcx, rsi
	call	memmove
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1844 :                 _Dest += _ULast - _UFirst;

	lea	rax, QWORD PTR [rsi+rbx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2074 :                 _My_data._Mylast = _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

	mov	QWORD PTR $T4[rsp+8], rax
$LN203@Decompress:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 162  : 		return ZStdFile::Decompress(Bytes, Dictionary);

	mov	r8d, r12d
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, r15
	call	?Decompress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z ; ZStdFile::Decompress
	npad	1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR Bytes$6[rbp-256]
	test	rcx, rcx
	je	SHORT $LN209@Decompress

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rdx, QWORD PTR Bytes$6[rbp-240]
	sub	rdx, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, rcx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN227@Decompress

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rcx-8]
	sub	rax, rcx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	jbe	SHORT $LN227@Decompress
	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN227@Decompress:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

	movdqu	XMMWORD PTR Bytes$6[rbp-256], xmm0

; 2050 :             _Mylast  = nullptr;
; 2051 :             _Myend   = nullptr;

	mov	QWORD PTR Bytes$6[rbp-240], r13
$LN209@Decompress:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\fstream

; 161  :     __CLR_OR_THIS_CALL ~basic_ifstream() noexcept override {}

	mov	rax, QWORD PTR File$[rbp-256]
	movsxd	rdx, DWORD PTR [rax+4]
	lea	rax, OFFSET FLAT:??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
	mov	QWORD PTR File$[rbp+rdx-256], rax
	mov	rdx, QWORD PTR File$[rbp-256]
	movsxd	r8, DWORD PTR [rdx+4]
	lea	r9d, DWORD PTR [r8-176]
	mov	DWORD PTR File$[rsp+r8-4], r9d
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 162  : 		return ZStdFile::Decompress(Bytes, Dictionary);

	jmp	$LN255@Decompress
$LN2@Decompress:

; 166  : 		Logger::Error("ZStdDecompressor", "Could not open file " + Path);

	lea	rax, QWORD PTR $T3[rsp]
	mov	QWORD PTR $T5[rsp], rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4915 :     const auto _Right_size = _Right.size();

	mov	rcx, QWORD PTR [rdi+16]

; 4916 :     if (_Right.max_size() - _Right_size < _Left_size) {

	mov	r14, 9223372036854775807		; 7fffffffffffffffH
	sub	r14, rcx
	cmp	r14, 20
	jb	$LN261@Decompress

; 2235 :         const value_type* _Result = _Bx._Buf;

	mov	rax, rdi

; 2236 :         if (_Large_string_engaged()) {

	cmp	QWORD PTR [rdi+24], 16
	jb	SHORT $LN35@Decompress

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

	mov	rax, QWORD PTR [rdi]
$LN35@Decompress:

; 4920 :     return {_String_constructor_concat_tag{}, _Right, _Left, _Left_size, _Right.c_str(), _Right_size};

	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], 20
	lea	r9, OFFSET FLAT:??_C@_0BF@BGOJHMKC@Could?5not?5open?5file?5@
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEBD_K23@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	xorps	xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T7[rbp-256], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T7[rbp-240], r13

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T7[rbp-232], r13

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	r8d, 16
	lea	rdx, OFFSET FLAT:??_C@_0BB@CJDMALJE@ZStdDecompressor@
	lea	rcx, QWORD PTR $T7[rbp-256]
	call	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	npad	1
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 166  : 		Logger::Error("ZStdDecompressor", "Could not open file " + Path);

	lea	rdx, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T7[rbp-256]
	call	?Error@Logger@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; Logger::Error
	xorps	xmm0, xmm0

; 167  : 		return ZStdFile::Result();

	movups	XMMWORD PTR [r15], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	QWORD PTR [r15], r13
	mov	QWORD PTR [r15+8], r13
	mov	QWORD PTR [r15+16], r13
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\fstream

; 161  :     __CLR_OR_THIS_CALL ~basic_ifstream() noexcept override {}

	mov	rax, QWORD PTR File$[rbp-256]
	movsxd	rcx, DWORD PTR [rax+4]
	mov	QWORD PTR File$[rbp+rcx-256], rbx
	mov	rax, QWORD PTR File$[rbp-256]
	movsxd	rcx, DWORD PTR [rax+4]
	lea	edx, DWORD PTR [rcx-176]
	mov	DWORD PTR File$[rsp+rcx-4], edx
$LN255@Decompress:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 169  : }

	lea	rcx, QWORD PTR File$[rbp-240]
	call	??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
	lea	rcx, QWORD PTR File$[rbp-232]
	call	QWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UEAA@XZ
	lea	rcx, QWORD PTR File$[rbp-80]
	call	QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
	npad	1
	mov	rcx, rdi
	call	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
	mov	rax, r15
	mov	rcx, QWORD PTR __$ArrayPad$[rbp-256]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rbx, QWORD PTR [rsp+552]
	add	rsp, 464				; 000001d0H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN261@Decompress:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4917 :         _Xlen_string();

	call	?_Xlen_string@std@@YAXXZ		; std::_Xlen_string
	npad	1
$LN257@Decompress:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2007 :             _Xlength();

	call	?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
	int	3
$LN258@Decompress:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 141  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
	npad	1
$LN259@Decompress:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2007 :             _Xlength();

	call	?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
	int	3
$LN260@Decompress:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 141  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
	int	3
$LN254@Decompress:
?Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z ENDP ; ZStdFile::Decompress
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 64
$T4 = 64
$T5 = 104
Path$GSCopy$ = 120
__$ReturnUdt$GSCopy$ = 120
File$ = 128
Bytes$6 = 400
$T7 = 424
FileSize$8 = 424
__$ArrayPad$ = 456
__$ReturnUdt$ = 528
Path$ = 536
Dictionary$ = 544
?dtor$0@?0??Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z@4HA PROC ; `ZStdFile::Decompress'::`1'::dtor$0
	mov	rcx, QWORD PTR Path$GSCopy$[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z@4HA ENDP ; `ZStdFile::Decompress'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 64
$T4 = 64
$T5 = 104
Path$GSCopy$ = 120
__$ReturnUdt$GSCopy$ = 120
File$ = 128
Bytes$6 = 400
$T7 = 424
FileSize$8 = 424
__$ArrayPad$ = 456
__$ReturnUdt$ = 528
Path$ = 536
Dictionary$ = 544
?dtor$1@?0??Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z@4HA PROC ; `ZStdFile::Decompress'::`1'::dtor$1
	lea	rcx, QWORD PTR File$[rdx]
	jmp	??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
?dtor$1@?0??Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z@4HA ENDP ; `ZStdFile::Decompress'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 64
$T4 = 64
$T5 = 104
Path$GSCopy$ = 120
__$ReturnUdt$GSCopy$ = 120
File$ = 128
Bytes$6 = 400
$T7 = 424
FileSize$8 = 424
__$ArrayPad$ = 456
__$ReturnUdt$ = 528
Path$ = 536
Dictionary$ = 544
?dtor$2@?0??Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z@4HA PROC ; `ZStdFile::Decompress'::`1'::dtor$2
	lea	rcx, QWORD PTR Bytes$6[rdx]
	jmp	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
?dtor$2@?0??Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z@4HA ENDP ; `ZStdFile::Decompress'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 64
$T4 = 64
$T5 = 104
Path$GSCopy$ = 120
__$ReturnUdt$GSCopy$ = 120
File$ = 128
Bytes$6 = 400
$T7 = 424
FileSize$8 = 424
__$ArrayPad$ = 456
__$ReturnUdt$ = 528
Path$ = 536
Dictionary$ = 544
?dtor$5@?0??Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z@4HA PROC ; `ZStdFile::Decompress'::`1'::dtor$5
	mov	rcx, QWORD PTR $T5[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$5@?0??Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z@4HA ENDP ; `ZStdFile::Decompress'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
;	COMDAT ?Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z
_TEXT	SEGMENT
$T1 = 48
__$ReturnUdt$GSCopy$ = 56
Bytes$GSCopy$ = 64
__$ArrayPad$ = 72
__$ReturnUdt$ = 112
Bytes$ = 120
Dictionary$ = 128
?Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z PROC ; ZStdFile::Compress, COMDAT

; 172  : {

$LN63:
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rbp
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 80					; 00000050H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	ebx, r8d
	mov	rdi, rdx
	mov	rsi, rcx
	mov	QWORD PTR __$ReturnUdt$GSCopy$[rsp], rcx
	mov	QWORD PTR Bytes$GSCopy$[rsp], rdx
	xor	r14d, r14d
	mov	DWORD PTR $T1[rsp], r14d
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	mov	QWORD PTR [rcx], r14
	mov	QWORD PTR [rcx+8], r14
	mov	QWORD PTR [rcx+16], r14
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 207  : 	return Result;

	mov	DWORD PTR $T1[rsp], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rcx, QWORD PTR [rdx+8]
	sub	rcx, QWORD PTR [rdx]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 174  : 	Result.Data.resize(ZSTD_compressBound(Bytes.size()));

	call	ZSTD_compressBound
	mov	rdx, rax
	mov	rcx, rsi
	call	?resize@?$vector@EV?$allocator@E@std@@@std@@QEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize

; 175  : 
; 176  : 	if (Dictionary == ZStdFile::Dictionary::None)

	cmp	ebx, -1
	jne	SHORT $LN4@Compress

; 177  : 	{
; 178  : 		ZSTD_CCtx* cctx = ZSTD_createCCtx();

	call	ZSTD_createCCtx
	mov	rbx, rax

; 179  : 		ZSTD_CCtx_setParameter(cctx, ZSTD_c_compressionLevel, 16); //16 = compression level

	lea	edx, QWORD PTR [r14+100]
	lea	r8d, QWORD PTR [r14+16]
	mov	rcx, rax
	call	ZSTD_CCtx_setParameter
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	r9, QWORD PTR [rdi]
	mov	rax, QWORD PTR [rdi+8]
	sub	rax, r9
	mov	rdx, QWORD PTR [rsi]
	mov	r8, QWORD PTR [rsi+8]
	sub	r8, rdx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 180  : 		const size_t CompSize = ZSTD_compressCCtx(cctx, (void*)Result.Data.data(), Result.Data.size(), Bytes.data(), Bytes.size(), 16);

	mov	DWORD PTR [rsp+40], 16
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbx
	call	ZSTD_compressCCtx

; 181  : 		Result.Data.resize(CompSize);
; 182  : 		ZSTD_freeCCtx(cctx);
; 183  : 	}

	jmp	SHORT $LN60@Compress
$LN4@Compress:

; 184  : 	else
; 185  : 	{
; 186  : 		ZSTD_CDict* CompressionDict = nullptr;

	mov	rbp, r14

; 187  : 		switch (Dictionary)

	test	ebx, ebx
	je	SHORT $LN6@Compress
	sub	ebx, 1
	je	SHORT $LN7@Compress
	cmp	ebx, 1
	jne	SHORT $LN2@Compress

; 195  : 		case ZStdFile::Dictionary::BcettByaml:
; 196  : 			CompressionDict = m_CompressDictBcettByaml;

	mov	rbp, QWORD PTR ?m_CompressDictBcettByaml@@3PEAUZSTD_CDict_s@@EA ; m_CompressDictBcettByaml
	jmp	SHORT $LN2@Compress
$LN7@Compress:

; 191  : 			break;
; 192  : 		case ZStdFile::Dictionary::Pack:
; 193  : 			CompressionDict = m_CompressDictPack;

	mov	rbp, QWORD PTR ?m_CompressDictPack@@3PEAUZSTD_CDict_s@@EA ; m_CompressDictPack

; 194  : 			break;

	jmp	SHORT $LN2@Compress
$LN6@Compress:

; 188  : 		{
; 189  : 		case ZStdFile::Dictionary::Base:
; 190  : 			CompressionDict = m_CompressDictBase;

	mov	rbp, QWORD PTR ?m_CompressDictBase@@3PEAUZSTD_CDict_s@@EA ; m_CompressDictBase
$LN2@Compress:

; 197  : 			break;
; 198  : 		}
; 199  : 
; 200  : 		ZSTD_CCtx* cctx = ZSTD_createCCtx();

	call	ZSTD_createCCtx
	mov	rbx, rax

; 201  : 		ZSTD_CCtx_setParameter(cctx, ZSTD_c_compressionLevel, 16); //16 = compression level

	mov	edx, 100				; 00000064H
	lea	r8d, QWORD PTR [rdx-84]
	mov	rcx, rax
	call	ZSTD_CCtx_setParameter
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	r9, QWORD PTR [rdi]
	mov	rax, QWORD PTR [rdi+8]
	sub	rax, r9
	mov	rdx, QWORD PTR [rsi]
	mov	r8, QWORD PTR [rsi+8]
	sub	r8, rdx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 202  : 		const size_t CompSize = ZSTD_compress_usingCDict(cctx, (void*)Result.Data.data(), Result.Data.size(), Bytes.data(), Bytes.size(), CompressionDict);

	mov	QWORD PTR [rsp+40], rbp
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbx
	call	ZSTD_compress_usingCDict
$LN60@Compress:

; 207  : 	return Result;

	mov	rdx, rax
	mov	rcx, rsi
	call	?resize@?$vector@EV?$allocator@E@std@@@std@@QEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize
	mov	rcx, rbx
	call	ZSTD_freeCCtx
	npad	1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR [rdi]
	test	rcx, rcx
	je	SHORT $LN35@Compress

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rdx, QWORD PTR [rdi+16]
	sub	rdx, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN53@Compress

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	r8, QWORD PTR [rcx-8]

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	sub	rcx, r8

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	lea	rax, QWORD PTR [rcx-8]
	cmp	rax, 31
	ja	SHORT $LN50@Compress

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rcx, r8
$LN53@Compress:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

	mov	QWORD PTR [rdi], r14

; 2050 :             _Mylast  = nullptr;

	mov	QWORD PTR [rdi+8], r14

; 2051 :             _Myend   = nullptr;

	mov	QWORD PTR [rdi+16], r14
$LN35@Compress:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 207  : 	return Result;

	mov	rax, rsi

; 208  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [r11+48]
	mov	rbp, QWORD PTR [r11+56]
	mov	rsp, r11
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
$LN50@Compress:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN59@Compress:
?Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z ENDP ; ZStdFile::Compress
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 48
__$ReturnUdt$GSCopy$ = 56
Bytes$GSCopy$ = 64
__$ArrayPad$ = 72
__$ReturnUdt$ = 112
Bytes$ = 120
Dictionary$ = 128
?dtor$0@?0??Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z@4HA PROC ; `ZStdFile::Compress'::`1'::dtor$0
	mov	rcx, QWORD PTR Bytes$GSCopy$[rdx]
	jmp	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
?dtor$0@?0??Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z@4HA ENDP ; `ZStdFile::Compress'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 48
__$ReturnUdt$GSCopy$ = 56
Bytes$GSCopy$ = 64
__$ArrayPad$ = 72
__$ReturnUdt$ = 112
Bytes$ = 120
Dictionary$ = 128
?dtor$1@?0??Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z@4HA PROC ; `ZStdFile::Compress'::`1'::dtor$1
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	eax, DWORD PTR $T1[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN12@dtor$1
	and	DWORD PTR $T1[rbp], -2
	mov	rcx, QWORD PTR __$ReturnUdt$GSCopy$[rbp]
	call	??1Result@ZStdFile@@QEAA@XZ
$LN12@dtor$1:
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
?dtor$1@?0??Compress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z@4HA ENDP ; `ZStdFile::Compress'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\fstream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\fstream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
;	COMDAT ?WriteToFile@Result@ZStdFile@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
Path$GSCopy$ = 48
File$ = 64
__$ArrayPad$ = 336
this$ = 368
Path$ = 376
?WriteToFile@Result@ZStdFile@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; ZStdFile::Result::WriteToFile, COMDAT

; 16   : {

$LN66:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 352				; 00000160H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rdi, rdx
	mov	rbx, rcx

; 15   : void ZStdFile::Result::WriteToFile(std::string Path)

	mov	QWORD PTR Path$GSCopy$[rsp], rdx
	xor	edx, edx
	mov	r8d, 264				; 00000108H
	lea	rcx, QWORD PTR File$[rsp]
	call	memset
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

	mov	rdx, rdi

; 2236 :         if (_Large_string_engaged()) {

	cmp	QWORD PTR [rdi+24], 16
	jb	SHORT $LN13@WriteToFil

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

	mov	rdx, QWORD PTR [rdi]
$LN13@WriteToFil:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\fstream

; 226  :         : basic_ofstream(_Str.c_str(), _Mode, _Prot) {} // _Prot is an extension

	mov	r8d, 32					; 00000020H
	lea	rcx, QWORD PTR File$[rsp]
	call	??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
	mov	rax, QWORD PTR File$[rsp]
	movsxd	rcx, DWORD PTR [rax+4]
	lea	rbp, OFFSET FLAT:??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
	mov	QWORD PTR File$[rsp+rcx], rbp
	mov	rax, QWORD PTR File$[rsp]
	movsxd	rcx, DWORD PTR [rax+4]
	lea	edx, DWORD PTR [rcx-168]
	mov	DWORD PTR File$[rsp+rcx-4], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4624 :     _Seek_wrapped(_Dest, _STD _Copy_unchecked(_UFirst, _ULast, _UDest));

	mov	rsi, QWORD PTR [rbx+8]
	mov	rbx, QWORD PTR [rbx]

; 4611 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

	cmp	rbx, rsi
	je	SHORT $LN39@WriteToFil
	npad	9
$LL40@WriteToFil:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\ostream

; 948  :     return _Ostr << static_cast<char>(_Ch);

	movzx	edx, BYTE PTR [rbx]
	lea	rcx, QWORD PTR File$[rsp]
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4611 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

	inc	rbx
	cmp	rbx, rsi
	jne	SHORT $LL40@WriteToFil
$LN39@WriteToFil:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\fstream

; 376  :         if (!_Filebuffer.close()) {

	lea	rcx, QWORD PTR File$[rsp+8]
	call	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
	test	rax, rax
	jne	SHORT $LN50@WriteToFil

; 377  :             _Myios::setstate(ios_base::failbit);

	mov	rax, QWORD PTR File$[rsp]
	movsxd	rcx, DWORD PTR [rax+4]
	lea	rax, QWORD PTR File$[rsp]
	add	rcx, rax
	xor	r8d, r8d
	lea	edx, QWORD PTR [r8+2]
	call	QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
	npad	1
$LN50@WriteToFil:

; 344  :     __CLR_OR_THIS_CALL ~basic_ofstream() noexcept override {}

	mov	rax, QWORD PTR File$[rsp]
	movsxd	rdx, DWORD PTR [rax+4]
	mov	QWORD PTR File$[rsp+rdx], rbp
	mov	rax, QWORD PTR File$[rsp]
	movsxd	rdx, DWORD PTR [rax+4]
	lea	r8d, DWORD PTR [rdx-168]
	mov	DWORD PTR File$[rsp+rdx-4], r8d
	lea	rcx, QWORD PTR File$[rsp+8]
	call	??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
	lea	rcx, QWORD PTR File$[rsp+16]
	call	QWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
	lea	rcx, QWORD PTR File$[rsp+168]
	call	QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
	npad	1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3119 :         _Tidy_deallocate();

	mov	rcx, rdi
	call	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 21   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+352]
	mov	rbx, QWORD PTR [r11+16]
	mov	rbp, QWORD PTR [r11+32]
	mov	rsi, QWORD PTR [r11+40]
	mov	rsp, r11
	pop	rdi
	ret	0
?WriteToFile@Result@ZStdFile@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; ZStdFile::Result::WriteToFile
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
Path$GSCopy$ = 48
File$ = 64
__$ArrayPad$ = 336
this$ = 368
Path$ = 376
?dtor$0@?0??WriteToFile@Result@ZStdFile@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `ZStdFile::Result::WriteToFile'::`1'::dtor$0
	mov	rcx, QWORD PTR Path$GSCopy$[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??WriteToFile@Result@ZStdFile@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `ZStdFile::Result::WriteToFile'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
Path$GSCopy$ = 48
File$ = 64
__$ArrayPad$ = 336
this$ = 368
Path$ = 376
?dtor$1@?0??WriteToFile@Result@ZStdFile@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `ZStdFile::Result::WriteToFile'::`1'::dtor$1
	lea	rcx, QWORD PTR File$[rdx]
	jmp	??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
?dtor$1@?0??WriteToFile@Result@ZStdFile@@QEAAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `ZStdFile::Result::WriteToFile'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\SARC.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\SARC.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\SARC.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\SARC.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\SARC.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\SARC.cpp
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
;	COMDAT ?Initialize@ZStdFile@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
Path$GSCopy$1$ = 72
$T4 = 80
$T5 = 104
$T6 = 128
Path$GSCopy$ = 160
DictSarc$ = 168
__$ArrayPad$ = 200
Path$ = 256
?Initialize@ZStdFile@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; ZStdFile::Initialize, COMDAT

; 24   : {

$LN242:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	rbp
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-55]
	sub	rsp, 208				; 000000d0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-153], rax
	mov	QWORD PTR Path$GSCopy$1$[rbp-153], rcx

; 23   : void ZStdFile::Initialize(std::string Path)

	mov	QWORD PTR Path$GSCopy$[rbp-153], rcx
	xorps	xmm0, xmm0
	movups	XMMWORD PTR DictSarc$[rbp-153], xmm0
	movups	XMMWORD PTR DictSarc$[rbp-137], xmm0

; 25   : 	SarcFile DictSarc(ZStdFile::Decompress(Path, ZStdFile::Dictionary::None).Data);

	mov	rdx, rcx
	lea	rcx, QWORD PTR $T6[rbp-153]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	r8d, -1
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rbp-153]
	call	?Decompress@ZStdFile@@YA?AUResult@1@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Dictionary@1@@Z ; ZStdFile::Decompress
	npad	1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	r8, QWORD PTR [rax+16]

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

	xor	r13d, r13d
	mov	QWORD PTR [rax+16], r13

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rdx, QWORD PTR [rax+8]

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	QWORD PTR [rax+8], r13

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rcx, QWORD PTR [rax]

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	QWORD PTR [rax], r13
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 401  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

	mov	QWORD PTR $T4[rbp-153], rcx
	mov	QWORD PTR $T4[rbp-145], rdx
	mov	QWORD PTR $T4[rbp-137], r8
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 25   : 	SarcFile DictSarc(ZStdFile::Decompress(Path, ZStdFile::Dictionary::None).Data);

	lea	rdx, QWORD PTR $T4[rbp-153]
	lea	rcx, QWORD PTR DictSarc$[rbp-153]
	call	??0SarcFile@@QEAA@V?$vector@EV?$allocator@E@std@@@std@@@Z ; SarcFile::SarcFile
	npad	1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR $T5[rbp-153]
	test	rcx, rcx
	je	SHORT $LN31@Initialize

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rdx, QWORD PTR $T5[rbp-137]
	sub	rdx, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, rcx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN49@Initialize

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rcx-8]
	sub	rax, rcx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	jbe	SHORT $LN49@Initialize
	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN49@Initialize:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

	mov	QWORD PTR $T5[rbp-153], r13
	xorps	xmm0, xmm0

; 2050 :             _Mylast  = nullptr;

	movdqu	XMMWORD PTR $T5[rbp-145], xmm0
$LN31@Initialize:
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T3[rbp-153], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T3[rbp-137], r13

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T3[rbp-129], r13

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	r8d, 10
	lea	rdx, OFFSET FLAT:??_C@_0L@IKMLCMME@pack?4zsdic@
	lea	rcx, QWORD PTR $T3[rbp-153]
	call	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\SARC.cpp

; 20   :     for (SarcFile::Entry& Entry : this->GetEntries())

	mov	r12, QWORD PTR DictSarc$[rbp-145]
	mov	rsi, r12
	mov	rbx, QWORD PTR DictSarc$[rbp-137]
	cmp	r12, rbx
	je	SHORT $LN70@Initialize
	mov	r14, QWORD PTR $T3[rbp-129]
	mov	rdi, QWORD PTR $T3[rbp-137]
	mov	r15, QWORD PTR $T3[rbp-153]
	npad	15
$LL71@Initialize:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

	lea	rdx, QWORD PTR $T3[rbp-153]

; 2236 :         if (_Large_string_engaged()) {

	cmp	r14, 16
	cmovae	rdx, r15

; 4584 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

	mov	r8, QWORD PTR [rsi+16]

; 2235 :         const value_type* _Result = _Bx._Buf;

	mov	rcx, rsi

; 2236 :         if (_Large_string_engaged()) {

	cmp	QWORD PTR [rsi+24], 16
	jb	SHORT $LN84@Initialize

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

	mov	rcx, QWORD PTR [rsi]
$LN84@Initialize:

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

	cmp	r8, rdi
	jne	SHORT $LN90@Initialize

; 381  :         return __builtin_memcmp(_First1, _First2, _Count);

	call	memcmp

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

	test	eax, eax
	je	SHORT $LN68@Initialize
$LN90@Initialize:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\SARC.cpp

; 20   :     for (SarcFile::Entry& Entry : this->GetEntries())

	add	rsi, 56					; 00000038H
	cmp	rsi, rbx
	jne	SHORT $LL71@Initialize
$LN70@Initialize:

; 21   :     {
; 22   :         if (Entry.Name == Name)
; 23   :         {
; 24   :             return Entry;
; 25   :         }
; 26   :     }
; 27   :     return this->GetEntries()[0];

	mov	rsi, r12
$LN68@Initialize:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 27   : 	std::vector<unsigned char>* DictPack = &DictSarc.GetEntry("pack.zsdic").Bytes;

	lea	rcx, QWORD PTR $T3[rbp-153]
	call	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T2[rbp-153], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T2[rbp-137], r13

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T2[rbp-129], r13

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	r8d, 8
	lea	rdx, OFFSET FLAT:??_C@_08GIHPGKIP@zs?4zsdic@
	lea	rcx, QWORD PTR $T2[rbp-153]
	call	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\SARC.cpp

; 20   :     for (SarcFile::Entry& Entry : this->GetEntries())

	mov	r13, QWORD PTR DictSarc$[rbp-145]
	mov	rdi, r13
	mov	rbx, QWORD PTR DictSarc$[rbp-137]
	cmp	r13, rbx
	je	SHORT $LN116@Initialize
	mov	r15, QWORD PTR $T2[rbp-129]
	mov	r14, QWORD PTR $T2[rbp-137]
	mov	r12, QWORD PTR $T2[rbp-153]
	npad	15
$LL117@Initialize:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

	lea	rdx, QWORD PTR $T2[rbp-153]

; 2236 :         if (_Large_string_engaged()) {

	cmp	r15, 16
	cmovae	rdx, r12

; 4584 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

	mov	r8, QWORD PTR [rdi+16]

; 2235 :         const value_type* _Result = _Bx._Buf;

	mov	rcx, rdi

; 2236 :         if (_Large_string_engaged()) {

	cmp	QWORD PTR [rdi+24], 16
	jb	SHORT $LN130@Initialize

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

	mov	rcx, QWORD PTR [rdi]
$LN130@Initialize:

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

	cmp	r8, r14
	jne	SHORT $LN136@Initialize

; 381  :         return __builtin_memcmp(_First1, _First2, _Count);

	call	memcmp

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

	test	eax, eax
	je	SHORT $LN114@Initialize
$LN136@Initialize:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\SARC.cpp

; 20   :     for (SarcFile::Entry& Entry : this->GetEntries())

	add	rdi, 56					; 00000038H
	cmp	rdi, rbx
	jne	SHORT $LL117@Initialize
$LN116@Initialize:

; 21   :     {
; 22   :         if (Entry.Name == Name)
; 23   :         {
; 24   :             return Entry;
; 25   :         }
; 26   :     }
; 27   :     return this->GetEntries()[0];

	mov	rdi, r13
$LN114@Initialize:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 28   : 	std::vector<unsigned char>* DictBase = &DictSarc.GetEntry("zs.zsdic").Bytes;

	lea	rcx, QWORD PTR $T2[rbp-153]
	call	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T1[rbp-153], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	xor	eax, eax
	mov	QWORD PTR $T1[rbp-137], rax

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T1[rbp-129], rax

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	lea	r8d, QWORD PTR [rax+16]
	lea	rdx, OFFSET FLAT:??_C@_0BB@JGCACFHG@bcett?4byml?4zsdic@
	lea	rcx, QWORD PTR $T1[rbp-153]
	call	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\SARC.cpp

; 20   :     for (SarcFile::Entry& Entry : this->GetEntries())

	mov	rax, QWORD PTR DictSarc$[rbp-145]
	mov	rbx, rax
	mov	r14, QWORD PTR DictSarc$[rbp-137]
	cmp	rax, r14
	je	SHORT $LN162@Initialize
	mov	r12, QWORD PTR $T1[rbp-129]
	mov	r15, QWORD PTR $T1[rbp-137]
	mov	r13, QWORD PTR $T1[rbp-153]
	npad	15
$LL163@Initialize:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

	lea	rdx, QWORD PTR $T1[rbp-153]

; 2236 :         if (_Large_string_engaged()) {

	cmp	r12, 16
	cmovae	rdx, r13

; 4584 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

	mov	r8, QWORD PTR [rbx+16]

; 2235 :         const value_type* _Result = _Bx._Buf;

	mov	rcx, rbx

; 2236 :         if (_Large_string_engaged()) {

	cmp	QWORD PTR [rbx+24], 16
	jb	SHORT $LN176@Initialize

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

	mov	rcx, QWORD PTR [rbx]
$LN176@Initialize:

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

	cmp	r8, r15
	jne	SHORT $LN182@Initialize

; 381  :         return __builtin_memcmp(_First1, _First2, _Count);

	call	memcmp

; 548  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

	test	eax, eax
	je	SHORT $LN160@Initialize
$LN182@Initialize:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\SARC.cpp

; 20   :     for (SarcFile::Entry& Entry : this->GetEntries())

	add	rbx, 56					; 00000038H
	cmp	rbx, r14
	jne	SHORT $LL163@Initialize
	mov	rax, QWORD PTR DictSarc$[rbp-145]
$LN162@Initialize:

; 21   :     {
; 22   :         if (Entry.Name == Name)
; 23   :         {
; 24   :             return Entry;
; 25   :         }
; 26   :     }
; 27   :     return this->GetEntries()[0];

	mov	rbx, rax
$LN160@Initialize:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 29   : 	std::vector<unsigned char>* DictBcettByaml = &DictSarc.GetEntry("bcett.byml.zsdic").Bytes;

	lea	rcx, QWORD PTR $T1[rbp-153]
	call	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rcx, QWORD PTR [rdi+32]
	mov	rdx, QWORD PTR [rdi+40]
	sub	rdx, rcx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 31   : 	m_DecompressDictBase = ZSTD_createDDict(DictBase->data(), DictBase->size());

	call	ZSTD_createDDict
	mov	QWORD PTR ?m_DecompressDictBase@@3PEAUZSTD_DDict_s@@EA, rax ; m_DecompressDictBase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rcx, QWORD PTR [rsi+32]
	mov	rdx, QWORD PTR [rsi+40]
	sub	rdx, rcx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 32   : 	m_DecompressDictPack = ZSTD_createDDict(DictPack->data(), DictPack->size());

	call	ZSTD_createDDict
	mov	QWORD PTR ?m_DecompressDictPack@@3PEAUZSTD_DDict_s@@EA, rax ; m_DecompressDictPack
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rcx, QWORD PTR [rbx+32]
	mov	rdx, QWORD PTR [rbx+40]
	sub	rdx, rcx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 33   : 	m_DecompressDictBcettByaml = ZSTD_createDDict(DictBcettByaml->data(), DictBcettByaml->size());

	call	ZSTD_createDDict
	mov	QWORD PTR ?m_DecompressDictBcettByaml@@3PEAUZSTD_DDict_s@@EA, rax ; m_DecompressDictBcettByaml
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rcx, QWORD PTR [rdi+32]
	mov	rdx, QWORD PTR [rdi+40]
	sub	rdx, rcx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 36   : 	m_CompressDictBase = ZSTD_createCDict(DictBase->data(), DictBase->size(), 16);

	mov	r8d, 16
	call	ZSTD_createCDict
	mov	QWORD PTR ?m_CompressDictBase@@3PEAUZSTD_CDict_s@@EA, rax ; m_CompressDictBase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rcx, QWORD PTR [rsi+32]
	mov	rdx, QWORD PTR [rsi+40]
	sub	rdx, rcx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 37   : 	m_CompressDictPack = ZSTD_createCDict(DictPack->data(), DictPack->size(), 16);

	mov	r8d, 16
	call	ZSTD_createCDict
	mov	QWORD PTR ?m_CompressDictPack@@3PEAUZSTD_CDict_s@@EA, rax ; m_CompressDictPack
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rcx, QWORD PTR [rbx+32]
	mov	rdx, QWORD PTR [rbx+40]
	sub	rdx, rcx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 38   : 	m_CompressDictBcettByaml = ZSTD_createCDict(DictBcettByaml->data(), DictBcettByaml->size(), 16);

	mov	r8d, 16
	call	ZSTD_createCDict
	mov	QWORD PTR ?m_CompressDictBcettByaml@@3PEAUZSTD_CDict_s@@EA, rax ; m_CompressDictBcettByaml
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 767  :         _Tidy();

	lea	rcx, QWORD PTR DictSarc$[rbp-145]
	call	?_Tidy@?$vector@UEntry@SarcFile@@V?$allocator@UEntry@SarcFile@@@std@@@std@@AEAAXXZ ; std::vector<SarcFile::Entry,std::allocator<SarcFile::Entry> >::_Tidy
	npad	1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3119 :         _Tidy_deallocate();

	mov	rcx, QWORD PTR Path$GSCopy$1$[rbp-153]
	call	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 39   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-153]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+208]
	mov	rbx, QWORD PTR [r11+56]
	mov	rsi, QWORD PTR [r11+64]
	mov	rdi, QWORD PTR [r11+72]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rbp
	ret	0
$LN239@Initialize:
?Initialize@ZStdFile@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; ZStdFile::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
Path$GSCopy$1$ = 72
$T4 = 80
$T5 = 104
$T6 = 128
Path$GSCopy$ = 160
DictSarc$ = 168
__$ArrayPad$ = 200
Path$ = 256
?dtor$0@?0??Initialize@ZStdFile@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `ZStdFile::Initialize'::`1'::dtor$0
	mov	rcx, QWORD PTR Path$GSCopy$[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??Initialize@ZStdFile@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `ZStdFile::Initialize'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
Path$GSCopy$1$ = 72
$T4 = 80
$T5 = 104
$T6 = 128
Path$GSCopy$ = 160
DictSarc$ = 168
__$ArrayPad$ = 200
Path$ = 256
?dtor$2@?0??Initialize@ZStdFile@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `ZStdFile::Initialize'::`1'::dtor$2
	lea	rcx, QWORD PTR $T5[rdx]
	jmp	??1Result@ZStdFile@@QEAA@XZ
?dtor$2@?0??Initialize@ZStdFile@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `ZStdFile::Initialize'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
Path$GSCopy$1$ = 72
$T4 = 80
$T5 = 104
$T6 = 128
Path$GSCopy$ = 160
DictSarc$ = 168
__$ArrayPad$ = 200
Path$ = 256
?dtor$4@?0??Initialize@ZStdFile@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `ZStdFile::Initialize'::`1'::dtor$4
	lea	rcx, QWORD PTR DictSarc$[rdx]
	jmp	??1SarcFile@@QEAA@XZ
?dtor$4@?0??Initialize@ZStdFile@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `ZStdFile::Initialize'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\fstream
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\iosfwd
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\iosfwd
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\iosfwd
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\fstream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\fstream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\fstream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
;	COMDAT ?GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T3 = 64
$T4 = 64
$T5 = 96
Path$GSCopy$ = 112
File$ = 128
$T6 = 400
Bytes$7 = 400
$T8 = 432
FileSize$9 = 432
__$ArrayPad$ = 464
Path$ = 528
?GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; ZStdFile::GetDecompressedFileSize, COMDAT

; 42   : {

$LN367:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rbp
	push	rdi
	push	r12
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-224]
	sub	rsp, 480				; 000001e0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-256], rax
	mov	rdi, rcx
	mov	QWORD PTR Path$GSCopy$[rsp], rcx
	xor	r15d, r15d
	xor	edx, edx
	mov	r8d, 272				; 00000110H
	lea	rcx, QWORD PTR File$[rbp-256]
	call	memset
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2235 :         const value_type* _Result = _Bx._Buf;

	mov	rdx, rdi

; 2236 :         if (_Large_string_engaged()) {

	cmp	QWORD PTR [rdi+24], 16
	jb	SHORT $LN357@GetDecompr

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

	mov	rdx, QWORD PTR [rdi]
$LN357@GetDecompr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\fstream

; 43   :         : basic_ifstream(_Str.c_str(), _Mode, _Prot) {} // _Prot is an extension

	mov	r8d, 32					; 00000020H
	lea	rcx, QWORD PTR File$[rbp-256]
	call	??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
	mov	rax, QWORD PTR File$[rbp-256]
	movsxd	rcx, DWORD PTR [rax+4]
	lea	r12, OFFSET FLAT:??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
	mov	QWORD PTR File$[rbp+rcx-256], r12
	mov	rax, QWORD PTR File$[rbp-256]
	movsxd	rcx, DWORD PTR [rax+4]
	lea	edx, DWORD PTR [rcx-176]
	mov	DWORD PTR File$[rsp+rcx-4], edx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 45   : 	if (!File.eof() && !File.fail())

	mov	rax, QWORD PTR File$[rbp-256]
	movsxd	rcx, DWORD PTR [rax+4]
	lea	rax, QWORD PTR File$[rbp-256]
	add	rcx, rax
	call	QWORD PTR __imp_?eof@ios_base@std@@QEBA_NXZ
	test	al, al
	jne	$LN2@GetDecompr
	mov	rax, QWORD PTR File$[rbp-256]
	movsxd	rcx, DWORD PTR [rax+4]
	lea	rax, QWORD PTR File$[rbp-256]
	add	rcx, rax
	call	QWORD PTR __imp_?fail@ios_base@std@@QEBA_NXZ
	test	al, al
	jne	$LN2@GetDecompr

; 46   : 	{
; 47   : 		File.seekg(0, std::ios_base::end);

	xor	edx, edx
	lea	r8d, QWORD PTR [rdx+2]
	lea	rcx, QWORD PTR File$[rbp-256]
	call	QWORD PTR __imp_?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@_JH@Z

; 48   : 		std::streampos FileSize = File.tellg();

	lea	rdx, QWORD PTR FileSize$9[rbp-256]
	lea	rcx, QWORD PTR File$[rbp-256]
	call	QWORD PTR __imp_?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA?AV?$fpos@U_Mbstatet@@@2@XZ
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\iosfwd

; 68   :         return _Myoff + _Fpos;

	mov	rsi, QWORD PTR FileSize$9[rbp-248]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	movdqu	XMMWORD PTR Bytes$7[rbp-256], xmm0
	mov	QWORD PTR Bytes$7[rbp-240], r15

; 2065 :         if (_Count != 0) {

	mov	r14, 9223372036854775807		; 7fffffffffffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\iosfwd

; 68   :         return _Myoff + _Fpos;

	add	rsi, QWORD PTR FileSize$9[rbp-256]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2065 :         if (_Count != 0) {

	je	SHORT $LN216@GetDecompr

; 2006 :         if (_Newcapacity > max_size()) {

	cmp	rsi, r14
	ja	$LN361@GetDecompr
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rsi, 4096				; 00001000H
	jb	SHORT $LN172@GetDecompr

; 139  :     const size_t _Block_size = _Non_user_size + _Bytes;

	lea	rcx, QWORD PTR [rsi+39]

; 140  :     if (_Block_size <= _Bytes) {

	cmp	rcx, rsi
	jbe	$LN362@GetDecompr

; 87   :         return ::operator new(_Bytes);

	call	??2@YAPEAX_K@Z				; operator new
	mov	rcx, rax

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	test	rax, rax
	je	SHORT $LN181@GetDecompr

; 146  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	add	rax, 39					; 00000027H
	and	rax, -32				; ffffffffffffffe0H

; 147  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	QWORD PTR [rax-8], rcx

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	jmp	SHORT $LN170@GetDecompr
$LN181@GetDecompr:

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN172@GetDecompr:

; 87   :         return ::operator new(_Bytes);

	mov	rcx, rsi
	call	??2@YAPEAX_K@Z				; operator new
$LN170@GetDecompr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1990 :         _Myfirst           = _Newvec;

	mov	QWORD PTR Bytes$7[rbp-256], rax

; 1992 :         _Myend             = _Newvec + _Newcapacity;

	lea	rbx, QWORD PTR [rax+rsi]
	mov	QWORD PTR Bytes$7[rbp-240], rbx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2020 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	r8, rsi
	xor	edx, edx
	mov	rcx, rax
	call	memset
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2069 :                 _My_data._Mylast = _Uninitialized_value_construct_n(_My_data._Myfirst, _Count, _Al);

	mov	QWORD PTR Bytes$7[rbp-248], rbx
$LN216@GetDecompr:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 52   : 		File.seekg(0, std::ios_base::beg);

	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR File$[rbp-256]
	call	QWORD PTR __imp_?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@_JH@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\iosfwd

; 68   :         return _Myoff + _Fpos;

	mov	r8, QWORD PTR FileSize$9[rbp-248]
	add	r8, QWORD PTR FileSize$9[rbp-256]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 53   : 		File.read(reinterpret_cast<char*>(Bytes.data()), FileSize);

	mov	rdx, QWORD PTR Bytes$7[rbp-256]
	lea	rcx, QWORD PTR File$[rbp-256]
	call	QWORD PTR __imp_?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@PEAD_J@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\fstream

; 193  :         if (!_Filebuffer.close()) {

	lea	rcx, QWORD PTR File$[rbp-240]
	call	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
	test	rax, rax
	jne	SHORT $LN222@GetDecompr

; 194  :             _Myios::setstate(ios_base::failbit);

	mov	rax, QWORD PTR File$[rbp-256]
	movsxd	rcx, DWORD PTR [rax+4]
	lea	rax, QWORD PTR File$[rbp-256]
	add	rcx, rax
	xor	r8d, r8d
	lea	edx, QWORD PTR [r8+2]
	call	QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
$LN222@GetDecompr:
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	movdqu	XMMWORD PTR $T4[rsp], xmm0
	mov	QWORD PTR $T4[rsp+16], r15

; 685  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

	mov	rbx, QWORD PTR Bytes$7[rbp-248]
	sub	rbx, QWORD PTR Bytes$7[rbp-256]

; 2065 :         if (_Count != 0) {

	je	$LN358@GetDecompr

; 2006 :         if (_Newcapacity > max_size()) {

	cmp	rbx, r14
	ja	$LN363@GetDecompr
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rbx, 4096				; 00001000H
	jb	SHORT $LN243@GetDecompr

; 139  :     const size_t _Block_size = _Non_user_size + _Bytes;

	lea	rcx, QWORD PTR [rbx+39]

; 140  :     if (_Block_size <= _Bytes) {

	cmp	rcx, rbx
	jbe	$LN364@GetDecompr

; 87   :         return ::operator new(_Bytes);

	call	??2@YAPEAX_K@Z				; operator new

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	test	rax, rax
	je	SHORT $LN252@GetDecompr

; 146  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	lea	rsi, QWORD PTR [rax+39]
	and	rsi, -32				; ffffffffffffffe0H

; 147  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	QWORD PTR [rsi-8], rax

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	jmp	SHORT $LN241@GetDecompr
$LN252@GetDecompr:

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN243@GetDecompr:

; 87   :         return ::operator new(_Bytes);

	mov	rcx, rbx
	call	??2@YAPEAX_K@Z				; operator new
	mov	rsi, rax
$LN241@GetDecompr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1990 :         _Myfirst           = _Newvec;

	mov	QWORD PTR $T4[rsp], rsi

; 1991 :         _Mylast            = _Newvec;

	mov	QWORD PTR $T4[rsp+8], rsi

; 1992 :         _Myend             = _Newvec + _Newcapacity;

	lea	rcx, QWORD PTR [rsi+rbx]
	mov	QWORD PTR $T4[rsp+16], rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rbx, QWORD PTR Bytes$7[rbp-248]
	mov	rdx, QWORD PTR Bytes$7[rbp-256]
	sub	rbx, rdx

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, rbx
	mov	rcx, rsi
	call	memmove
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1844 :                 _Dest += _ULast - _UFirst;

	lea	rdx, QWORD PTR [rbx+rsi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2074 :                 _My_data._Mylast = _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

	mov	QWORD PTR $T4[rsp+8], rdx

; 2065 :         if (_Count != 0) {

	jmp	SHORT $LN283@GetDecompr
$LN358@GetDecompr:
	mov	rdx, QWORD PTR $T4[rsp+8]
$LN283@GetDecompr:

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rcx, QWORD PTR $T4[rsp]
	sub	rdx, rcx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 68   : 	unsigned long long DecompSize = ZSTD_getFrameContentSize(Bytes.data(), Bytes.size());

	call	ZSTD_getFrameContentSize
	mov	rbx, rax

; 69   : 	if (DecompSize == 18446744073709551614) //Means the size could not be calculated

	lea	rcx, QWORD PTR $T4[rsp]
	cmp	rax, -2
	jne	SHORT $LN287@GetDecompr

; 70   : 	{
; 71   : 		return -1;

	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	mov	ebx, -1
	jmp	SHORT $LN286@GetDecompr
$LN287@GetDecompr:

; 72   : 	}
; 73   : 	return DecompSize;

	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	npad	1
$LN286@GetDecompr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR Bytes$7[rbp-256]
	test	rcx, rcx
	je	SHORT $LN294@GetDecompr

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rdx, QWORD PTR Bytes$7[rbp-240]
	sub	rdx, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, rcx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN312@GetDecompr

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rcx-8]
	sub	rax, rcx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	jbe	SHORT $LN312@GetDecompr
	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN312@GetDecompr:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

	movdqu	XMMWORD PTR Bytes$7[rbp-256], xmm0

; 2050 :             _Mylast  = nullptr;
; 2051 :             _Myend   = nullptr;

	mov	QWORD PTR Bytes$7[rbp-240], r15
$LN294@GetDecompr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\fstream

; 161  :     __CLR_OR_THIS_CALL ~basic_ifstream() noexcept override {}

	mov	rax, QWORD PTR File$[rbp-256]
	movsxd	rdx, DWORD PTR [rax+4]
	mov	QWORD PTR File$[rbp+rdx-256], r12
	mov	rax, QWORD PTR File$[rbp-256]
	movsxd	rdx, DWORD PTR [rax+4]
	lea	r8d, DWORD PTR [rdx-176]
	mov	DWORD PTR File$[rsp+rdx-4], r8d
	lea	rcx, QWORD PTR File$[rbp-240]
	call	??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
	lea	rcx, QWORD PTR File$[rbp-232]
	call	QWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UEAA@XZ
	lea	rcx, QWORD PTR File$[rbp-80]
	call	QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
	npad	1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3119 :         _Tidy_deallocate();

	mov	rcx, rdi
	call	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 57   : 		return GetDecompressedFileSize(Bytes);

	mov	eax, ebx
	jmp	$LN328@GetDecompr
$LN2@GetDecompr:

; 61   : 		Logger::Error("ZStdDecompressor", "Could not open file \"" + Path + "\"");

	lea	rbx, QWORD PTR $T3[rsp]
	mov	QWORD PTR $T5[rsp], rbx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4915 :     const auto _Right_size = _Right.size();

	mov	rcx, QWORD PTR [rdi+16]

; 4916 :     if (_Right.max_size() - _Right_size < _Left_size) {

	mov	r14, 9223372036854775807		; 7fffffffffffffffH
	sub	r14, rcx
	cmp	r14, 21
	jb	$LN365@GetDecompr

; 2235 :         const value_type* _Result = _Bx._Buf;

	mov	rax, rdi

; 2236 :         if (_Large_string_engaged()) {

	cmp	QWORD PTR [rdi+24], 16
	jb	SHORT $LN34@GetDecompr

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

	mov	rax, QWORD PTR [rdi]
$LN34@GetDecompr:

; 4920 :     return {_String_constructor_concat_tag{}, _Right, _Left, _Left_size, _Right.c_str(), _Right_size};

	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], 21
	lea	r9, OFFSET FLAT:??_C@_0BG@JPHMGNJI@Could?5not?5open?5file?5?$CC@
	lea	rcx, QWORD PTR $T8[rbp-256]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@U_String_constructor_concat_tag@1@AEBV01@QEBD_K23@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1

; 3270 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

	mov	rcx, QWORD PTR $T8[rbp-240]
	mov	rdx, QWORD PTR $T8[rbp-232]
	mov	rax, rdx
	sub	rax, rcx

; 3271 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

	cmp	rax, 1
	jb	SHORT $LN48@GetDecompr

; 3272 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 3273 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

	lea	rax, QWORD PTR [rcx+1]
	mov	QWORD PTR $T8[rbp-240], rax

; 2226 :         value_type* _Result = _Bx._Buf;

	lea	rax, QWORD PTR $T8[rbp-256]

; 2227 :         if (_Large_string_engaged()) {

	cmp	rdx, 16
	cmovae	rax, QWORD PTR $T8[rbp-256]

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

	mov	WORD PTR [rax+rcx], 34			; 00000022H

; 3277 :             return *this;

	lea	rax, QWORD PTR $T8[rbp-256]
	jmp	SHORT $LN47@GetDecompr
$LN48@GetDecompr:

; 3278 :         }
; 3279 : 
; 3280 :         return _Reallocate_grow_by(

	mov	QWORD PTR [rsp+32], 1
	lea	r9, OFFSET FLAT:??_C@_01BJJEKLCA@?$CC@
	mov	edx, 1
	lea	rcx, QWORD PTR $T8[rbp-256]
	call	??$_Reallocate_grow_by@V<lambda_1>@?1??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append'::`2'::<lambda_1>,char const *,unsigned __int64>
$LN47@GetDecompr:
	xorps	xmm0, xmm0

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T3[rsp], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T3[rsp+16], r15

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T3[rsp+24], r15

; 2999 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR $T3[rsp], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR $T3[rsp+16], xmm1
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 61   : 		Logger::Error("ZStdDecompressor", "Could not open file \"" + Path + "\"");

	mov	QWORD PTR [rax+16], r15
	mov	QWORD PTR [rax+24], 15
	mov	BYTE PTR [rax], 0
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	movups	XMMWORD PTR $T6[rbp-256], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

	mov	QWORD PTR $T6[rbp-240], r15

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

	mov	QWORD PTR $T6[rbp-232], r15

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	r8d, 16
	lea	rdx, OFFSET FLAT:??_C@_0BB@CJDMALJE@ZStdDecompressor@
	lea	rcx, QWORD PTR $T6[rbp-256]
	call	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	npad	1
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 61   : 		Logger::Error("ZStdDecompressor", "Could not open file \"" + Path + "\"");

	mov	rdx, rbx
	lea	rcx, QWORD PTR $T6[rbp-256]
	call	?Error@Logger@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; Logger::Error
	npad	1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4832 :         if (_My_data._Large_string_engaged()) {

	mov	rdx, QWORD PTR $T8[rbp-232]
	cmp	rdx, 16
	jb	SHORT $LN124@GetDecompr

; 4833 :             _ASAN_STRING_REMOVE(*this);
; 4834 :             const pointer _Ptr = _My_data._Bx._Ptr;
; 4835 :             auto& _Al          = _Getal();
; 4836 :             _Destroy_in_place(_My_data._Bx._Ptr);
; 4837 :             _My_data._Activate_SSO_buffer();
; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rcx, QWORD PTR $T8[rbp-256]
	mov	rax, rcx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN136@GetDecompr

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rcx-8]
	sub	rax, rcx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	jbe	SHORT $LN136@GetDecompr
	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN136@GetDecompr:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1
$LN124@GetDecompr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\fstream

; 161  :     __CLR_OR_THIS_CALL ~basic_ifstream() noexcept override {}

	mov	rax, QWORD PTR File$[rbp-256]
	movsxd	rcx, DWORD PTR [rax+4]
	mov	QWORD PTR File$[rbp+rcx-256], r12
	mov	rax, QWORD PTR File$[rbp-256]
	movsxd	rcx, DWORD PTR [rax+4]
	lea	edx, DWORD PTR [rcx-176]
	mov	DWORD PTR File$[rsp+rcx-4], edx
	lea	rcx, QWORD PTR File$[rbp-240]
	call	??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
	lea	rcx, QWORD PTR File$[rbp-232]
	call	QWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UEAA@XZ
	lea	rcx, QWORD PTR File$[rbp-80]
	call	QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
	npad	1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3119 :         _Tidy_deallocate();

	mov	rcx, rdi
	call	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 62   : 		return -1;

	mov	eax, -1
$LN328@GetDecompr:

; 64   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-256]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+480]
	mov	rbx, QWORD PTR [r11+56]
	mov	rsi, QWORD PTR [r11+64]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rbp
	ret	0
$LN365@GetDecompr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4917 :         _Xlen_string();

	call	?_Xlen_string@std@@YAXXZ		; std::_Xlen_string
	npad	1
$LN361@GetDecompr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2007 :             _Xlength();

	call	?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
	int	3
$LN362@GetDecompr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 141  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
	npad	1
$LN363@GetDecompr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2007 :             _Xlength();

	call	?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
	int	3
$LN364@GetDecompr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 141  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
	int	3
$LN359@GetDecompr:
?GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; ZStdFile::GetDecompressedFileSize
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 64
$T4 = 64
$T5 = 96
Path$GSCopy$ = 112
File$ = 128
$T6 = 400
Bytes$7 = 400
$T8 = 432
FileSize$9 = 432
__$ArrayPad$ = 464
Path$ = 528
?dtor$0@?0??GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `ZStdFile::GetDecompressedFileSize'::`1'::dtor$0
	mov	rcx, QWORD PTR Path$GSCopy$[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$0@?0??GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `ZStdFile::GetDecompressedFileSize'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 64
$T4 = 64
$T5 = 96
Path$GSCopy$ = 112
File$ = 128
$T6 = 400
Bytes$7 = 400
$T8 = 432
FileSize$9 = 432
__$ArrayPad$ = 464
Path$ = 528
?dtor$1@?0??GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `ZStdFile::GetDecompressedFileSize'::`1'::dtor$1
	lea	rcx, QWORD PTR File$[rdx]
	jmp	??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
?dtor$1@?0??GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `ZStdFile::GetDecompressedFileSize'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 64
$T4 = 64
$T5 = 96
Path$GSCopy$ = 112
File$ = 128
$T6 = 400
Bytes$7 = 400
$T8 = 432
FileSize$9 = 432
__$ArrayPad$ = 464
Path$ = 528
?dtor$2@?0??GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `ZStdFile::GetDecompressedFileSize'::`1'::dtor$2
	lea	rcx, QWORD PTR Bytes$7[rdx]
	jmp	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
?dtor$2@?0??GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `ZStdFile::GetDecompressedFileSize'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 64
$T4 = 64
$T5 = 96
Path$GSCopy$ = 112
File$ = 128
$T6 = 400
Bytes$7 = 400
$T8 = 432
FileSize$9 = 432
__$ArrayPad$ = 464
Path$ = 528
?dtor$4@?0??GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `ZStdFile::GetDecompressedFileSize'::`1'::dtor$4
	lea	rcx, QWORD PTR $T8[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$4@?0??GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `ZStdFile::GetDecompressedFileSize'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 64
$T4 = 64
$T5 = 96
Path$GSCopy$ = 112
File$ = 128
$T6 = 400
Bytes$7 = 400
$T8 = 432
FileSize$9 = 432
__$ArrayPad$ = 464
Path$ = 528
?dtor$5@?0??GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `ZStdFile::GetDecompressedFileSize'::`1'::dtor$5
	mov	rcx, QWORD PTR $T5[rdx]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$5@?0??GetDecompressedFileSize@ZStdFile@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `ZStdFile::GetDecompressedFileSize'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
;	COMDAT ?GetDecompressedFileSize@ZStdFile@@YAHV?$vector@EV?$allocator@E@std@@@std@@@Z
_TEXT	SEGMENT
Bytes$ = 48
?GetDecompressedFileSize@ZStdFile@@YAHV?$vector@EV?$allocator@E@std@@@std@@@Z PROC ; ZStdFile::GetDecompressedFileSize, COMDAT

; 67   : {

$LN9:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rbx+8]
	sub	rdx, rcx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 68   : 	unsigned long long DecompSize = ZSTD_getFrameContentSize(Bytes.data(), Bytes.size());

	call	ZSTD_getFrameContentSize
	mov	rdi, rax

; 69   : 	if (DecompSize == 18446744073709551614) //Means the size could not be calculated

	mov	rcx, rbx
	cmp	rax, -2
	jne	SHORT $LN2@GetDecompr

; 70   : 	{
; 71   : 		return -1;

	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	lea	eax, QWORD PTR [rdi+1]

; 74   : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@GetDecompr:

; 72   : 	}
; 73   : 	return DecompSize;

	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >

; 74   : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	eax, edi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?GetDecompressedFileSize@ZStdFile@@YAHV?$vector@EV?$allocator@E@std@@@std@@@Z ENDP ; ZStdFile::GetDecompressedFileSize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp
;	COMDAT ?Decompress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z
_TEXT	SEGMENT
$T3 = 64
Bytes$GSCopy$ = 88
__$ReturnUdt$GSCopy$ = 88
Result$ = 96
__$ArrayPad$ = 120
__$ReturnUdt$ = 192
Bytes$ = 200
Dictionary$ = 208
?Decompress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z PROC ; ZStdFile::Decompress, COMDAT

; 77   : {

$LN331:
	mov	QWORD PTR [rsp+24], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	mov	rbp, rsp
	sub	rsp, 128				; 00000080H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-128], rax
	mov	r14d, r8d
	mov	r15, rdx
	mov	rdi, rcx
	mov	QWORD PTR __$ReturnUdt$GSCopy$[rbp-128], rcx
	mov	QWORD PTR Bytes$GSCopy$[rbp-128], rdx
	xor	r12d, r12d
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	movdqu	XMMWORD PTR Result$[rbp-128], xmm0
	mov	QWORD PTR Result$[rbp-112], r12

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rcx, QWORD PTR [rdx]
	mov	rdx, QWORD PTR [rdx+8]
	sub	rdx, rcx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 80   : 	unsigned long long DecompSize = ZSTD_getFrameContentSize(Bytes.data(), Bytes.size());

	call	ZSTD_getFrameContentSize
	mov	r8, rax

; 81   : 	if (DecompSize >= 18000000000000000000) //Means the size could not be calculated

	mov	r13, -446744073709551616		; f9ccd8a1c5080000H
	mov	rdx, QWORD PTR Result$[rbp-128]
	cmp	rax, r13
	jb	SHORT $LN4@Decompress
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	r9, QWORD PTR Result$[rbp-112]
	mov	r8, QWORD PTR Result$[rbp-120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 401  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

	mov	QWORD PTR [rdi+8], r8
	mov	QWORD PTR [rdi+16], r9
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 83   : 		return Result;

	jmp	$LN324@Decompress
$LN4@Decompress:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1557 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	r9, QWORD PTR Result$[rbp-120]
	mov	rcx, r9
	sub	rcx, rdx

; 1558 :         if (_Newsize < _Oldsize) { // trim

	cmp	r8, rcx
	jae	SHORT $LN83@Decompress

; 1559 :             const pointer _Newlast = _Myfirst + _Newsize;

	add	rax, rdx
	mov	QWORD PTR Result$[rbp-120], rax

; 1560 :             _Orphan_range(_Newlast, _Mylast);
; 1561 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1562 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1563 :             _Mylast = _Newlast;
; 1564 :             return;

	jmp	SHORT $LN84@Decompress
$LN83@Decompress:

; 1565 :         }
; 1566 : 
; 1567 :         if (_Newsize > _Oldsize) { // append

	jbe	SHORT $LN84@Decompress

; 1568 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	rax, QWORD PTR Result$[rbp-112]
	sub	rax, rdx

; 1569 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	r8, rax
	jbe	SHORT $LN85@Decompress

; 1570 :                 _Resize_reallocate(_Newsize, _Val);

	mov	rdx, r8
	lea	rcx, QWORD PTR Result$[rbp-128]
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Resize_reallocate<std::_Value_init_tag>

; 1571 :                 return;

	jmp	SHORT $LN84@Decompress
$LN85@Decompress:

; 1580 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

	sub	r8, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2035 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	rbx, QWORD PTR [r9+r8]

; 2020 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	xor	edx, edx
	mov	rcx, r9
	call	memset
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1580 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

	mov	QWORD PTR Result$[rbp-120], rbx
$LN84@Decompress:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 87   : 	if (Dictionary == ZStdFile::Dictionary::None)

	cmp	r14d, -1
	jne	$LN5@Decompress

; 88   : 	{
; 89   : 		ZSTD_DCtx* const DCtx = ZSTD_createDCtx();

	call	ZSTD_createDCtx
	mov	rbx, rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	r9, QWORD PTR [r15]
	mov	rcx, QWORD PTR [r15+8]
	sub	rcx, r9
	mov	r8, QWORD PTR Result$[rbp-120]
	mov	rdx, QWORD PTR Result$[rbp-128]
	sub	r8, rdx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 91   : 		const size_t DecompSize = ZSTD_decompressDCtx(DCtx, (void*)Result.Data.data(), Result.Data.size(), Bytes.data(), Bytes.size());

	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, rax
	call	ZSTD_decompressDCtx
	mov	rsi, rax

; 92   : 		ZSTD_freeDCtx(DCtx);

	mov	rcx, rbx
	call	ZSTD_freeDCtx

; 93   : 		if (DecompSize >= 18000000000000000000) //Means the size could not be calculated

	cmp	rsi, r13
	jb	SHORT $LN7@Decompress
$LN328@Decompress:

; 144  : }

	mov	r8, QWORD PTR Result$[rbp-128]
	mov	rdx, QWORD PTR Result$[rbp-112]
	mov	rcx, r8
	cmp	r8, QWORD PTR Result$[rbp-120]
	cmove	rcx, QWORD PTR Result$[rbp-120]
	mov	QWORD PTR [rdi], r8
	mov	QWORD PTR [rdi+8], rcx
	mov	QWORD PTR [rdi+16], rdx
	jmp	$LN325@Decompress
$LN7@Decompress:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1557 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rcx, QWORD PTR Result$[rbp-120]
	mov	r8, rcx
	mov	rdx, QWORD PTR Result$[rbp-128]
	sub	r8, rdx

; 1558 :         if (_Newsize < _Oldsize) { // trim

	cmp	rsi, r8
	jae	SHORT $LN213@Decompress

; 1559 :             const pointer _Newlast = _Myfirst + _Newsize;

	lea	rcx, QWORD PTR [rdx+rsi]

; 1560 :             _Orphan_range(_Newlast, _Mylast);
; 1561 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1562 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1563 :             _Mylast = _Newlast;
; 1564 :             return;

	jmp	$LN6@Decompress
$LN213@Decompress:

; 1565 :         }
; 1566 : 
; 1567 :         if (_Newsize > _Oldsize) { // append

	jbe	$LN6@Decompress

; 1568 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	rax, QWORD PTR Result$[rbp-112]
	sub	rax, rdx

; 1569 :             if (_Newsize > _Oldcapacity) { // reallocate

	cmp	rsi, rax
	jbe	SHORT $LN215@Decompress

; 1570 :                 _Resize_reallocate(_Newsize, _Val);

	mov	rdx, rsi
	lea	rcx, QWORD PTR Result$[rbp-128]
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Resize_reallocate<std::_Value_init_tag>

; 1571 :                 return;

	jmp	$LN326@Decompress
$LN215@Decompress:

; 1580 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

	sub	rsi, r8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2035 :             _Zero_range(_PFirst, _PFirst + _Count);

	lea	rbx, QWORD PTR [rcx+rsi]

; 2020 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	r8, rsi
	xor	edx, edx
	call	memset
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1580 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

	mov	rcx, rbx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 99   : 	}

	jmp	$LN327@Decompress
$LN5@Decompress:

; 100  : 	else
; 101  : 	{
; 102  : 		ZSTD_DDict* DecompressionDict = nullptr;

	mov	rsi, r12

; 103  : 		switch (Dictionary)

	test	r14d, r14d
	je	SHORT $LN8@Decompress
	sub	r14d, 1
	je	SHORT $LN9@Decompress
	cmp	r14d, 1
	jne	SHORT $LN2@Decompress

; 111  : 		case ZStdFile::Dictionary::BcettByaml:
; 112  : 			DecompressionDict = m_DecompressDictBcettByaml;

	mov	rsi, QWORD PTR ?m_DecompressDictBcettByaml@@3PEAUZSTD_DDict_s@@EA ; m_DecompressDictBcettByaml
	jmp	SHORT $LN2@Decompress
$LN9@Decompress:

; 107  : 			break;
; 108  : 		case ZStdFile::Dictionary::Pack:
; 109  : 			DecompressionDict = m_DecompressDictPack;

	mov	rsi, QWORD PTR ?m_DecompressDictPack@@3PEAUZSTD_DDict_s@@EA ; m_DecompressDictPack

; 110  : 			break;

	jmp	SHORT $LN2@Decompress
$LN8@Decompress:

; 104  : 		{
; 105  : 		case ZStdFile::Dictionary::Base:
; 106  : 			DecompressionDict = m_DecompressDictBase;

	mov	rsi, QWORD PTR ?m_DecompressDictBase@@3PEAUZSTD_DDict_s@@EA ; m_DecompressDictBase
$LN2@Decompress:

; 113  : 			break;
; 114  : 		}
; 115  : 
; 116  : 		unsigned const ExpectedDictID = ZSTD_getDictID_fromDDict(DecompressionDict);

	mov	rcx, rsi
	call	ZSTD_getDictID_fromDDict
	mov	ebx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rcx, QWORD PTR [r15]
	mov	rdx, QWORD PTR [r15+8]
	sub	rdx, rcx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 117  : 		unsigned const ActualDictID = ZSTD_getDictID_fromFrame(Bytes.data(), Bytes.size());

	call	ZSTD_getDictID_fromFrame

; 118  : 		if (ExpectedDictID != ActualDictID)

	cmp	ebx, eax
	je	$LN15@Decompress

; 119  : 		{
; 120  : 			//Logger::Error("ZStdDecompressor", "ZStd Dictionary mismatch! Expected the dictionary with ID " + std::to_string(ExpectedDictID) + ", but data has to be decompressed with dictionary " + std::to_string(ActualDictID));
; 121  : 			
; 122  : 			if (ActualDictID == 0)

	test	eax, eax
	jne	SHORT $LN12@Decompress

; 124  : 				return ZStdFile::Decompress(Bytes, ZStdFile::Dictionary::None);

	mov	rdx, r15
	lea	rcx, QWORD PTR $T3[rbp-128]
	call	??0?$vector@EV?$allocator@E@std@@@std@@QEAA@AEBV01@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
	mov	r8d, -1
	mov	rdx, rax
	mov	rcx, rdi
	call	?Decompress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z ; ZStdFile::Decompress
	npad	1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR Result$[rbp-128]
	test	rcx, rcx
	je	$LN291@Decompress

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rdx, QWORD PTR Result$[rbp-112]
	sub	rdx, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, rcx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN309@Decompress

; 157  :     _Bytes += _Non_user_size;

	add	rdx, 39					; 00000027H

; 158  : 
; 159  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	rcx, QWORD PTR [rcx-8]
	sub	rax, rcx

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	add	rax, -8
	cmp	rax, 31
	jbe	SHORT $LN309@Decompress
	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN309@Decompress:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

	movdqu	XMMWORD PTR Result$[rbp-128], xmm0

; 2050 :             _Mylast  = nullptr;
; 2051 :             _Myend   = nullptr;

	mov	QWORD PTR Result$[rbp-112], r12
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 124  : 				return ZStdFile::Decompress(Bytes, ZStdFile::Dictionary::None);

	jmp	$LN291@Decompress
$LN12@Decompress:

; 125  : 			}
; 126  : 
; 127  : 			if (ActualDictID == 1) DecompressionDict = m_DecompressDictBase;

	cmp	eax, 1
	jne	SHORT $LN13@Decompress
	mov	rsi, QWORD PTR ?m_DecompressDictBase@@3PEAUZSTD_DDict_s@@EA ; m_DecompressDictBase

; 128  : 			if (ActualDictID == 2) DecompressionDict = m_DecompressDictBcettByaml;

	jmp	SHORT $LN15@Decompress
$LN13@Decompress:
	cmp	eax, 2
	jne	SHORT $LN14@Decompress
	mov	rsi, QWORD PTR ?m_DecompressDictBcettByaml@@3PEAUZSTD_DDict_s@@EA ; m_DecompressDictBcettByaml

; 129  : 			if (ActualDictID == 3) DecompressionDict = m_DecompressDictPack;

	jmp	SHORT $LN15@Decompress
$LN14@Decompress:
	cmp	eax, 3
	cmove	rsi, QWORD PTR ?m_DecompressDictPack@@3PEAUZSTD_DDict_s@@EA ; m_DecompressDictPack
$LN15@Decompress:

; 130  : 		}
; 131  : 
; 132  : 		ZSTD_DCtx* const DCtx = ZSTD_createDCtx();

	call	ZSTD_createDCtx
	mov	rbx, rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1869 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	r9, QWORD PTR [r15]
	mov	rcx, QWORD PTR [r15+8]
	sub	rcx, r9
	mov	r8, QWORD PTR Result$[rbp-120]
	mov	rdx, QWORD PTR Result$[rbp-128]
	sub	r8, rdx
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 133  : 		const size_t DecompSize = ZSTD_decompress_usingDDict(DCtx, (void*)Result.Data.data(), Result.Data.size(), Bytes.data(), Bytes.size(), DecompressionDict);

	mov	QWORD PTR [rsp+40], rsi
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, rax
	call	ZSTD_decompress_usingDDict
	mov	rsi, rax

; 134  : 		ZSTD_freeDCtx(DCtx);

	mov	rcx, rbx
	call	ZSTD_freeDCtx

; 135  : 		if (DecompSize >= 18000000000000000000) //Means the size could not be calculated

	cmp	rsi, r13
	jae	$LN328@Decompress

; 136  : 		{
; 137  : 			Result.Data.clear();
; 138  : 			return Result;
; 139  : 		}
; 140  : 		Result.Data.resize(DecompSize);

	mov	rdx, rsi
	lea	rcx, QWORD PTR Result$[rbp-128]
	call	?resize@?$vector@EV?$allocator@E@std@@@std@@QEAAX_K@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize
$LN326@Decompress:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rcx, QWORD PTR Result$[rbp-120]
$LN327@Decompress:
	mov	rdx, QWORD PTR Result$[rbp-128]
$LN6@Decompress:
	mov	rax, QWORD PTR Result$[rbp-112]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 401  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

	mov	QWORD PTR [rdi+8], rcx
	mov	QWORD PTR [rdi+16], rax
$LN324@Decompress:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\ZStdFile.cpp

; 144  : }

	mov	QWORD PTR [rdi], rdx
$LN325@Decompress:
	mov	QWORD PTR Result$[rbp-128], r12
	mov	QWORD PTR Result$[rbp-120], r12
	mov	QWORD PTR Result$[rbp-112], r12
$LN291@Decompress:
	mov	rcx, r15
	call	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp-128]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rbx, QWORD PTR [rsp+208]
	add	rsp, 128				; 00000080H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN323@Decompress:
?Decompress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z ENDP ; ZStdFile::Decompress
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 64
Bytes$GSCopy$ = 88
__$ReturnUdt$GSCopy$ = 88
Result$ = 96
__$ArrayPad$ = 120
__$ReturnUdt$ = 192
Bytes$ = 200
Dictionary$ = 208
?dtor$0@?0??Decompress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z@4HA PROC ; `ZStdFile::Decompress'::`1'::dtor$0
	mov	rcx, QWORD PTR Bytes$GSCopy$[rdx]
	jmp	??1?$vector@EV?$allocator@E@std@@@std@@QEAA@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
?dtor$0@?0??Decompress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z@4HA ENDP ; `ZStdFile::Decompress'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T3 = 64
Bytes$GSCopy$ = 88
__$ReturnUdt$GSCopy$ = 88
Result$ = 96
__$ArrayPad$ = 120
__$ReturnUdt$ = 192
Bytes$ = 200
Dictionary$ = 208
?dtor$1@?0??Decompress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z@4HA PROC ; `ZStdFile::Decompress'::`1'::dtor$1
	lea	rcx, QWORD PTR Result$[rdx]
	jmp	??1Result@ZStdFile@@QEAA@XZ
?dtor$1@?0??Decompress@ZStdFile@@YA?AUResult@1@V?$vector@EV?$allocator@E@std@@@std@@W4Dictionary@1@@Z@4HA ENDP ; `ZStdFile::Decompress'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??0Result@ZStdFile@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0Result@ZStdFile@@QEAA@XZ PROC			; ZStdFile::Result::Result, COMDAT

; 398  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	xor	eax, eax
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	rax, rcx
	ret	0
??0Result@ZStdFile@@QEAA@XZ ENDP			; ZStdFile::Result::Result
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??0Result@ZStdFile@@QEAA@$$QEAU01@@Z
_TEXT	SEGMENT
this$ = 8
__that$ = 16
??0Result@ZStdFile@@QEAA@$$QEAU01@@Z PROC		; ZStdFile::Result::Result, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rax, QWORD PTR [rdx]

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

	xor	r10d, r10d
	mov	r9, QWORD PTR [rdx+16]

; 754  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	r8, QWORD PTR [rdx+8]

; 755  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	QWORD PTR [rdx+16], r10
	mov	QWORD PTR [rdx+8], r10
	mov	QWORD PTR [rdx], r10
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 401  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	mov	QWORD PTR [rcx+8], r8
	mov	QWORD PTR [rcx+16], r9
	ret	0
??0Result@ZStdFile@@QEAA@$$QEAU01@@Z ENDP		; ZStdFile::Result::Result
_TEXT	ENDS
END
