; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

include listing.inc

INCLUDELIB OLDNAMES

?MESH_NULL_IDX@@3GA DW 0ffffH				; MESH_NULL_IDX
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\recastnavigation\detour\DetourNavMeshBuilder.cpp
;	COMDAT ?compareItemX@@YAHPEBX0@Z
_TEXT	SEGMENT
va$ = 8
vb$ = 16
?compareItemX@@YAHPEBX0@Z PROC				; compareItemX, COMDAT

; 42   : 	const BVItem* a = (const BVItem*)va;
; 43   : 	const BVItem* b = (const BVItem*)vb;
; 44   : 	if (a->bmin[0] < b->bmin[0])

	movzx	r8d, WORD PTR [rcx]
	movzx	ecx, WORD PTR [rdx]
	cmp	r8w, cx
	jae	SHORT $LN2@compareIte

; 45   : 		return -1;

	mov	eax, -1

; 47   : 		return 1;
; 48   : 	return 0;
; 49   : }

	ret	0
$LN2@compareIte:

; 46   : 	if (a->bmin[0] > b->bmin[0])

	xor	eax, eax
	cmp	r8w, cx
	seta	al

; 47   : 		return 1;
; 48   : 	return 0;
; 49   : }

	ret	0
?compareItemX@@YAHPEBX0@Z ENDP				; compareItemX
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\recastnavigation\detour\DetourNavMeshBuilder.cpp
;	COMDAT ?compareItemY@@YAHPEBX0@Z
_TEXT	SEGMENT
va$ = 8
vb$ = 16
?compareItemY@@YAHPEBX0@Z PROC				; compareItemY, COMDAT

; 53   : 	const BVItem* a = (const BVItem*)va;
; 54   : 	const BVItem* b = (const BVItem*)vb;
; 55   : 	if (a->bmin[1] < b->bmin[1])

	movzx	r8d, WORD PTR [rcx+2]
	movzx	ecx, WORD PTR [rdx+2]
	cmp	r8w, cx
	jae	SHORT $LN2@compareIte

; 56   : 		return -1;

	mov	eax, -1

; 58   : 		return 1;
; 59   : 	return 0;
; 60   : }

	ret	0
$LN2@compareIte:

; 57   : 	if (a->bmin[1] > b->bmin[1])

	xor	eax, eax
	cmp	r8w, cx
	seta	al

; 58   : 		return 1;
; 59   : 	return 0;
; 60   : }

	ret	0
?compareItemY@@YAHPEBX0@Z ENDP				; compareItemY
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\recastnavigation\detour\DetourNavMeshBuilder.cpp
;	COMDAT ?compareItemZ@@YAHPEBX0@Z
_TEXT	SEGMENT
va$ = 8
vb$ = 16
?compareItemZ@@YAHPEBX0@Z PROC				; compareItemZ, COMDAT

; 64   : 	const BVItem* a = (const BVItem*)va;
; 65   : 	const BVItem* b = (const BVItem*)vb;
; 66   : 	if (a->bmin[2] < b->bmin[2])

	movzx	r8d, WORD PTR [rcx+4]
	movzx	ecx, WORD PTR [rdx+4]
	cmp	r8w, cx
	jae	SHORT $LN2@compareIte

; 67   : 		return -1;

	mov	eax, -1

; 69   : 		return 1;
; 70   : 	return 0;
; 71   : }

	ret	0
$LN2@compareIte:

; 68   : 	if (a->bmin[2] > b->bmin[2])

	xor	eax, eax
	cmp	r8w, cx
	seta	al

; 69   : 		return 1;
; 70   : 	return 0;
; 71   : }

	ret	0
?compareItemZ@@YAHPEBX0@Z ENDP				; compareItemZ
_TEXT	ENDS
END
