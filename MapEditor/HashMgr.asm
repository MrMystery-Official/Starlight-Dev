; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?BiggestSRTHash@HashMgr@@3IA			; HashMgr::BiggestSRTHash
PUBLIC	?BiggestHash@HashMgr@@3_KA			; HashMgr::BiggestHash
?BiggestSRTHash@HashMgr@@3IA DD 01H DUP (?)		; HashMgr::BiggestSRTHash
	ALIGN	8

?BiggestHash@HashMgr@@3_KA DQ 01H DUP (?)		; HashMgr::BiggestHash
_BSS	ENDS
PUBLIC	??$construct_at@_KAEB_K$0A@@std@@YAPEA_KQEA_KAEB_K@Z ; std::construct_at<unsigned __int64,unsigned __int64 const &,0>
PUBLIC	??$_Refancy@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@$0A@@std@@YAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@@Z ; std::_Refancy<PhiveStaticCompound::PhiveStaticCompoundActorLink *,0>
PUBLIC	??$construct@_KAEB_K@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_KAEB_K@Z ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::construct<unsigned __int64,unsigned __int64 const &>
PUBLIC	??$_Construct_in_place@_KAEB_K@std@@YAXAEA_KAEB_K@Z ; std::_Construct_in_place<unsigned __int64,unsigned __int64 const &>
PUBLIC	??$forward@AEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@YAAEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@AEAPEAU12@@Z ; std::forward<PhiveStaticCompound::PhiveStaticCompoundActorLink * &>
PUBLIC	??$_Seek_wrapped@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@AEAPEAU12@@std@@YAXAEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@0@Z ; std::_Seek_wrapped<PhiveStaticCompound::PhiveStaticCompoundActorLink *,PhiveStaticCompound::PhiveStaticCompoundActorLink * &>
PUBLIC	??$_Adl_verify_range@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@@std@@YAXAEBQEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@0@Z ; std::_Adl_verify_range<PhiveStaticCompound::PhiveStaticCompoundActorLink *,PhiveStaticCompound::PhiveStaticCompoundActorLink *>
PUBLIC	??$_Seek_wrapped@PEA_KAEAPEA_K@std@@YAXAEAPEA_K0@Z ; std::_Seek_wrapped<unsigned __int64 *,unsigned __int64 * &>
PUBLIC	?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@QEAAXPEBUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >::_Seek_to
PUBLIC	??$_Emplace_reallocate@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAPEA_KQEA_KAEB_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Emplace_reallocate<unsigned __int64 const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEA_KAEB_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Emplace_back_with_unused_capacity<unsigned __int64 const &>
PUBLIC	??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@AEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@AEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@Z ; std::_Seek_wrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >,PhiveStaticCompound::PhiveStaticCompoundActorLink * &>
PUBLIC	??$_Get_unwrapped@AEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@YA?A_TAEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@Z ; std::_Get_unwrapped<PhiveStaticCompound::PhiveStaticCompoundActorLink * &>
PUBLIC	??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > > >
PUBLIC	??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@std@@AEAPEA_K@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@0@AEAPEA_K@Z ; std::_Seek_wrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned __int64> > >,unsigned __int64 * &>
PUBLIC	??$_Emplace_one_at_back@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEA_KAEB_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Emplace_one_at_back<unsigned __int64 const &>
PUBLIC	??$_Move_unchecked@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@@std@@YAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@00@Z ; std::_Move_unchecked<PhiveStaticCompound::PhiveStaticCompoundActorLink *,PhiveStaticCompound::PhiveStaticCompoundActorLink *>
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@0@AEAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >
PUBLIC	?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@QEBAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >::_Unwrapped
PUBLIC	??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@@std@@YA?A_TAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > > const &>
PUBLIC	??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@@std@@YA?A_TAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > > &>
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@QEAA@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >
PUBLIC	?push_back@?$vector@_KV?$allocator@_K@std@@@std@@QEAAXAEB_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::push_back
PUBLIC	?erase@?$vector@_KV?$allocator@_K@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@0@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::erase
PUBLIC	?erase@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@0@Z ; std::vector<PhiveStaticCompound::PhiveStaticCompoundActorLink,std::allocator<PhiveStaticCompound::PhiveStaticCompoundActorLink> >::erase
PUBLIC	?begin@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@XZ ; std::vector<PhiveStaticCompound::PhiveStaticCompoundActorLink,std::allocator<PhiveStaticCompound::PhiveStaticCompoundActorLink> >::begin
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@QEAA@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >
PUBLIC	?end@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@XZ ; std::vector<PhiveStaticCompound::PhiveStaticCompoundActorLink,std::allocator<PhiveStaticCompound::PhiveStaticCompoundActorLink> >::end
PUBLIC	?Initialize@HashMgr@@YAXXZ			; HashMgr::Initialize
PUBLIC	?GenerateStaticCompoundHash@HashMgr@@YA_K_K00@Z	; HashMgr::GenerateStaticCompoundHash
PUBLIC	?FreeHash@HashMgr@@YAX_K@Z			; HashMgr::FreeHash
PUBLIC	?GetHash@HashMgr@@YA?AUHash@1@XZ		; HashMgr::GetHash
PUBLIC	?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A ; HashMgr::mNewHashes
?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A DB 018H DUP (?) ; HashMgr::mNewHashes
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_reallocate@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAPEA_KQEA_KAEB_K@Z DD imagerel $LN85
	DD	imagerel $LN85+77
	DD	imagerel $unwind$??$_Emplace_reallocate@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAPEA_KQEA_KAEB_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$??$_Emplace_reallocate@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAPEA_KQEA_KAEB_K@Z DD imagerel $LN85+77
	DD	imagerel $LN85+261
	DD	imagerel $chain$2$??$_Emplace_reallocate@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAPEA_KQEA_KAEB_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$??$_Emplace_reallocate@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAPEA_KQEA_KAEB_K@Z DD imagerel $LN85+261
	DD	imagerel $LN85+267
	DD	imagerel $chain$3$??$_Emplace_reallocate@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAPEA_KQEA_KAEB_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Move_unchecked@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@@std@@YAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@00@Z DD imagerel $LN14
	DD	imagerel $LN14+48
	DD	imagerel $unwind$??$_Move_unchecked@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@@std@@YAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@V10@V10@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z DD imagerel ??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@V10@V10@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z
	DD	imagerel ??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@V10@V10@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z+137
	DD	imagerel $unwind$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@V10@V10@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@std@@V<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@0@V10@V10@V<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z DD imagerel ??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@std@@V<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@0@V10@V10@V<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z
	DD	imagerel ??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@std@@V<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@0@V10@V10@V<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z+128
	DD	imagerel $unwind$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@std@@V<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@0@V10@V10@V<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@std@@V<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@0@V10@V10@V<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@Z DD imagerel ??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@std@@V<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@0@V10@V10@V<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@Z
	DD	imagerel ??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@std@@V<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@0@V10@V10@V<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@Z+128
	DD	imagerel $unwind$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@std@@V<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@0@V10@V10@V<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$vector@_KV?$allocator@_K@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@0@Z DD imagerel $LN27
	DD	imagerel $LN27+22
	DD	imagerel $unwind$?erase@?$vector@_KV?$allocator@_K@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?erase@?$vector@_KV?$allocator@_K@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@0@Z DD imagerel $LN27+22
	DD	imagerel $LN27+75
	DD	imagerel $chain$0$?erase@?$vector@_KV?$allocator@_K@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?erase@?$vector@_KV?$allocator@_K@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@0@Z DD imagerel $LN27+75
	DD	imagerel $LN27+89
	DD	imagerel $chain$1$?erase@?$vector@_KV?$allocator@_K@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@0@Z DD imagerel $LN25
	DD	imagerel $LN25+22
	DD	imagerel $unwind$?erase@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?erase@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@0@Z DD imagerel $LN25+22
	DD	imagerel $LN25+75
	DD	imagerel $chain$0$?erase@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?erase@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@0@Z DD imagerel $LN25+75
	DD	imagerel $LN25+89
	DD	imagerel $chain$1$?erase@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__FmNewHashes@HashMgr@@YAXXZ DD imagerel ??__FmNewHashes@HashMgr@@YAXXZ
	DD	imagerel ??__FmNewHashes@HashMgr@@YAXXZ+102
	DD	imagerel $unwind$??__FmNewHashes@HashMgr@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FreeHash@HashMgr@@YAX_K@Z DD imagerel $LN250
	DD	imagerel $LN250+449
	DD	imagerel $unwind$?FreeHash@HashMgr@@YAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetHash@HashMgr@@YA?AUHash@1@XZ DD imagerel $LN12
	DD	imagerel $LN12+111
	DD	imagerel $unwind$?GetHash@HashMgr@@YA?AUHash@1@XZ
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetHash@HashMgr@@YA?AUHash@1@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FreeHash@HashMgr@@YAX_K@Z DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__FmNewHashes@HashMgr@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?erase@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@0@Z DD 021H
	DD	imagerel $LN25
	DD	imagerel $LN25+22
	DD	imagerel $unwind$?erase@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?erase@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@0@Z DD 020521H
	DD	0a7405H
	DD	imagerel $LN25
	DD	imagerel $LN25+22
	DD	imagerel $unwind$?erase@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@0@Z DD 040801H
	DD	060043208H
	DD	030025003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?erase@?$vector@_KV?$allocator@_K@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@0@Z DD 021H
	DD	imagerel $LN27
	DD	imagerel $LN27+22
	DD	imagerel $unwind$?erase@?$vector@_KV?$allocator@_K@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?erase@?$vector@_KV?$allocator@_K@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@0@Z DD 020521H
	DD	0a7405H
	DD	imagerel $LN27
	DD	imagerel $LN27+22
	DD	imagerel $unwind$?erase@?$vector@_KV?$allocator@_K@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$vector@_KV?$allocator@_K@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@0@Z DD 040801H
	DD	060043208H
	DD	030025003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@std@@V<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@0@V10@V10@V<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@Z DD 011219H
	DD	02204H
	DD	imagerel __GSHandlerCheck
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@std@@V<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@0@V10@V10@V<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z DD 011219H
	DD	02204H
	DD	imagerel __GSHandlerCheck
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@V10@V10@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z DD 011219H
	DD	02204H
	DD	imagerel __GSHandlerCheck
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Move_unchecked@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@@std@@YAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@00@Z DD 040a01H
	DD	09340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$??$_Emplace_reallocate@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAPEA_KQEA_KAEB_K@Z DD 021H
	DD	imagerel $LN85
	DD	imagerel $LN85+77
	DD	imagerel $unwind$??$_Emplace_reallocate@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAPEA_KQEA_KAEB_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$??$_Emplace_reallocate@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAPEA_KQEA_KAEB_K@Z DD 062321H
	DD	04e423H
	DD	0c7415H
	DD	0a6405H
	DD	imagerel $LN85
	DD	imagerel $LN85+77
	DD	imagerel $unwind$??$_Emplace_reallocate@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAPEA_KQEA_KAEB_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_reallocate@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAPEA_KQEA_KAEB_K@Z DD 050b01H
	DD	0f007420bH
	DD	05003c005H
	DD	03002H
?mNewHashes$initializer$@HashMgr@@3P6AXXZEA DQ FLAT:??__FmNewHashes@HashMgr@@YAXXZ ; HashMgr::mNewHashes$initializer$
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
;	COMDAT ?GetHash@HashMgr@@YA?AUHash@1@XZ
_TEXT	SEGMENT
Hash$ = 48
__$ReturnAddress$ = 48
?GetHash@HashMgr@@YA?AUHash@1@XZ PROC			; HashMgr::GetHash, COMDAT

; 58   : {

$LN12:
	push	rbx
	sub	rsp, 32					; 00000020H

; 59   : 	/*
; 60   : 	if (Physics && SceneMgr::mStaticCompounds.empty())
; 61   : 	{
; 62   : 		PhiveStaticCompound* StaticCompound = SceneMgr::GetStaticCompoundForPos(glm::vec3(Position.GetX(), Position.GetY(), Position.GetZ()));
; 63   : 
; 64   : 		uint32_t OptimalIndex = 0xFFFFFFFF;
; 65   : 		for (uint64_t Index : StaticCompound->mActorHashMap)
; 66   : 		{
; 67   : 			if (Index == 0)
; 68   : 			{
; 69   : 				OptimalIndex = Index;
; 70   : 				break;
; 71   : 			}
; 72   : 		}
; 73   : 		if (OptimalIndex == 0xFFFFFFFF)
; 74   : 		{
; 75   : 			OptimalIndex = StaticCompound->mActorLinks.size() * 2;
; 76   : 		}
; 77   : 
; 78   : 		uint64_t NewHash = GenerateStaticCompoundHash(BiggestHash++,
; 79   : 			(StaticCompound->mActorLinks.size() + 1) * 2,
; 80   : 			OptimalIndex);
; 81   : 
; 82   : 		StaticCompound->mActorHashMap[OptimalIndex] = NewHash;
; 83   : 
; 84   : 		PhiveStaticCompound::PhiveStaticCompoundActorLink Link;
; 85   : 		Link.mActorHash = NewHash;
; 86   : 		Link.mBaseIndex = 0xFFFFFFFF;
; 87   : 		Link.mEndIndex = 0xFFFFFFFF;
; 88   : 		Link.mCompoundRigidBodyIndex = 0;
; 89   : 		Link.mIsValid = 0;
; 90   : 		Link.mReserve0 = BiggestSRTHash++;
; 91   : 		Link.mReserve1 = 0;
; 92   : 		Link.mReserve2 = 0;
; 93   : 		Link.mReserve3 = 0;
; 94   : 
; 95   : 		StaticCompound->mActorLinks.push_back(Link);
; 96   : 
; 97   : 		return HashMgr::Hash{
; 98   : 			.Hash = Link.mActorHash,
; 99   : 			.SRTHash = Link.mReserve0
; 100  : 		};
; 101  : 	}
; 102  : 	*/
; 103  : 
; 104  : 	uint64_t Hash = BiggestHash++;

	mov	rax, QWORD PTR ?BiggestHash@HashMgr@@3_KA ; HashMgr::BiggestHash
	mov	rbx, rcx
	mov	rdx, rax
	mov	QWORD PTR Hash$[rsp], rax
	inc	rax
	mov	QWORD PTR ?BiggestHash@HashMgr@@3_KA, rax ; HashMgr::BiggestHash
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 781  :         if (_Mylast != _My_data._Myend) {

	mov	rax, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+8
	cmp	rax, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+16
	je	SHORT $LN6@GetHash

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	QWORD PTR [rax], rdx

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

	add	QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+8, 8

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	jmp	SHORT $LN5@GetHash
$LN6@GetHash:

; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	lea	r8, QWORD PTR Hash$[rsp]
	mov	rdx, rax
	call	??$_Emplace_reallocate@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAPEA_KQEA_KAEB_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Emplace_reallocate<unsigned __int64 const &>
	mov	rdx, QWORD PTR Hash$[rsp]
$LN5@GetHash:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 108  : 	return HashMgr::Hash{ Hash, BiggestSRTHash++ };

	mov	ecx, DWORD PTR ?BiggestSRTHash@HashMgr@@3IA ; HashMgr::BiggestSRTHash
	mov	QWORD PTR [rbx], rdx
	mov	DWORD PTR [rbx+8], ecx
	lea	eax, DWORD PTR [rcx+1]
	mov	DWORD PTR ?BiggestSRTHash@HashMgr@@3IA, eax ; HashMgr::BiggestSRTHash
	mov	rax, rbx

; 109  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?GetHash@HashMgr@@YA?AUHash@1@XZ ENDP			; HashMgr::GetHash
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
;	COMDAT ?FreeHash@HashMgr@@YAX_K@Z
_TEXT	SEGMENT
Hash$ = 48
?FreeHash@HashMgr@@YAX_K@Z PROC				; HashMgr::FreeHash, COMDAT

; 40   : {

$LN250:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	rdi, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+8
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 40   : {

	mov	rsi, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	rbx, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A
	mov	rdx, rdi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 6315 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	rbx, rdi
	je	SHORT $LN218@FreeHash
$LL144@FreeHash:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 42   : 		[Hash](uint64_t OldHash) { return OldHash == Hash; }), mNewHashes.end());

	cmp	QWORD PTR [rbx], rsi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 6316 :         if (_Pred(*_UFirst)) {

	je	SHORT $LN218@FreeHash

; 6315 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	rbx, 8
	cmp	rbx, rdx
	jne	SHORT $LL144@FreeHash
$LN218@FreeHash:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2211 :     if (_UFirst != _ULast) {

	cmp	rbx, rdx
	je	SHORT $LN152@FreeHash

; 2212 :         while (++_UFirst != _ULast) {

	lea	rax, QWORD PTR [rbx+8]
	cmp	rax, rdx
	je	SHORT $LN135@FreeHash
	npad	1
$LL134@FreeHash:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 42   : 		[Hash](uint64_t OldHash) { return OldHash == Hash; }), mNewHashes.end());

	mov	rcx, QWORD PTR [rax]
	cmp	rcx, rsi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2213 :             if (!_Pred(*_UFirst)) {

	je	SHORT $LN137@FreeHash

; 2214 :                 *_UNext = _STD move(*_UFirst);

	mov	QWORD PTR [rbx], rcx

; 2215 :                 ++_UNext;

	add	rbx, 8
$LN137@FreeHash:

; 2212 :         while (++_UFirst != _ULast) {

	add	rax, 8
	cmp	rax, rdx
	jne	SHORT $LL134@FreeHash
	mov	rdi, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+8
$LN135@FreeHash:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1749 :         if (_Firstptr != _Lastptr) { // something to do, invalidate iterators

	cmp	rbx, rdx
	je	SHORT $LN152@FreeHash
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	rdi, rdx

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rcx, rbx
	mov	r8, rdi
	call	memmove

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	lea	rax, QWORD PTR [rdi+rbx]
	mov	QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+8, rax
$LN152@FreeHash:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1864 :         return _My_data._Myfirst == _My_data._Mylast;

	mov	r14, QWORD PTR ?mStaticCompounds@SceneMgr@@3V?$vector@VPhiveStaticCompound@@V?$allocator@VPhiveStaticCompound@@@std@@@std@@A+8
	mov	rbp, QWORD PTR ?mStaticCompounds@SceneMgr@@3V?$vector@VPhiveStaticCompound@@V?$allocator@VPhiveStaticCompound@@@std@@@std@@A
	cmp	rbp, r14
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 44   : 	if (SceneMgr::mStaticCompounds.empty())

	je	$LN3@FreeHash
	npad	12
$LL4@FreeHash:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	rdx, QWORD PTR [rbp+19936]
	mov	rbx, QWORD PTR [rbp+19928]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 6315 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	rbx, rdx
	je	SHORT $LN216@FreeHash
$LL38@FreeHash:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 50   : 			[Hash](uint64_t OldHash) { return OldHash == Hash; }), StaticCompound.mActorHashMap.end());

	cmp	QWORD PTR [rbx], rsi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 6316 :         if (_Pred(*_UFirst)) {

	je	SHORT $LN219@FreeHash

; 6315 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	rbx, 8
	cmp	rbx, rdx
	jne	SHORT $LL38@FreeHash
$LN219@FreeHash:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2211 :     if (_UFirst != _ULast) {

	cmp	rbx, rdx
	je	SHORT $LN216@FreeHash

; 2212 :         while (++_UFirst != _ULast) {

	lea	rax, QWORD PTR [rbx+8]
	cmp	rax, rdx
	je	SHORT $LN29@FreeHash
	npad	1
$LL28@FreeHash:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 50   : 			[Hash](uint64_t OldHash) { return OldHash == Hash; }), StaticCompound.mActorHashMap.end());

	mov	rcx, QWORD PTR [rax]
	cmp	rcx, rsi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2213 :             if (!_Pred(*_UFirst)) {

	je	SHORT $LN31@FreeHash

; 2214 :                 *_UNext = _STD move(*_UFirst);

	mov	QWORD PTR [rbx], rcx

; 2215 :                 ++_UNext;

	add	rbx, 8
$LN31@FreeHash:

; 2212 :         while (++_UFirst != _ULast) {

	add	rax, 8
	cmp	rax, rdx
	jne	SHORT $LL28@FreeHash
$LN29@FreeHash:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1749 :         if (_Firstptr != _Lastptr) { // something to do, invalidate iterators

	cmp	rbx, rdx
	je	SHORT $LN216@FreeHash

; 1750 :             _Orphan_range(_Firstptr, _Mylast);
; 1751 : 
; 1752 :             const pointer _Newlast = _STD _Move_unchecked(_Lastptr, _Mylast, _Firstptr);

	mov	rdi, QWORD PTR [rbp+19936]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rcx, rbx
	sub	rdi, rdx
	mov	r8, rdi
	call	memmove

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	lea	rax, QWORD PTR [rdi+rbx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1755 :             _Mylast = _Newlast;

	mov	QWORD PTR [rbp+19936], rax
$LN216@FreeHash:

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	rdx, QWORD PTR [rbp+19912]
	mov	rdi, QWORD PTR [rbp+19904]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 6315 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	rdi, rdx
	je	SHORT $LN217@FreeHash
$LL91@FreeHash:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 53   : 			[Hash](PhiveStaticCompound::PhiveStaticCompoundActorLink& Link) { return Link.mActorHash == Hash; }), StaticCompound.mActorLinks.end());

	cmp	QWORD PTR [rdi+8], rsi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 6316 :         if (_Pred(*_UFirst)) {

	je	SHORT $LN220@FreeHash

; 6315 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	rdi, 32					; 00000020H
	cmp	rdi, rdx
	jne	SHORT $LL91@FreeHash
$LN220@FreeHash:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2211 :     if (_UFirst != _ULast) {

	cmp	rdi, rdx
	je	SHORT $LN217@FreeHash

; 2212 :         while (++_UFirst != _ULast) {

	lea	rax, QWORD PTR [rdi+32]
	cmp	rax, rdx
	je	SHORT $LN82@FreeHash
	npad	3
$LL81@FreeHash:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 53   : 			[Hash](PhiveStaticCompound::PhiveStaticCompoundActorLink& Link) { return Link.mActorHash == Hash; }), StaticCompound.mActorLinks.end());

	cmp	QWORD PTR [rax+8], rsi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2213 :             if (!_Pred(*_UFirst)) {

	je	SHORT $LN84@FreeHash

; 2214 :                 *_UNext = _STD move(*_UFirst);

	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rdi], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rdi+16], xmm1

; 2215 :                 ++_UNext;

	add	rdi, 32					; 00000020H
$LN84@FreeHash:

; 2212 :         while (++_UFirst != _ULast) {

	add	rax, 32					; 00000020H
	cmp	rax, rdx
	jne	SHORT $LL81@FreeHash
$LN82@FreeHash:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1749 :         if (_Firstptr != _Lastptr) { // something to do, invalidate iterators

	cmp	rdi, rdx
	je	SHORT $LN217@FreeHash

; 1750 :             _Orphan_range(_Firstptr, _Mylast);
; 1751 : 
; 1752 :             const pointer _Newlast = _STD _Move_unchecked(_Lastptr, _Mylast, _Firstptr);

	mov	rbx, QWORD PTR [rbp+19912]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rcx, rdi
	sub	rbx, rdx
	mov	r8, rbx
	call	memmove

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	lea	rax, QWORD PTR [rbx+rdi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1755 :             _Mylast = _Newlast;

	mov	QWORD PTR [rbp+19912], rax
$LN217@FreeHash:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 47   : 	for (PhiveStaticCompound& StaticCompound : SceneMgr::mStaticCompounds)

	add	rbp, 20320				; 00004f60H
	cmp	rbp, r14
	jne	$LL4@FreeHash
$LN3@FreeHash:

; 54   : 	}
; 55   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
?FreeHash@HashMgr@@YAX_K@Z ENDP				; HashMgr::FreeHash
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
;	COMDAT ?GenerateStaticCompoundHash@HashMgr@@YA_K_K00@Z
_TEXT	SEGMENT
BaseValue$ = 8
Modulus$ = 16
Output$ = 24
?GenerateStaticCompoundHash@HashMgr@@YA_K_K00@Z PROC	; HashMgr::GenerateStaticCompoundHash, COMDAT

; 32   : uint64_t HashMgr::GenerateStaticCompoundHash(uint64_t BaseValue, uint64_t Modulus, uint64_t Output) {

	mov	r9, rdx

; 33   : 	uint64_t Remainder = BaseValue % Modulus;

	mov	rax, rcx
	xor	edx, edx
	div	r9

; 34   : 	uint64_t Difference = (Output >= Remainder) ? (Output - Remainder) : (Modulus - Remainder + Output);

	mov	rax, r8
	sub	r9, rdx
	sub	rax, rdx
	add	r9, r8
	cmp	r8, rdx
	cmovae	r9, rax

; 35   : 	BaseValue += Difference;

	lea	rax, QWORD PTR [r9+rcx]

; 36   : 	return BaseValue;
; 37   : }

	ret	0
?GenerateStaticCompoundHash@HashMgr@@YA_K_K00@Z ENDP	; HashMgr::GenerateStaticCompoundHash
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
;	COMDAT ??__FmNewHashes@HashMgr@@YAXXZ
text$di	SEGMENT
??__FmNewHashes@HashMgr@@YAXXZ PROC			; HashMgr::`dynamic atexit destructor for 'mNewHashes'', COMDAT

; 18   : std::vector<uint64_t> HashMgr::mNewHashes;

	lea	rcx, OFFSET FLAT:??__FmNewHashes@HashMgr@@YAXXZ ; HashMgr::`dynamic atexit destructor for 'mNewHashes''
	jmp	atexit
??__FmNewHashes@HashMgr@@YAXXZ ENDP			; HashMgr::`dynamic atexit destructor for 'mNewHashes''
text$di	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??__FmNewHashes@HashMgr@@YAXXZ
text$yd	SEGMENT
??__FmNewHashes@HashMgr@@YAXXZ PROC			; HashMgr::`dynamic atexit destructor for 'mNewHashes'', COMDAT
	sub	rsp, 40					; 00000028H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2044 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rcx, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A
	test	rcx, rcx
	je	SHORT $LN6@dynamic

; 2045 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2046 :             _ASAN_VECTOR_REMOVE;
; 2047 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rdx, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+16
	sub	rdx, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	and	rdx, -8

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	rdx, 4096				; 00001000H
	jb	SHORT $LN24@dynamic

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	r8, QWORD PTR [rcx-8]
	add	rdx, 39					; 00000027H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	sub	rcx, r8

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	lea	rax, QWORD PTR [rcx-8]
	cmp	rax, 31
	ja	SHORT $LN21@dynamic

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rcx, r8
$LN24@dynamic:

; 265  :         ::operator delete(_Ptr, _Bytes);

	call	??3@YAXPEAX_K@Z				; operator delete
	xorps	xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 2049 :             _Myfirst = nullptr;

	mov	QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A, 0

; 2050 :             _Mylast  = nullptr;

	movdqu	XMMWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+8, xmm0
$LN6@dynamic:
	add	rsp, 40					; 00000028H
	ret	0
$LN21@dynamic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	call	QWORD PTR __imp__invalid_parameter_noinfo_noreturn
	int	3
$LN30@dynamic:
??__FmNewHashes@HashMgr@@YAXXZ ENDP			; HashMgr::`dynamic atexit destructor for 'mNewHashes''
text$yd	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
;	COMDAT ?Initialize@HashMgr@@YAXXZ
_TEXT	SEGMENT
?Initialize@HashMgr@@YAXXZ PROC				; HashMgr::Initialize, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

	mov	rcx, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 22   : 	BiggestHash = 0;

	xor	eax, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

	cmp	rcx, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+8
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 22   : 	BiggestHash = 0;

	mov	QWORD PTR ?BiggestHash@HashMgr@@3_KA, rax ; HashMgr::BiggestHash

; 23   : 	BiggestSRTHash = 0;

	mov	DWORD PTR ?BiggestSRTHash@HashMgr@@3IA, eax ; HashMgr::BiggestSRTHash
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1766 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

	je	SHORT $LN6@Initialize

; 1767 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1768 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1769 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1770 :             return;
; 1771 :         }
; 1772 : 
; 1773 :         _My_data._Orphan_all();
; 1774 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1775 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1776 :         _Mylast = _Myfirst;

	mov	QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+8, rcx
$LN6@Initialize:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 25   : 	for (Actor& Actor : ActorMgr::GetActors())

	mov	r11, QWORD PTR ?Actors@ActorMgr@@3V?$vector@UActor@@V?$allocator@UActor@@@std@@@std@@A+8
	mov	rdx, QWORD PTR ?Actors@ActorMgr@@3V?$vector@UActor@@V?$allocator@UActor@@@std@@@std@@A
	cmp	rdx, r11
	je	SHORT $LN3@Initialize
	mov	r8, rax
	mov	r9d, eax
	mov	r10d, eax
$LL4@Initialize:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 47   :     return _Left < _Right ? _Right : _Left;

	cmp	rax, QWORD PTR [rdx+40]
	cmovb	r8, QWORD PTR [rdx+40]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 27   : 		BiggestHash = std::max(BiggestHash, Actor.Hash) + 1;

	lea	rax, QWORD PTR [r8+1]
	mov	QWORD PTR ?BiggestHash@HashMgr@@3_KA, rax ; HashMgr::BiggestHash
	mov	r8, rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 47   :     return _Left < _Right ? _Right : _Left;

	cmp	r9d, DWORD PTR [rdx+48]
	cmovb	r10d, DWORD PTR [rdx+48]
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 25   : 	for (Actor& Actor : ActorMgr::GetActors())

	add	rdx, 872				; 00000368H

; 28   : 		BiggestSRTHash = std::max(BiggestSRTHash, Actor.SRTHash) + 1;

	lea	r9d, DWORD PTR [r10+1]
	mov	DWORD PTR ?BiggestSRTHash@HashMgr@@3IA, r9d ; HashMgr::BiggestSRTHash
	mov	r10d, r9d
	cmp	rdx, r11
	jne	SHORT $LL4@Initialize
$LN3@Initialize:

; 29   : 	}
; 30   : }

	ret	0
?Initialize@HashMgr@@YAXXZ ENDP				; HashMgr::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
;	COMDAT ??R<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@QEBA@0@Z
_TEXT	SEGMENT
this$ = 8
OldHash$ = 16
??R<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@QEBA@0@Z PROC ; `HashMgr::FreeHash'::`2'::<lambda_1>::operator(), COMDAT

; 42   : 		[Hash](uint64_t OldHash) { return OldHash == Hash; }), mNewHashes.end());

	cmp	rdx, QWORD PTR [rcx]
	sete	al
	ret	0
??R<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@QEBA@0@Z ENDP ; `HashMgr::FreeHash'::`2'::<lambda_1>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
;	COMDAT ??0<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@QEAA@AEB_K@Z
_TEXT	SEGMENT
this$ = 8
__Hash$ = 16
??0<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@QEAA@AEB_K@Z PROC ; `HashMgr::FreeHash'::`2'::<lambda_1>::<lambda_1>, COMDAT

; 42   : 		[Hash](uint64_t OldHash) { return OldHash == Hash; }), mNewHashes.end());

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	ret	0
??0<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@QEAA@AEB_K@Z ENDP ; `HashMgr::FreeHash'::`2'::<lambda_1>::<lambda_1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
;	COMDAT ??R<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@QEBA@0@Z
_TEXT	SEGMENT
this$ = 8
OldHash$ = 16
??R<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@QEBA@0@Z PROC ; `HashMgr::FreeHash'::`8'::<lambda_2>::operator(), COMDAT

; 50   : 			[Hash](uint64_t OldHash) { return OldHash == Hash; }), StaticCompound.mActorHashMap.end());

	cmp	rdx, QWORD PTR [rcx]
	sete	al
	ret	0
??R<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@QEBA@0@Z ENDP ; `HashMgr::FreeHash'::`8'::<lambda_2>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
;	COMDAT ??0<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@QEAA@AEB_K@Z
_TEXT	SEGMENT
this$ = 8
__Hash$ = 16
??0<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@QEAA@AEB_K@Z PROC ; `HashMgr::FreeHash'::`8'::<lambda_2>::<lambda_2>, COMDAT

; 50   : 			[Hash](uint64_t OldHash) { return OldHash == Hash; }), StaticCompound.mActorHashMap.end());

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	ret	0
??0<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@QEAA@AEB_K@Z ENDP ; `HashMgr::FreeHash'::`8'::<lambda_2>::<lambda_2>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
;	COMDAT ??R<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@QEBA@AEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@Z
_TEXT	SEGMENT
this$ = 8
Link$ = 16
??R<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@QEBA@AEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@Z PROC ; `HashMgr::FreeHash'::`8'::<lambda_3>::operator(), COMDAT

; 53   : 			[Hash](PhiveStaticCompound::PhiveStaticCompoundActorLink& Link) { return Link.mActorHash == Hash; }), StaticCompound.mActorLinks.end());

	mov	rax, QWORD PTR [rcx]
	cmp	QWORD PTR [rdx+8], rax
	sete	al
	ret	0
??R<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@QEBA@AEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@Z ENDP ; `HashMgr::FreeHash'::`8'::<lambda_3>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
;	COMDAT ??0<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@QEAA@AEB_K@Z
_TEXT	SEGMENT
this$ = 8
__Hash$ = 16
??0<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@QEAA@AEB_K@Z PROC ; `HashMgr::FreeHash'::`8'::<lambda_3>::<lambda_3>, COMDAT

; 53   : 			[Hash](PhiveStaticCompound::PhiveStaticCompoundActorLink& Link) { return Link.mActorHash == Hash; }), StaticCompound.mActorLinks.end());

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	ret	0
??0<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@QEAA@AEB_K@Z ENDP ; `HashMgr::FreeHash'::`8'::<lambda_3>::<lambda_3>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?end@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?end@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@XZ PROC ; std::vector<PhiveStaticCompound::PhiveStaticCompoundActorLink,std::allocator<PhiveStaticCompound::PhiveStaticCompoundActorLink> >::end, COMDAT

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR [rdx], rax

; 1805 :         auto& _My_data = _Mypair._Myval2;
; 1806 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

	mov	rax, rdx

; 1807 :     }

	ret	0
?end@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@XZ ENDP ; std::vector<PhiveStaticCompound::PhiveStaticCompoundActorLink,std::allocator<PhiveStaticCompound::PhiveStaticCompoundActorLink> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@QEAA@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEBU_Container_base0@1@@Z
_TEXT	SEGMENT
this$ = 8
__param0$ = 16
__param1$dead$ = 24
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@QEAA@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >, COMDAT

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	QWORD PTR [rcx], rdx
	mov	rax, rcx
	ret	0
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@QEAA@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?begin@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?begin@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@XZ PROC ; std::vector<PhiveStaticCompound::PhiveStaticCompoundActorLink,std::allocator<PhiveStaticCompound::PhiveStaticCompoundActorLink> >::begin, COMDAT

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax

; 1795 :         auto& _My_data = _Mypair._Myval2;
; 1796 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

	mov	rax, rdx

; 1797 :     }

	ret	0
?begin@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@XZ ENDP ; std::vector<PhiveStaticCompound::PhiveStaticCompoundActorLink,std::allocator<PhiveStaticCompound::PhiveStaticCompoundActorLink> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?erase@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
this$ = 64
__$ReturnUdt$ = 72
_First$ = 80
_Last$ = 88
?erase@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@0@Z PROC ; std::vector<PhiveStaticCompound::PhiveStaticCompoundActorLink,std::allocator<PhiveStaticCompound::PhiveStaticCompoundActorLink> >::erase, COMDAT

; 1737 :         is_nothrow_move_assignable_v<value_type>) /* strengthened */ {

$LN25:
	push	rbx
	push	rbp
	push	rsi
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	rsi, rdx
	mov	rbp, rcx

; 1738 :         const pointer _Firstptr = _First._Ptr;
; 1739 :         const pointer _Lastptr  = _Last._Ptr;
; 1740 :         auto& _My_data          = _Mypair._Myval2;
; 1741 :         pointer& _Mylast        = _My_data._Mylast;
; 1742 : 
; 1743 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1744 :         _STL_VERIFY(_First._Getcont() == _STD addressof(_My_data) && _Last._Getcont() == _STD addressof(_My_data)
; 1745 :                         && _Firstptr >= _My_data._Myfirst && _Lastptr >= _Firstptr && _Mylast >= _Lastptr,
; 1746 :             "vector erase iterator outside range");
; 1747 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1748 : 
; 1749 :         if (_Firstptr != _Lastptr) { // something to do, invalidate iterators

	cmp	r8, r9
	je	SHORT $LN20@erase
	mov	QWORD PTR [rsp+80], rdi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rdx, r9
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1752 :             const pointer _Newlast = _STD _Move_unchecked(_Lastptr, _Mylast, _Firstptr);

	mov	rdi, QWORD PTR [rcx+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rcx, rbx
	sub	rdi, r9
	mov	r8, rdi
	call	memmove

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	lea	rcx, QWORD PTR [rdi+rbx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1759 :     }

	mov	rax, rsi
	mov	rdi, QWORD PTR [rsp+80]
	mov	QWORD PTR [rbp+8], rcx

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	QWORD PTR [rsi], rbx

; 1759 :     }

	add	rsp, 32					; 00000020H
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN20@erase:

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	QWORD PTR [rdx], rbx

; 1759 :     }

	mov	rax, rsi
	add	rsp, 32					; 00000020H
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
?erase@?$vector@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@V?$allocator@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@2@0@Z ENDP ; std::vector<PhiveStaticCompound::PhiveStaticCompoundActorLink,std::allocator<PhiveStaticCompound::PhiveStaticCompoundActorLink> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?erase@?$vector@_KV?$allocator@_K@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@0@Z
_TEXT	SEGMENT
this$ = 64
__$ReturnUdt$ = 72
_First$ = 80
_Last$ = 88
?erase@?$vector@_KV?$allocator@_K@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@0@Z PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::erase, COMDAT

; 1737 :         is_nothrow_move_assignable_v<value_type>) /* strengthened */ {

$LN27:
	push	rbx
	push	rbp
	push	rsi
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	rsi, rdx
	mov	rbp, rcx

; 1738 :         const pointer _Firstptr = _First._Ptr;
; 1739 :         const pointer _Lastptr  = _Last._Ptr;
; 1740 :         auto& _My_data          = _Mypair._Myval2;
; 1741 :         pointer& _Mylast        = _My_data._Mylast;
; 1742 : 
; 1743 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1744 :         _STL_VERIFY(_First._Getcont() == _STD addressof(_My_data) && _Last._Getcont() == _STD addressof(_My_data)
; 1745 :                         && _Firstptr >= _My_data._Myfirst && _Lastptr >= _Firstptr && _Mylast >= _Lastptr,
; 1746 :             "vector erase iterator outside range");
; 1747 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1748 : 
; 1749 :         if (_Firstptr != _Lastptr) { // something to do, invalidate iterators

	cmp	r8, r9
	je	SHORT $LN22@erase
	mov	QWORD PTR [rsp+80], rdi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rdx, r9
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1752 :             const pointer _Newlast = _STD _Move_unchecked(_Lastptr, _Mylast, _Firstptr);

	mov	rdi, QWORD PTR [rcx+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rcx, rbx
	sub	rdi, r9
	mov	r8, rdi
	call	memmove

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	lea	rcx, QWORD PTR [rdi+rbx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 1759 :     }

	mov	rax, rsi
	mov	rdi, QWORD PTR [rsp+80]
	mov	QWORD PTR [rbp+8], rcx

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	QWORD PTR [rsi], rbx

; 1759 :     }

	add	rsp, 32					; 00000020H
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN22@erase:

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	QWORD PTR [rdx], rbx

; 1759 :     }

	mov	rax, rsi
	add	rsp, 32					; 00000020H
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
?erase@?$vector@_KV?$allocator@_K@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@2@0@Z ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?push_back@?$vector@_KV?$allocator@_K@std@@@std@@QEAAXAEB_K@Z
_TEXT	SEGMENT
this$dead$ = 8
_Val$ = 16
?push_back@?$vector@_KV?$allocator@_K@std@@@std@@QEAAXAEB_K@Z PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::push_back, COMDAT

; 872  :     _CONSTEXPR20 void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee

	mov	r8, rdx

; 781  :         if (_Mylast != _My_data._Myend) {

	mov	rdx, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+8
	cmp	rdx, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+16
	je	SHORT $LN4@push_back

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rdx], rax

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;
; 806  :         ++_Mylast;

	add	QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+8, 8

; 873  :         _Emplace_one_at_back(_Val);
; 874  :     }

	ret	0
$LN4@push_back:

; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	jmp	??$_Emplace_reallocate@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAPEA_KQEA_KAEB_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Emplace_reallocate<unsigned __int64 const &>
?push_back@?$vector@_KV?$allocator@_K@std@@@std@@QEAAXAEB_K@Z ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@QEAA@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEBU_Container_base0@1@@Z
_TEXT	SEGMENT
this$ = 8
_Parg$ = 16
_Pvector$dead$ = 24
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@QEAA@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >, COMDAT

; 43   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

	mov	QWORD PTR [rcx], rdx

; 44   :         this->_Adopt(_Pvector);
; 45   :     }

	mov	rax, rcx
	ret	0
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@QEAA@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@std@@V<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@0@V10@V10@V<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@Z
_TEXT	SEGMENT
__$ArrayPad$ = 0
__$ReturnUdt$ = 32
_First$ = 40
_Last$ = 48
_Pred$ = 56
??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@std@@V<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@0@V10@V10@V<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@Z PROC ; std::remove_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned __int64> > >,`HashMgr::FreeHash'::`2'::<lambda_1> >, COMDAT

; 2204 : _NODISCARD_REMOVE_ALG _CONSTEXPR20 _FwdIt remove_if(_FwdIt _First, const _FwdIt _Last, _Pr _Pred) {

	sub	rsp, 24
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rax, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 6315 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	rdx, r8
	je	SHORT $LN27@remove_if
	npad	6
$LL12@remove_if:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 42   : 		[Hash](uint64_t OldHash) { return OldHash == Hash; }), mNewHashes.end());

	cmp	QWORD PTR [rdx], r9
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 6316 :         if (_Pred(*_UFirst)) {

	je	SHORT $LN21@remove_if

; 6315 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	rdx, 8
	cmp	rdx, r8
	jne	SHORT $LL12@remove_if
$LN21@remove_if:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2211 :     if (_UFirst != _ULast) {

	cmp	rdx, r8
	je	SHORT $LN27@remove_if

; 2212 :         while (++_UFirst != _ULast) {

	lea	rcx, QWORD PTR [rdx+8]
	cmp	rcx, r8
	je	SHORT $LN28@remove_if
	npad	4
$LL2@remove_if:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 42   : 		[Hash](uint64_t OldHash) { return OldHash == Hash; }), mNewHashes.end());

	mov	r10, QWORD PTR [rcx]
	cmp	r10, r9
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2213 :             if (!_Pred(*_UFirst)) {

	je	SHORT $LN5@remove_if

; 2214 :                 *_UNext = _STD move(*_UFirst);

	mov	QWORD PTR [rdx], r10

; 2215 :                 ++_UNext;

	add	rdx, 8
$LN5@remove_if:

; 2212 :         while (++_UFirst != _ULast) {

	add	rcx, 8
	cmp	rcx, r8
	jne	SHORT $LL2@remove_if
$LN28@remove_if:

; 2222 : }

	mov	QWORD PTR [rax], rdx
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 24
	ret	0
$LN27@remove_if:

; 2216 :             }
; 2217 :         }
; 2218 :     }
; 2219 : 
; 2220 :     _Seek_wrapped(_First, _UNext);
; 2221 :     return _First;

	mov	QWORD PTR [rcx], rdx

; 2222 : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 24
	ret	0
??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@std@@V<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@0@V10@V10@V<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@Z ENDP ; std::remove_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned __int64> > >,`HashMgr::FreeHash'::`2'::<lambda_1> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Pass_fn@V<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?A_PAEAV<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
_Func$ = 16
??$_Pass_fn@V<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?A_PAEAV<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@Z PROC ; std::_Pass_fn<`HashMgr::FreeHash'::`2'::<lambda_1> >, COMDAT

; 556  :     constexpr bool _Pass_by_value = conjunction_v<bool_constant<sizeof(_Fn) <= sizeof(void*)>,
; 557  :         is_trivially_copy_constructible<_Fn>, is_trivially_destructible<_Fn>>;
; 558  :     if constexpr (_Pass_by_value) {
; 559  :         return _Func;

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx

; 560  :     } else {
; 561  :         return _Ref_fn<_Fn>{_Func}; // pass functor by "reference"
; 562  :     }
; 563  : }

	ret	0
??$_Pass_fn@V<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?A_PAEAV<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@Z ENDP ; std::_Pass_fn<`HashMgr::FreeHash'::`2'::<lambda_1> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@std@@V<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@0@V10@V10@V<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z
_TEXT	SEGMENT
__$ArrayPad$ = 0
__$ReturnUdt$ = 32
_First$ = 40
_Last$ = 48
_Pred$ = 56
??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@std@@V<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@0@V10@V10@V<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z PROC ; std::remove_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned __int64> > >,`HashMgr::FreeHash'::`8'::<lambda_2> >, COMDAT

; 2204 : _NODISCARD_REMOVE_ALG _CONSTEXPR20 _FwdIt remove_if(_FwdIt _First, const _FwdIt _Last, _Pr _Pred) {

	sub	rsp, 24
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rax, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 6315 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	rdx, r8
	je	SHORT $LN27@remove_if
	npad	6
$LL12@remove_if:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 50   : 			[Hash](uint64_t OldHash) { return OldHash == Hash; }), StaticCompound.mActorHashMap.end());

	cmp	QWORD PTR [rdx], r9
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 6316 :         if (_Pred(*_UFirst)) {

	je	SHORT $LN21@remove_if

; 6315 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	rdx, 8
	cmp	rdx, r8
	jne	SHORT $LL12@remove_if
$LN21@remove_if:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2211 :     if (_UFirst != _ULast) {

	cmp	rdx, r8
	je	SHORT $LN27@remove_if

; 2212 :         while (++_UFirst != _ULast) {

	lea	rcx, QWORD PTR [rdx+8]
	cmp	rcx, r8
	je	SHORT $LN28@remove_if
	npad	4
$LL2@remove_if:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 50   : 			[Hash](uint64_t OldHash) { return OldHash == Hash; }), StaticCompound.mActorHashMap.end());

	mov	r10, QWORD PTR [rcx]
	cmp	r10, r9
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2213 :             if (!_Pred(*_UFirst)) {

	je	SHORT $LN5@remove_if

; 2214 :                 *_UNext = _STD move(*_UFirst);

	mov	QWORD PTR [rdx], r10

; 2215 :                 ++_UNext;

	add	rdx, 8
$LN5@remove_if:

; 2212 :         while (++_UFirst != _ULast) {

	add	rcx, 8
	cmp	rcx, r8
	jne	SHORT $LL2@remove_if
$LN28@remove_if:

; 2222 : }

	mov	QWORD PTR [rax], rdx
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 24
	ret	0
$LN27@remove_if:

; 2216 :             }
; 2217 :         }
; 2218 :     }
; 2219 : 
; 2220 :     _Seek_wrapped(_First, _UNext);
; 2221 :     return _First;

	mov	QWORD PTR [rcx], rdx

; 2222 : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 24
	ret	0
??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@std@@V<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@0@V10@V10@V<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z ENDP ; std::remove_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned __int64> > >,`HashMgr::FreeHash'::`8'::<lambda_2> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Pass_fn@V<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?A_PAEAV<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
_Func$ = 16
??$_Pass_fn@V<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?A_PAEAV<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z PROC ; std::_Pass_fn<`HashMgr::FreeHash'::`8'::<lambda_2> >, COMDAT

; 556  :     constexpr bool _Pass_by_value = conjunction_v<bool_constant<sizeof(_Fn) <= sizeof(void*)>,
; 557  :         is_trivially_copy_constructible<_Fn>, is_trivially_destructible<_Fn>>;
; 558  :     if constexpr (_Pass_by_value) {
; 559  :         return _Func;

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx

; 560  :     } else {
; 561  :         return _Ref_fn<_Fn>{_Func}; // pass functor by "reference"
; 562  :     }
; 563  : }

	ret	0
??$_Pass_fn@V<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?A_PAEAV<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z ENDP ; std::_Pass_fn<`HashMgr::FreeHash'::`8'::<lambda_2> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@V10@V10@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z
_TEXT	SEGMENT
__$ArrayPad$ = 0
__$ReturnUdt$ = 32
_First$ = 40
_Last$ = 48
_Pred$ = 56
??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@V10@V10@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z PROC ; std::remove_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >,`HashMgr::FreeHash'::`8'::<lambda_3> >, COMDAT

; 2204 : _NODISCARD_REMOVE_ALG _CONSTEXPR20 _FwdIt remove_if(_FwdIt _First, const _FwdIt _Last, _Pr _Pred) {

	sub	rsp, 24
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rax, rcx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 6315 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	rdx, r8
	je	SHORT $LN27@remove_if
	npad	6
$LL12@remove_if:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 53   : 			[Hash](PhiveStaticCompound::PhiveStaticCompoundActorLink& Link) { return Link.mActorHash == Hash; }), StaticCompound.mActorLinks.end());

	cmp	QWORD PTR [rdx+8], r9
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 6316 :         if (_Pred(*_UFirst)) {

	je	SHORT $LN21@remove_if

; 6315 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	rdx, 32					; 00000020H
	cmp	rdx, r8
	jne	SHORT $LL12@remove_if
$LN21@remove_if:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2211 :     if (_UFirst != _ULast) {

	cmp	rdx, r8
	je	SHORT $LN27@remove_if

; 2212 :         while (++_UFirst != _ULast) {

	lea	rcx, QWORD PTR [rdx+32]
	cmp	rcx, r8
	je	SHORT $LN28@remove_if
	npad	3
$LL2@remove_if:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 53   : 			[Hash](PhiveStaticCompound::PhiveStaticCompoundActorLink& Link) { return Link.mActorHash == Hash; }), StaticCompound.mActorLinks.end());

	cmp	QWORD PTR [rcx+8], r9
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 2213 :             if (!_Pred(*_UFirst)) {

	je	SHORT $LN5@remove_if

; 2214 :                 *_UNext = _STD move(*_UFirst);

	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx+16], xmm1

; 2215 :                 ++_UNext;

	add	rdx, 32					; 00000020H
$LN5@remove_if:

; 2212 :         while (++_UFirst != _ULast) {

	add	rcx, 32					; 00000020H
	cmp	rcx, r8
	jne	SHORT $LL2@remove_if
$LN28@remove_if:

; 2222 : }

	mov	QWORD PTR [rax], rdx
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 24
	ret	0
$LN27@remove_if:

; 2216 :             }
; 2217 :         }
; 2218 :     }
; 2219 : 
; 2220 :     _Seek_wrapped(_First, _UNext);
; 2221 :     return _First;

	mov	QWORD PTR [rcx], rdx

; 2222 : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 24
	ret	0
??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@V10@V10@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z ENDP ; std::remove_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >,`HashMgr::FreeHash'::`8'::<lambda_3> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@@std@@YA?A_TAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
_It$ = 8
??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@@std@@YA?A_TAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > > &>, COMDAT

; 1156 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1157 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1158 :         return _It + 0;
; 1159 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1160 :         return static_cast<_Iter&&>(_It)._Unwrapped();

	mov	rax, QWORD PTR [rcx]

; 1161 :     } else {
; 1162 :         return static_cast<_Iter&&>(_It);
; 1163 :     }
; 1164 : }

	ret	0
??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@@std@@YA?A_TAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > > &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@@std@@YA?A_TAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
_It$ = 8
??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@@std@@YA?A_TAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > > const &>, COMDAT

; 1156 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1157 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1158 :         return _It + 0;
; 1159 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1160 :         return static_cast<_Iter&&>(_It)._Unwrapped();

	mov	rax, QWORD PTR [rcx]

; 1161 :     } else {
; 1162 :         return static_cast<_Iter&&>(_It);
; 1163 :     }
; 1164 : }

	ret	0
??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@@std@@YA?A_TAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > > const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@QEBAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@XZ
_TEXT	SEGMENT
this$ = 8
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@QEBAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >::_Unwrapped, COMDAT

; 342  :         return _Unfancy(this->_Ptr);

	mov	rax, QWORD PTR [rcx]

; 343  :     }

	ret	0
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@QEBAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Pass_fn@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?A_PAEAV<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
_Func$ = 16
??$_Pass_fn@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?A_PAEAV<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z PROC ; std::_Pass_fn<`HashMgr::FreeHash'::`8'::<lambda_3> >, COMDAT

; 556  :     constexpr bool _Pass_by_value = conjunction_v<bool_constant<sizeof(_Fn) <= sizeof(void*)>,
; 557  :         is_trivially_copy_constructible<_Fn>, is_trivially_destructible<_Fn>>;
; 558  :     if constexpr (_Pass_by_value) {
; 559  :         return _Func;

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx

; 560  :     } else {
; 561  :         return _Ref_fn<_Fn>{_Func}; // pass functor by "reference"
; 562  :     }
; 563  : }

	ret	0
??$_Pass_fn@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YA?A_PAEAV<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z ENDP ; std::_Pass_fn<`HashMgr::FreeHash'::`8'::<lambda_3> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@0@AEAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >, COMDAT

; 1607 :     return __builtin_addressof(_Val);

	mov	rax, rcx

; 1608 : }

	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@YAPEAV?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@0@AEAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Move_unchecked@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@@std@@YAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@00@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
??$_Move_unchecked@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@@std@@YAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@00@Z PROC ; std::_Move_unchecked<PhiveStaticCompound::PhiveStaticCompoundActorLink *,PhiveStaticCompound::PhiveStaticCompoundActorLink *>, COMDAT

; 4886 : _CONSTEXPR20 _OutIt _Move_unchecked(_InIt _First, _InIt _Last, _OutIt _Dest) {

$LN14:
	mov	QWORD PTR [rsp+32], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, r8

; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	rbx, rcx

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rdx, rcx
	mov	r8, rbx
	mov	rcx, rdi
	call	memmove

; 4535 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4536 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	lea	rax, QWORD PTR [rdi+rbx]

; 4887 :     // move [_First, _Last) to [_Dest, ...)
; 4888 :     // note: _Move_unchecked has callers other than the move family
; 4889 :     if constexpr (_Iter_move_cat<_InIt, _OutIt>::_Bitcopy_assignable) {
; 4890 : #if _HAS_CXX20
; 4891 :         if (!_STD is_constant_evaluated())
; 4892 : #endif // _HAS_CXX20
; 4893 :         {
; 4894 :             return _Copy_memmove(_First, _Last, _Dest);
; 4895 :         }
; 4896 :     }
; 4897 : 
; 4898 :     for (; _First != _Last; ++_Dest, (void) ++_First) {
; 4899 :         *_Dest = _STD move(*_First);
; 4900 :     }
; 4901 : 
; 4902 :     return _Dest;
; 4903 : }

	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Move_unchecked@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@@std@@YAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@00@Z ENDP ; std::_Move_unchecked<PhiveStaticCompound::PhiveStaticCompoundActorLink *,PhiveStaticCompound::PhiveStaticCompoundActorLink *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_one_at_back@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEA_KAEB_K@Z
_TEXT	SEGMENT
this$dead$ = 8
<_Val_0>$ = 16
??$_Emplace_one_at_back@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEA_KAEB_K@Z PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Emplace_one_at_back<unsigned __int64 const &>, COMDAT

; 776  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

	mov	r8, rdx

; 777  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 778  :         auto& _My_data   = _Mypair._Myval2;
; 779  :         pointer& _Mylast = _My_data._Mylast;
; 780  : 
; 781  :         if (_Mylast != _My_data._Myend) {

	mov	rdx, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+8
	cmp	rdx, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+16
	je	SHORT $LN2@Emplace_on

; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rdx], rax

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;

	mov	rax, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+8

; 806  :         ++_Mylast;

	lea	rcx, QWORD PTR [rax+8]
	mov	QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+8, rcx

; 786  :     }

	ret	0
$LN2@Emplace_on:

; 782  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);
; 783  :         }
; 784  : 
; 785  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	jmp	??$_Emplace_reallocate@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAPEA_KQEA_KAEB_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Emplace_reallocate<unsigned __int64 const &>
??$_Emplace_one_at_back@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEA_KAEB_K@Z ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Emplace_one_at_back<unsigned __int64 const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$find_if@PEA_KV<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@std@@YAPEA_KPEA_KQEA_KV<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
_Pred$ = 24
??$find_if@PEA_KV<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@std@@YAPEA_KPEA_KQEA_KV<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@Z PROC ; std::find_if<unsigned __int64 *,`HashMgr::FreeHash'::`2'::<lambda_1> >, COMDAT

; 6312 :     _Adl_verify_range(_First, _Last);
; 6313 :     auto _UFirst      = _Get_unwrapped(_First);
; 6314 :     const auto _ULast = _Get_unwrapped(_Last);
; 6315 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	rcx, rdx
	je	SHORT $LN15@find_if
$LL4@find_if:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 42   : 		[Hash](uint64_t OldHash) { return OldHash == Hash; }), mNewHashes.end());

	cmp	QWORD PTR [rcx], r8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 6316 :         if (_Pred(*_UFirst)) {

	je	SHORT $LN15@find_if

; 6312 :     _Adl_verify_range(_First, _Last);
; 6313 :     auto _UFirst      = _Get_unwrapped(_First);
; 6314 :     const auto _ULast = _Get_unwrapped(_Last);
; 6315 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	rcx, 8
	cmp	rcx, rdx
	jne	SHORT $LL4@find_if
$LN15@find_if:

; 6317 :             break;
; 6318 :         }
; 6319 :     }
; 6320 : 
; 6321 :     _Seek_wrapped(_First, _UFirst);
; 6322 :     return _First;
; 6323 : }

	mov	rax, rcx
	ret	0
??$find_if@PEA_KV<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@std@@YAPEA_KPEA_KQEA_KV<lambda_1>@?1??FreeHash@HashMgr@@YAX_K@Z@@Z ENDP ; std::find_if<unsigned __int64 *,`HashMgr::FreeHash'::`2'::<lambda_1> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@std@@AEAPEA_K@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@0@AEAPEA_K@Z
_TEXT	SEGMENT
_It$ = 8
_UIt$ = 16
??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@std@@AEAPEA_K@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@0@AEAPEA_K@Z PROC ; std::_Seek_wrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned __int64> > >,unsigned __int64 * &>, COMDAT

; 1256 :     if constexpr (_Wrapped_seekable_v<_Iter, _UIter>) {
; 1257 :         _It._Seek_to(_STD forward<_UIter>(_UIt));

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 1258 :     } else {
; 1259 :         _It = _STD forward<_UIter>(_UIt);
; 1260 :     }
; 1261 : }

	ret	0
??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@std@@AEAPEA_K@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@_K@std@@@std@@@0@AEAPEA_K@Z ENDP ; std::_Seek_wrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned __int64> > >,unsigned __int64 * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$find_if@PEA_KV<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YAPEA_KPEA_KQEA_KV<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
_Pred$ = 24
??$find_if@PEA_KV<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YAPEA_KPEA_KQEA_KV<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z PROC ; std::find_if<unsigned __int64 *,`HashMgr::FreeHash'::`8'::<lambda_2> >, COMDAT

; 6312 :     _Adl_verify_range(_First, _Last);
; 6313 :     auto _UFirst      = _Get_unwrapped(_First);
; 6314 :     const auto _ULast = _Get_unwrapped(_Last);
; 6315 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	rcx, rdx
	je	SHORT $LN15@find_if
$LL4@find_if:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 50   : 			[Hash](uint64_t OldHash) { return OldHash == Hash; }), StaticCompound.mActorHashMap.end());

	cmp	QWORD PTR [rcx], r8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 6316 :         if (_Pred(*_UFirst)) {

	je	SHORT $LN15@find_if

; 6312 :     _Adl_verify_range(_First, _Last);
; 6313 :     auto _UFirst      = _Get_unwrapped(_First);
; 6314 :     const auto _ULast = _Get_unwrapped(_Last);
; 6315 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	rcx, 8
	cmp	rcx, rdx
	jne	SHORT $LL4@find_if
$LN15@find_if:

; 6317 :             break;
; 6318 :         }
; 6319 :     }
; 6320 : 
; 6321 :     _Seek_wrapped(_First, _UFirst);
; 6322 :     return _First;
; 6323 : }

	mov	rax, rcx
	ret	0
??$find_if@PEA_KV<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YAPEA_KPEA_KQEA_KV<lambda_2>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z ENDP ; std::find_if<unsigned __int64 *,`HashMgr::FreeHash'::`8'::<lambda_2> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
_First$dead$ = 8
_Last$dead$ = 16
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > > >, COMDAT

; 1133 :     // check that [_First, _Last) forms an iterator range
; 1134 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1135 :         _Verify_range(_First, _Last);
; 1136 :     }
; 1137 : }

	ret	0
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$find_if@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@QEAU12@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
_Pred$ = 24
??$find_if@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@QEAU12@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z PROC ; std::find_if<PhiveStaticCompound::PhiveStaticCompoundActorLink *,`HashMgr::FreeHash'::`8'::<lambda_3> >, COMDAT

; 6312 :     _Adl_verify_range(_First, _Last);
; 6313 :     auto _UFirst      = _Get_unwrapped(_First);
; 6314 :     const auto _ULast = _Get_unwrapped(_Last);
; 6315 :     for (; _UFirst != _ULast; ++_UFirst) {

	cmp	rcx, rdx
	je	SHORT $LN15@find_if
$LL4@find_if:
; File H:\Paul\switchemulator\Zelda TotK\MapEditorV4\OldVersion\MapEditor\HashMgr.cpp

; 53   : 			[Hash](PhiveStaticCompound::PhiveStaticCompoundActorLink& Link) { return Link.mActorHash == Hash; }), StaticCompound.mActorLinks.end());

	cmp	QWORD PTR [rcx+8], r8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 6316 :         if (_Pred(*_UFirst)) {

	je	SHORT $LN15@find_if

; 6312 :     _Adl_verify_range(_First, _Last);
; 6313 :     auto _UFirst      = _Get_unwrapped(_First);
; 6314 :     const auto _ULast = _Get_unwrapped(_Last);
; 6315 :     for (; _UFirst != _ULast; ++_UFirst) {

	add	rcx, 32					; 00000020H
	cmp	rcx, rdx
	jne	SHORT $LL4@find_if
$LN15@find_if:

; 6317 :             break;
; 6318 :         }
; 6319 :     }
; 6320 : 
; 6321 :     _Seek_wrapped(_First, _UFirst);
; 6322 :     return _First;
; 6323 : }

	mov	rax, rcx
	ret	0
??$find_if@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@std@@YAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@QEAU12@V<lambda_3>@?7??FreeHash@HashMgr@@YAX_K@Z@@Z ENDP ; std::find_if<PhiveStaticCompound::PhiveStaticCompoundActorLink *,`HashMgr::FreeHash'::`8'::<lambda_3> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Get_unwrapped@AEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@YA?A_TAEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@Z
_TEXT	SEGMENT
_It$ = 8
??$_Get_unwrapped@AEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@YA?A_TAEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@Z PROC ; std::_Get_unwrapped<PhiveStaticCompound::PhiveStaticCompoundActorLink * &>, COMDAT

; 1156 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1157 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1158 :         return _It + 0;

	mov	rax, QWORD PTR [rcx]

; 1159 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1160 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1161 :     } else {
; 1162 :         return static_cast<_Iter&&>(_It);
; 1163 :     }
; 1164 : }

	ret	0
??$_Get_unwrapped@AEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@YA?A_TAEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@Z ENDP ; std::_Get_unwrapped<PhiveStaticCompound::PhiveStaticCompoundActorLink * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@AEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@AEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@Z
_TEXT	SEGMENT
_It$ = 8
_UIt$ = 16
??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@AEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@AEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@Z PROC ; std::_Seek_wrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >,PhiveStaticCompound::PhiveStaticCompoundActorLink * &>, COMDAT

; 1256 :     if constexpr (_Wrapped_seekable_v<_Iter, _UIter>) {
; 1257 :         _It._Seek_to(_STD forward<_UIter>(_UIt));

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 1258 :     } else {
; 1259 :         _It = _STD forward<_UIter>(_UIt);
; 1260 :     }
; 1261 : }

	ret	0
??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@AEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@0@AEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@Z ENDP ; std::_Seek_wrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >,PhiveStaticCompound::PhiveStaticCompoundActorLink * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEA_KAEB_K@Z
_TEXT	SEGMENT
this$dead$ = 8
<_Val_0>$ = 16
??$_Emplace_back_with_unused_capacity@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEA_KAEB_K@Z PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Emplace_back_with_unused_capacity<unsigned __int64 const &>, COMDAT

; 790  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 791  :         auto& _My_data   = _Mypair._Myval2;
; 792  :         pointer& _Mylast = _My_data._Mylast;
; 793  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 794  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 795  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 796  :             _ASAN_VECTOR_MODIFY(1);
; 797  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rax, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+8
	mov	rcx, QWORD PTR [rdx]
	mov	QWORD PTR [rax], rcx

; 798  :         } else {
; 799  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 800  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 801  :             _ASAN_VECTOR_RELEASE_GUARD;
; 802  :         }
; 803  : 
; 804  :         _Orphan_range(_Mylast, _Mylast);
; 805  :         _Ty& _Result = *_Mylast;

	mov	rax, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+8

; 806  :         ++_Mylast;

	lea	rcx, QWORD PTR [rax+8]
	mov	QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+8, rcx

; 807  : 
; 808  :         return _Result;
; 809  :     }

	ret	0
??$_Emplace_back_with_unused_capacity@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEA_KAEB_K@Z ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Emplace_back_with_unused_capacity<unsigned __int64 const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ??$_Emplace_reallocate@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAPEA_KQEA_KAEB_K@Z
_TEXT	SEGMENT
this$dead$ = 80
_Whereptr$ = 88
<_Val_0>$ = 96
??$_Emplace_reallocate@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAPEA_KQEA_KAEB_K@Z PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Emplace_reallocate<unsigned __int64 const &>, COMDAT

; 812  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

$LN85:
	push	rbx
	push	rbp
	push	r12
	push	r15
	sub	rsp, 40					; 00000028H

; 813  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 814  :         _Alty& _Al        = _Getal();
; 815  :         auto& _My_data    = _Mypair._Myval2;
; 816  :         pointer& _Myfirst = _My_data._Myfirst;
; 817  :         pointer& _Mylast  = _My_data._Mylast;
; 818  : 
; 819  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 820  : 
; 821  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);
; 822  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+8
	mov	r15, rdx
	mov	rdx, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A
	mov	rbp, r15
	sub	rbp, rdx
	sub	rax, rdx
	sar	rbp, 3

; 823  : 
; 824  :         if (_Oldsize == max_size()) {

	mov	rbx, 2305843009213693951		; 1fffffffffffffffH
	sar	rax, 3
	mov	r12, r8
	cmp	rax, rbx
	je	$LN83@Emplace_re

; 1879 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rcx, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+16
	sub	rcx, rdx
	mov	QWORD PTR [rsp+80], rsi
	sar	rcx, 3

; 826  :         }
; 827  : 
; 828  :         const size_type _Newsize     = _Oldsize + 1;

	lea	rsi, QWORD PTR [rax+1]

; 1966 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	rdx, rcx
	mov	QWORD PTR [rsp+96], rdi
	shr	rdx, 1
	mov	rax, rbx
	sub	rax, rdx
	mov	QWORD PTR [rsp+32], r14
	cmp	rcx, rax
	ja	SHORT $LN13@Emplace_re

; 1967 :             return _Max; // geometric growth would overflow
; 1968 :         }
; 1969 : 
; 1970 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	rbx, QWORD PTR [rdx+rcx]

; 1971 : 
; 1972 :         if (_Geometric < _Newsize) {

	cmp	rbx, rsi
	cmovb	rbx, rsi
$LN13@Emplace_re:

; 829  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);
; 830  : 
; 831  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	rdx, rbx
	call	?allocate@?$allocator@_K@std@@QEAAPEA_K_K@Z ; std::allocator<unsigned __int64>::allocate

; 832  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;
; 833  :         pointer _Constructed_first      = _Constructed_last;
; 834  : 
; 835  :         _TRY_BEGIN
; 836  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR [r12]
	mov	rdi, rax
	mov	QWORD PTR [rax+rbp*8], rcx

; 837  :         _Constructed_first = _Newvec + _Whereoff;
; 838  : 
; 839  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	rcx, rax
	mov	r8, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+8
	mov	rdx, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A
	lea	r14, QWORD PTR [rax+rbp*8]
	cmp	r15, r8
	jne	SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	r8, rdx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 845  :         } else { // provide basic guarantee

	jmp	SHORT $LN81@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	r8, r15
	sub	r8, rdx

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	call	memmove
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 1932 :     const auto _ULast = _Get_unwrapped(_Last);

	mov	r8, QWORD PTR ?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A+8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	lea	rcx, QWORD PTR [r14+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 4533 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	sub	r8, r15

; 4534 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rdx, r15
$LN81@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector

; 848  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	call	memmove

; 849  :         }
; 850  :         _CATCH_ALL
; 851  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 852  :         _Al.deallocate(_Newvec, _Newcapacity);
; 853  :         _RERAISE;
; 854  :         _CATCH_END
; 855  : 
; 856  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, rbx
	lea	rcx, OFFSET FLAT:?mNewHashes@HashMgr@@3V?$vector@_KV?$allocator@_K@std@@@std@@A ; HashMgr::mNewHashes
	mov	r8, rsi
	mov	rdx, rdi
	call	?_Change_array@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXQEA_K_K1@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Change_array

; 857  :         return _Newvec + _Whereoff;

	mov	rdi, QWORD PTR [rsp+96]
	mov	rax, r14
	mov	r14, QWORD PTR [rsp+32]
	mov	rsi, QWORD PTR [rsp+80]

; 858  :     }

	add	rsp, 40					; 00000028H
	pop	r15
	pop	r12
	pop	rbp
	pop	rbx
	ret	0
$LN83@Emplace_re:

; 825  :             _Xlength();

	call	?_Xlength@?$vector@_KV?$allocator@_K@std@@@std@@CAXXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Xlength
	int	3
$LN80@Emplace_re:
??$_Emplace_reallocate@AEB_K@?$vector@_KV?$allocator@_K@std@@@std@@AEAAPEA_KQEA_KAEB_K@Z ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Emplace_reallocate<unsigned __int64 const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector
;	COMDAT ?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@QEAAXPEBUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@Z
_TEXT	SEGMENT
this$ = 8
_It$ = 16
?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@QEAAXPEBUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >::_Seek_to, COMDAT

; 218  :         _Ptr = _Refancy<_Tptr>(const_cast<value_type*>(_It));

	mov	QWORD PTR [rcx], rdx

; 219  :     }

	ret	0
?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@@std@@@std@@QEAAXPEBUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<PhiveStaticCompound::PhiveStaticCompoundActorLink> > >::_Seek_to
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Seek_wrapped@PEA_KAEAPEA_K@std@@YAXAEAPEA_K0@Z
_TEXT	SEGMENT
_It$ = 8
_UIt$ = 16
??$_Seek_wrapped@PEA_KAEAPEA_K@std@@YAXAEAPEA_K0@Z PROC	; std::_Seek_wrapped<unsigned __int64 *,unsigned __int64 * &>, COMDAT

; 1256 :     if constexpr (_Wrapped_seekable_v<_Iter, _UIter>) {
; 1257 :         _It._Seek_to(_STD forward<_UIter>(_UIt));
; 1258 :     } else {
; 1259 :         _It = _STD forward<_UIter>(_UIt);

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 1260 :     }
; 1261 : }

	ret	0
??$_Seek_wrapped@PEA_KAEAPEA_K@std@@YAXAEAPEA_K0@Z ENDP	; std::_Seek_wrapped<unsigned __int64 *,unsigned __int64 * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Adl_verify_range@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@@std@@YAXAEBQEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@0@Z
_TEXT	SEGMENT
_First$dead$ = 8
_Last$dead$ = 16
??$_Adl_verify_range@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@@std@@YAXAEBQEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@0@Z PROC ; std::_Adl_verify_range<PhiveStaticCompound::PhiveStaticCompoundActorLink *,PhiveStaticCompound::PhiveStaticCompoundActorLink *>, COMDAT

; 1133 :     // check that [_First, _Last) forms an iterator range
; 1134 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1135 :         _Verify_range(_First, _Last);
; 1136 :     }
; 1137 : }

	ret	0
??$_Adl_verify_range@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@@std@@YAXAEBQEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@0@Z ENDP ; std::_Adl_verify_range<PhiveStaticCompound::PhiveStaticCompoundActorLink *,PhiveStaticCompound::PhiveStaticCompoundActorLink *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Seek_wrapped@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@AEAPEAU12@@std@@YAXAEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@0@Z
_TEXT	SEGMENT
_It$ = 8
_UIt$ = 16
??$_Seek_wrapped@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@AEAPEAU12@@std@@YAXAEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@0@Z PROC ; std::_Seek_wrapped<PhiveStaticCompound::PhiveStaticCompoundActorLink *,PhiveStaticCompound::PhiveStaticCompoundActorLink * &>, COMDAT

; 1256 :     if constexpr (_Wrapped_seekable_v<_Iter, _UIter>) {
; 1257 :         _It._Seek_to(_STD forward<_UIter>(_UIt));
; 1258 :     } else {
; 1259 :         _It = _STD forward<_UIter>(_UIt);

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 1260 :     }
; 1261 : }

	ret	0
??$_Seek_wrapped@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@AEAPEAU12@@std@@YAXAEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@0@Z ENDP ; std::_Seek_wrapped<PhiveStaticCompound::PhiveStaticCompoundActorLink *,PhiveStaticCompound::PhiveStaticCompoundActorLink * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\type_traits
;	COMDAT ??$forward@AEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@YAAEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@AEAPEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@YAAEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@AEAPEAU12@@Z PROC ; std::forward<PhiveStaticCompound::PhiveStaticCompoundActorLink * &>, COMDAT

; 1584 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, rcx

; 1585 : }

	ret	0
??$forward@AEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@@std@@YAAEAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@AEAPEAU12@@Z ENDP ; std::forward<PhiveStaticCompound::PhiveStaticCompoundActorLink * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$_Construct_in_place@_KAEB_K@std@@YAXAEA_KAEB_K@Z
_TEXT	SEGMENT
_Obj$ = 8
<_Args_0>$ = 16
??$_Construct_in_place@_KAEB_K@std@@YAXAEA_KAEB_K@Z PROC ; std::_Construct_in_place<unsigned __int64,unsigned __int64 const &>, COMDAT

; 248  : #if _HAS_CXX20
; 249  :     if (_STD is_constant_evaluated()) {
; 250  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 251  :     } else
; 252  : #endif // _HAS_CXX20
; 253  :     {
; 254  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 255  :     }
; 256  : }

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax
	ret	0
??$_Construct_in_place@_KAEB_K@std@@YAXAEA_KAEB_K@Z ENDP ; std::_Construct_in_place<unsigned __int64,unsigned __int64 const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$construct@_KAEB_K@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_KAEB_K@Z
_TEXT	SEGMENT
__formal$dead$ = 8
_Ptr$ = 16
<_Args_0>$ = 24
??$construct@_KAEB_K@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_KAEB_K@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::construct<unsigned __int64,unsigned __int64 const &>, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rdx], rax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 721  :     }

	ret	0
??$construct@_KAEB_K@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_KAEB_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::construct<unsigned __int64,unsigned __int64 const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Refancy@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@$0A@@std@@YAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@@Z
_TEXT	SEGMENT
_Ptr$ = 8
??$_Refancy@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@$0A@@std@@YAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@@Z PROC ; std::_Refancy<PhiveStaticCompound::PhiveStaticCompoundActorLink *,0>, COMDAT

; 297  :     return _Ptr;

	mov	rax, rcx

; 298  : }

	ret	0
??$_Refancy@PEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@$0A@@std@@YAPEAUPhiveStaticCompoundActorLink@PhiveStaticCompound@@PEAU12@@Z ENDP ; std::_Refancy<PhiveStaticCompound::PhiveStaticCompoundActorLink *,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xutility
;	COMDAT ??$construct_at@_KAEB_K$0A@@std@@YAPEA_KQEA_KAEB_K@Z
_TEXT	SEGMENT
_Location$ = 8
<_Args_0>$ = 16
??$construct_at@_KAEB_K$0A@@std@@YAPEA_KQEA_KAEB_K@Z PROC ; std::construct_at<unsigned __int64,unsigned __int64 const &,0>, COMDAT

; 241  :     _MSVC_CONSTEXPR return ::new (static_cast<void*>(_Location)) _Ty(_STD forward<_Types>(_Args)...);

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx

; 242  : }

	ret	0
??$construct_at@_KAEB_K$0A@@std@@YAPEA_KQEA_KAEB_K@Z ENDP ; std::construct_at<unsigned __int64,unsigned __int64 const &,0>
_TEXT	ENDS
END
